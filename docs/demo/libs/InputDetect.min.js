/**
 * IDSwitch.js
 *
 * @module InputDetect
 * @author natade (https://github.com/natade-jp)
 * @license MIT
 */
class t{constructor(){this._initIDSwitch()}_initIDSwitch(){this.istyped=!1,this.ispressed=!1,this.isreleased=!1,this.pressed_time=0}clone(){const e=new t;return e.istyped=this.istyped,e.ispressed=this.ispressed,e.isreleased=this.isreleased,e.pressed_time=this.pressed_time,e}keyPressed(){this.ispressed||(this.istyped=!0),this.ispressed=!0,this.pressed_time++}keyReleased(){this.ispressed=!1,this.isreleased=!0,this.pressed_time=0}focusLost(){this.keyReleased()}pickInput(e){if(!(e instanceof t))throw"IllegalArgumentException";e.ispressed=this.ispressed,e.istyped=this.istyped,e.isreleased=this.isreleased,e.pressed_time=this.pressed_time,this.isreleased=!1,this.istyped=!1}}
/**
 * IDPosition.js
 *
 * @module InputDetect
 * @author natade (https://github.com/natade-jp)
 * @license MIT
 */class e{x=0;y=0;constructor(t,e){this._initIDPosition(t,e)}_initIDPosition(t,s){if(t instanceof e){const e=t;this.set(e)}else void 0===t?(this.x=0,this.y=0):2===arguments.length?this.set(t,s):(this.x=0,this.y=0)}clone(){return new e(this)}set(t,s){if(t instanceof e){const e=t;this.x=e.x,this.y=e.y}else this.x=t,this.y=s}add(t,s){if(t instanceof e){const e=t;this.x+=e.x,this.y+=e.y}else this.x+=t,this.y+=s}sub(t,s){if(t instanceof e){const e=t;this.x-=e.x,this.y-=e.y}else this.x-=t,this.y-=s}static norm(t,e){const s=t.x-e.x,i=t.y-e.y;return Math.sqrt(s*s+i*i)}}
/**
 * IDDraggableSwitch.js
 *
 * @module InputDetect
 * @author natade (https://github.com/natade-jp)
 * @license MIT
 */class s{constructor(t){this._initIDDraggableSwitch(t)}_initIDDraggableSwitch(s){this.mask=s,this.switch=new t,this.client=new e,this.deltaBase=new e,this.dragged=new e}clone(){const t=new s(this.mask);return t.switch=this.switch.clone(),t.client=this.client.clone(),t.deltaBase=this.deltaBase.clone(),t.dragged=this.dragged.clone(),t}correctionForDOM(t){let s=t.target;s||(s=t.currentTarget);let i=0,o=0;if("clientX"in t&&"clientY"in t?(i=t.clientX,o=t.clientY):"touches"in t&&t.touches.length>0&&(i=t.touches[0].clientX,o=t.touches[0].clientY),void 0===s)return new e(i,o);{const t=s;let n=t.clientWidth,h=t.clientHeight;return"width"in s&&"number"==typeof s.width&&(n=s.width),"height"in s&&"number"==typeof s.height&&(h=s.height),new e(i/t.clientWidth*n,o/t.clientHeight*h)}}setPosition(t){const e=this.correctionForDOM(t);this.client.set(e),this.deltaBase.set(e),this.dragged._initIDPosition()}mousePressed(t){const e=this.correctionForDOM(t);t.button===this.mask&&(this.switch.ispressed||this.dragged._initIDPosition(),this.switch.keyPressed(),this.client.set(e),this.deltaBase.set(e))}mouseReleased(t){t.button===this.mask&&this.switch.ispressed&&this.switch.keyReleased()}mouseMoved(t){const s=this.correctionForDOM(t);if(this.switch.ispressed){const t=new e(s);t.sub(this.deltaBase),this.dragged.add(t)}this.client.set(s.x,s.y),this.deltaBase.set(s.x,s.y)}focusLost(){this.switch.focusLost()}pickInput(t){if(!(t instanceof s))throw"IllegalArgumentException";this.switch.pickInput(t.switch),t.client.set(this.client),t.dragged.set(this.dragged),this.dragged._initIDPosition()}}
/**
 * IDMouse.js
 *
 * @module InputDetect
 * @author natade (https://github.com/natade-jp)
 * @license MIT
 */class i{constructor(){this._initIDMouse()}_initIDMouse(){this.left=new s(i.MOUSE_EVENTS.BUTTON1_MASK),this.center=new s(i.MOUSE_EVENTS.BUTTON2_MASK),this.right=new s(i.MOUSE_EVENTS.BUTTON3_MASK),this.position=new e,this.wheelrotation=0}clone(){const t=new i;return t.left=this.left.clone(),t.center=this.center.clone(),t.right=this.right.clone(),t.position=this.position.clone(),t.wheelrotation=this.wheelrotation,t}mousePressed(t){this.left.mousePressed(t),this.center.mousePressed(t),this.right.mousePressed(t)}mouseReleased(t){this.left.mouseReleased(t),this.center.mouseReleased(t),this.right.mouseReleased(t)}mouseMoved(t){this.left.mouseMoved(t),this.center.mouseMoved(t),this.right.mouseMoved(t),this.position.x=this.left.client.x,this.position.y=this.left.client.y}mouseWheelMoved(t){0!==t.deltaY&&(this.wheelrotation+=t.deltaY>0?-1:1)}focusLost(){this.left.focusLost(),this.center.focusLost(),this.right.focusLost()}pickInput(t){if(!(t instanceof i))throw"IllegalArgumentException";this.left.pickInput(t.left),this.center.pickInput(t.center),this.right.pickInput(t.right),t.position.set(this.position),t.wheelrotation=this.wheelrotation,this.wheelrotation=0}setListenerOnElement(t){const e=this;t.style.cursor="crosshair",t.style.userSelect="none",t.style.setProperty("-moz-user-select","none"),t.style.setProperty("-webkit-user-select","none"),t.style.setProperty("-ms-user-select","none"),t.style.setProperty("-webkit-touch-callout","none"),t.style.setProperty("-webkit-tap-highlight-color","rgba(0,0,0,0)"),t.addEventListener("mousedown",(function(t){e.mousePressed(t)}),!1),t.addEventListener("mouseup",(function(t){e.mouseReleased(t)}),!1),t.addEventListener("mousemove",(function(t){e.mouseMoved(t)}),!1),t.addEventListener("mouseout",(function(){e.focusLost()}),!1),t.addEventListener("wheel",(function(t){e.mouseWheelMoved(t),t.preventDefault()}),!1),t.addEventListener("contextmenu",(function(t){t.preventDefault()}),!1)}}i.MOUSE_EVENTS={BUTTON1_MASK:0,BUTTON2_MASK:1,BUTTON3_MASK:2};
/**
 * IDTouch.js
 *
 * @module InputDetect
 * @author natade (https://github.com/natade-jp)
 * @license MIT
 */
class o extends i{constructor(){super(),this._initIDTouch()}_initIDTouch(){this.touchcount_to_mask={1:i.MOUSE_EVENTS.BUTTON1_MASK,2:i.MOUSE_EVENTS.BUTTON3_MASK,3:i.MOUSE_EVENTS.BUTTON2_MASK};const t=this;this._mousePressed=function(e){t.mousePressed(e)},this._mouseReleased=function(e){t.mouseReleased(e)},this._mouseMoved=function(e){t.mouseMoved(e)},this.isdoubletouch=!1,this._doubleposition_p1=null,this._doubleposition_p2=null}_initPosition(t){this.left.setPosition(t),this.right.setPosition(t),this.center.setPosition(t)}_MultiTouchToMouse(t){let e=0,s=0;for(let i=0;i<t.touches.length;i++)e+=t.touches[i].clientX,s+=t.touches[i].clientY;const i={};if(t.touches.length>0){i.clientX=e/t.touches.length,i.clientY=s/t.touches.length,i.button=this.touchcount_to_mask[t.touches.length];const o=t.touches[0];i.target=o.target?o.target:t.currentTarget}else i.clientX=0,i.clientY=0,i.button=0;return i.touchcount=t.touches.length,i}_MoveMultiTouch(t){if(2===t.touches.length){const s=t.touches[0],i=t.touches[1];if(!1===this.isdoubletouch)this.isdoubletouch=!0,this._doubleposition_p1=new e(s.clientX,s.clientY),this._doubleposition_p2=new e(i.clientX,i.clientY);else{const t=new e(s.clientX,s.clientY),o=new e(i.clientX,i.clientY),n=e.norm(this._doubleposition_p1,this._doubleposition_p2)-e.norm(t,o);this._doubleposition_p1=t,this._doubleposition_p2=o;const h=Math.abs(n)<10?.01*Math.abs(n):.5;this.wheelrotation+=(n>0?-1:1)*h}}else this.isdoubletouch}_actFuncMask(t,e,s,o){const n=t;for(const t in i.MOUSE_EVENTS)n.button=i.MOUSE_EVENTS[t],i.MOUSE_EVENTS[t]===o?e(n):s(n)}_touchStart(t){const e=this._MultiTouchToMouse(t);this._initPosition(e),this._actFuncMask(e,this._mousePressed,this._mouseReleased,e.button)}_touchEnd(t){const e=this._MultiTouchToMouse(t);this._actFuncMask(e,this._mouseReleased,this._mouseReleased,e.button)}_touchMove(t){this._MoveMultiTouch(t);const e=this._MultiTouchToMouse(t);this._actFuncMask(e,this._mouseMoved,this._mouseMoved,e.button)}setListenerOnElement(t){super.setListenerOnElement(t);const e=this,s=function(t){e._touchEnd(t)};t.addEventListener("touchstart",(function(t){e._touchStart(t)}),!1),t.addEventListener("touchend",s,!1),t.addEventListener("touchmove",(function(t){e._touchMove(t),t.preventDefault()}),!1),t.addEventListener("touchcancel",s,!1)}}
/**
 * IDTools.js
 *
 * @module InputDetect
 * @author natade (https://github.com/natade-jp)
 * @license MIT
 */const n=function(){window.addEventListener("load",(function(){document.body.style.height="100%",document.body.style.overflow="hidden",document.documentElement.style.height="100%",document.documentElement.style.overflow="hidden"}),!1)};
/**
 * InputDetect
 *
 * @module InputDetect
 * @author natade (https://github.com/natade-jp)
 * @license MIT
 */class h{constructor(){this._data=new o}static create(){return new h}setListenerOnElement(t){this._data.setListenerOnElement(t)}pickInput(){const t=new o;return this._data.pickInput(t),t}static noScroll(){n()}}export{h as default};
