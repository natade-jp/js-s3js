[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/basic/S3Camera.js",
    "content": "﻿import S3Math from \"../math/S3Math.js\";\nimport S3Vector from \"../math/S3Vector.js\";\nimport S3Matrix from \"../math/S3Matrix.js\";\nimport S3System from \"./S3System.js\";\n\n/**\n * 3DCGシーンのカメラ（視点）情報を管理するクラス\n * 視点座標、注視点、視野角、描画範囲、各種行列演算などを保持・操作します。\n *\n * @class\n * @module S3\n */\nexport default class S3Camera {\n\t/**\n\t * カメラを作成します。\n\t * @param {S3System} s3system S3Systemインスタンス\n\t */\n\tconstructor(s3system) {\n\t\t/**\n\t\t * システムインスタンス\n\t\t * @type {S3System}\n\t\t */\n\t\tthis.sys = s3system;\n\t\tthis.init();\n\t}\n\n\t/**\n\t * カメラの状態を初期化します（初期パラメータにリセット）。\n\t */\n\tinit() {\n\t\t/**\n\t\t * 上下方向の視野角（度単位）\n\t\t * @type {number}\n\t\t */\n\t\tthis.fovY = 45;\n\n\t\t/**\n\t\t * 視点（カメラの位置ベクトル）\n\t\t * @type {S3Vector}\n\t\t */\n\t\tthis.eye = new S3Vector(0, 0, 0);\n\n\t\t/**\n\t\t * 注視点（カメラが見ている位置ベクトル）\n\t\t * @type {S3Vector}\n\t\t */\n\t\tthis.at = new S3Vector(0, 0, 1);\n\n\t\t/**\n\t\t * 描画範囲の最近接面（ニアクリップ）\n\t\t * @type {number}\n\t\t */\n\t\tthis.near = 1;\n\n\t\t/**\n\t\t * 描画範囲の最遠面（ファークリップ）\n\t\t * @type {number}\n\t\t */\n\t\tthis.far = 1000;\n\t}\n\n\t/**\n\t * カメラを破棄します（プロパティを初期化）。\n\t */\n\tdispose() {\n\t\tthis.sys = null;\n\t\tthis.fovY = 0;\n\t\tthis.eye = null;\n\t\tthis.at = null;\n\t\tthis.near = 0;\n\t\tthis.far = 0;\n\t}\n\n\t/**\n\t * このカメラのクローン（複製）を作成します。\n\t * @returns {S3Camera} 複製されたS3Cameraインスタンス\n\t */\n\tclone() {\n\t\tconst camera = new S3Camera(this.sys);\n\t\tcamera.fovY = this.fovY;\n\t\tcamera.eye = this.eye;\n\t\tcamera.at = this.at;\n\t\tcamera.near = this.near;\n\t\tcamera.far = this.far;\n\t\treturn camera;\n\t}\n\n\t/**\n\t * カメラのビュー・プロジェクション・ビューポート行列情報をまとめた型\n\t *\n\t * - LookAt: ビュー変換行列\n\t * - aspect: アスペクト比（canvas幅 / 高さ）\n\t * - PerspectiveFov: パースペクティブ射影行列\n\t * - Viewport: ビューポート変換行列\n\t *\n\t * @typedef {Object} S3VPSMatrix\n\t * @property {S3Matrix} LookAt         ビュー（LookAt）変換行列\n\t * @property {number} aspect           アスペクト比\n\t * @property {S3Matrix} PerspectiveFov パースペクティブ射影行列\n\t * @property {S3Matrix} Viewport       ビューポート変換行列\n\t */\n\n\t/**\n\t * カメラのビュー・プロジェクション・ビューポート行列（VPS）をまとめて取得します。\n\t * 通常は描画や座標変換時の各種行列一式の取得に使います。\n\t *\n\t * @param {HTMLCanvasElement} canvas 描画先となるcanvas要素\n\t * @returns {S3VPSMatrix}\n\t */\n\tgetVPSMatrix(canvas) {\n\t\tconst x = S3System.calcAspect(canvas.width, canvas.height);\n\t\t// ビューイング変換行列を作成する\n\t\tconst V = this.sys.getMatrixLookAt(this.eye, this.at);\n\t\t// 射影トランスフォーム行列\n\t\tconst P = this.sys.getMatrixPerspectiveFov(this.fovY, x, this.near, this.far);\n\t\t// ビューポート行列\n\t\tconst S = this.sys.getMatrixViewport(0, 0, canvas.width, canvas.height);\n\t\treturn { LookAt: V, aspect: x, PerspectiveFov: P, Viewport: S };\n\t}\n\n\t/**\n\t * 描画範囲（ニア・ファー）を設定します。\n\t * @param {number} near 最近接面\n\t * @param {number} far 最遠面\n\t */\n\tsetDrawRange(near, far) {\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t}\n\n\t/**\n\t * 上下方向の視野角を設定します（度単位）。\n\t * @param {number} fovY 視野角\n\t */\n\tsetFovY(fovY) {\n\t\tthis.fovY = fovY;\n\t}\n\n\t/**\n\t * 視点（eye）を設定します。\n\t * @param {S3Vector} eye 新しい視点ベクトル\n\t */\n\tsetEye(eye) {\n\t\tthis.eye = eye.clone();\n\t}\n\n\t/**\n\t * 注視点（at）を設定します。\n\t * @param {S3Vector} at 新しい注視点ベクトル\n\t */\n\tsetCenter(at) {\n\t\tthis.at = at.clone();\n\t}\n\n\t/**\n\t * 現在の視線ベクトル（at→eye方向の単位ベクトル）を取得します。\n\t * @returns {S3Vector} 正規化済みの視線方向\n\t */\n\tgetDirection() {\n\t\treturn this.eye.getDirectionNormalized(this.at);\n\t}\n\n\t/**\n\t * カメラと注視点の距離を取得します。\n\t * @returns {number} 距離\n\t */\n\tgetDistance() {\n\t\treturn this.at.getDistance(this.eye);\n\t}\n\n\t/**\n\t * 注視点から一定距離の位置に視点を設定します。\n\t * @param {number} distance 距離\n\t */\n\tsetDistance(distance) {\n\t\tconst direction = this.at.getDirectionNormalized(this.eye);\n\t\tthis.eye = this.at.add(direction.mul(distance));\n\t}\n\n\t/**\n\t * カメラの水平方向（Y軸回転）の角度を取得します（度単位）。\n\t * @returns {number} Y軸回転角（度）\n\t */\n\tgetRotateY() {\n\t\tconst ray = this.at.getDirection(this.eye);\n\t\treturn S3Math.degrees(Math.atan2(ray.x, ray.z));\n\t}\n\n\t/**\n\t * 水平方向（Y軸回転）の角度を設定します（度単位）。\n\t * @param {number} deg Y軸回転角（度）\n\t */\n\tsetRotateY(deg) {\n\t\tconst rad = S3Math.radius(deg);\n\t\tconst ray = this.at.getDirection(this.eye);\n\t\tconst length = ray.setY(0).norm();\n\t\tconst cos = Math.cos(rad);\n\t\tconst sin = Math.sin(rad);\n\t\tthis.eye = new S3Vector(this.at.x + length * sin, this.eye.y, this.at.z + length * cos);\n\t}\n\n\t/**\n\t * Y軸回転角を相対的に加算します（度単位）。\n\t * @param {number} deg 加算する角度（度）\n\t */\n\taddRotateY(deg) {\n\t\tthis.setRotateY(this.getRotateY() + deg);\n\t}\n\n\t/**\n\t * カメラの垂直方向（X軸回転）の角度を取得します（度単位）。\n\t * @returns {number} X軸回転角（度）\n\t */\n\tgetRotateX() {\n\t\tconst ray = this.at.getDirection(this.eye);\n\t\treturn S3Math.degrees(Math.atan2(ray.z, ray.y));\n\t}\n\n\t/**\n\t * 垂直方向（X軸回転）の角度を設定します（度単位）。\n\t * @param {number} deg X軸回転角（度）\n\t */\n\tsetRotateX(deg) {\n\t\tconst rad = S3Math.radius(deg);\n\t\tconst ray = this.at.getDirection(this.eye);\n\t\tconst length = ray.setX(0).norm();\n\t\tconst cos = Math.cos(rad);\n\t\tconst sin = Math.sin(rad);\n\t\tthis.eye = new S3Vector(this.eye.x, this.at.y + length * cos, this.at.z + length * sin);\n\t}\n\n\t/**\n\t * X軸回転角を相対的に加算します（度単位）。\n\t * @param {number} deg 加算する角度（度）\n\t */\n\taddRotateX(deg) {\n\t\tthis.setRotateX(this.getRotateX() + deg);\n\t}\n\n\t/**\n\t * ワールド座標系で絶対移動します。\n\t * @param {S3Vector} v 移動ベクトル\n\t */\n\ttranslateAbsolute(v) {\n\t\tthis.eye = this.eye.add(v);\n\t\tthis.at = this.at.add(v);\n\t}\n\n\t/**\n\t * カメラのローカル座標系で相対移動します。\n\t * @param {S3Vector} v 移動ベクトル\n\t */\n\ttranslateRelative(v) {\n\t\tlet X, Y, Z;\n\t\tconst up = new S3Vector(0.0, 1.0, 0.0);\n\t\t// Z ベクトルの作成\n\t\tZ = this.eye.getDirectionNormalized(this.at);\n\n\t\t// 座標系に合わせて計算\n\t\tif (this.sys.dimensionmode === S3System.DIMENSION_MODE.RIGHT_HAND) {\n\t\t\t// 右手系なら反転\n\t\t\tZ = Z.negate();\n\t\t}\n\t\t// X, Y ベクトルの作成\n\t\tX = up.cross(Z).normalize();\n\t\tY = Z.cross(X);\n\t\t// 移動\n\t\tX = X.mul(v.x);\n\t\tY = Y.mul(v.y);\n\t\tZ = Z.mul(v.z);\n\t\tthis.translateAbsolute(X.add(Y).add(Z));\n\t}\n\n\t/**\n\t * カメラのパラメータを文字列で出力します。\n\t * @returns {string} 視点・注視点・視野角の情報を含む文字列\n\t */\n\ttoString() {\n\t\treturn \"camera[\\n\" + \"eye  :\" + this.eye + \",\\n\" + \"at   :\" + this.at + \",\\n\" + \"fovY :\" + this.fovY + \"]\";\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/basic/S3Camera.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "S3Camera",
    "memberof": "src/basic/S3Camera.js",
    "static": true,
    "longname": "src/basic/S3Camera.js~S3Camera",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/basic/S3Camera.js",
    "importStyle": "S3Camera",
    "description": "3DCGシーンのカメラ（視点）情報を管理するクラス\n視点座標、注視点、視野角、描画範囲、各種行列演算などを保持・操作します。",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#constructor",
    "access": "public",
    "description": "カメラを作成します。",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3System"
        ],
        "spread": false,
        "optional": false,
        "name": "s3system",
        "description": "S3Systemインスタンス"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "sys",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#sys",
    "access": "public",
    "description": "システムインスタンス",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "S3System"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "init",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#init",
    "access": "public",
    "description": "カメラの状態を初期化します（初期パラメータにリセット）。",
    "lineNumber": 30,
    "params": [],
    "return": null
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "fovY",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#fovY",
    "access": "public",
    "description": "上下方向の視野角（度単位）",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "eye",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#eye",
    "access": "public",
    "description": "視点（カメラの位置ベクトル）",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "at",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#at",
    "access": "public",
    "description": "注視点（カメラが見ている位置ベクトル）",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "near",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#near",
    "access": "public",
    "description": "描画範囲の最近接面（ニアクリップ）",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "far",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#far",
    "access": "public",
    "description": "描画範囲の最遠面（ファークリップ）",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "dispose",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#dispose",
    "access": "public",
    "description": "カメラを破棄します（プロパティを初期化）。",
    "lineNumber": 65,
    "params": [],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "clone",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#clone",
    "access": "public",
    "description": "このカメラのクローン（複製）を作成します。",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Camera} 複製されたS3Cameraインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Camera"
      ],
      "spread": false,
      "description": "複製されたS3Cameraインスタンス"
    },
    "params": []
  },
  {
    "__docId__": 66,
    "kind": "typedef",
    "name": "S3VPSMatrix",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "static": true,
    "longname": "src/basic/S3Camera.js~S3Camera.S3VPSMatrix",
    "access": "public",
    "description": "カメラのビュー・プロジェクション・ビューポート行列情報をまとめた型\n\n- LookAt: ビュー変換行列\n- aspect: アスペクト比（canvas幅 / 高さ）\n- PerspectiveFov: パースペクティブ射影行列\n- Viewport: ビューポート変換行列",
    "properties": [
      {
        "nullable": null,
        "types": [
          "S3Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "LookAt",
        "description": "ビュー（LookAt）変換行列"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "aspect",
        "description": "アスペクト比"
      },
      {
        "nullable": null,
        "types": [
          "S3Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "PerspectiveFov",
        "description": "パースペクティブ射影行列"
      },
      {
        "nullable": null,
        "types": [
          "S3Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "Viewport",
        "description": "ビューポート変換行列"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3VPSMatrix"
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "getVPSMatrix",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#getVPSMatrix",
    "access": "public",
    "description": "カメラのビュー・プロジェクション・ビューポート行列（VPS）をまとめて取得します。\n通常は描画や座標変換時の各種行列一式の取得に使います。",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3VPSMatrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLCanvasElement"
        ],
        "spread": false,
        "optional": false,
        "name": "canvas",
        "description": "描画先となるcanvas要素"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3VPSMatrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "setDrawRange",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#setDrawRange",
    "access": "public",
    "description": "描画範囲（ニア・ファー）を設定します。",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "near",
        "description": "最近接面"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "far",
        "description": "最遠面"
      }
    ],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "setFovY",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#setFovY",
    "access": "public",
    "description": "上下方向の視野角を設定します（度単位）。",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fovY",
        "description": "視野角"
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "setEye",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#setEye",
    "access": "public",
    "description": "視点（eye）を設定します。",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "eye",
        "description": "新しい視点ベクトル"
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "setCenter",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#setCenter",
    "access": "public",
    "description": "注視点（at）を設定します。",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "at",
        "description": "新しい注視点ベクトル"
      }
    ],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "getDirection",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#getDirection",
    "access": "public",
    "description": "現在の視線ベクトル（at→eye方向の単位ベクトル）を取得します。",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector} 正規化済みの視線方向"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": "正規化済みの視線方向"
    },
    "params": []
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "getDistance",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#getDistance",
    "access": "public",
    "description": "カメラと注視点の距離を取得します。",
    "lineNumber": 167,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 距離"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "距離"
    },
    "params": []
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "setDistance",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#setDistance",
    "access": "public",
    "description": "注視点から一定距離の位置に視点を設定します。",
    "lineNumber": 175,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "distance",
        "description": "距離"
      }
    ],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "getRotateY",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#getRotateY",
    "access": "public",
    "description": "カメラの水平方向（Y軸回転）の角度を取得します（度単位）。",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Y軸回転角（度）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Y軸回転角（度）"
    },
    "params": []
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "setRotateY",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#setRotateY",
    "access": "public",
    "description": "水平方向（Y軸回転）の角度を設定します（度単位）。",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "deg",
        "description": "Y軸回転角（度）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "addRotateY",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#addRotateY",
    "access": "public",
    "description": "Y軸回転角を相対的に加算します（度単位）。",
    "lineNumber": 206,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "deg",
        "description": "加算する角度（度）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "getRotateX",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#getRotateX",
    "access": "public",
    "description": "カメラの垂直方向（X軸回転）の角度を取得します（度単位）。",
    "lineNumber": 214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} X軸回転角（度）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "X軸回転角（度）"
    },
    "params": []
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "setRotateX",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#setRotateX",
    "access": "public",
    "description": "垂直方向（X軸回転）の角度を設定します（度単位）。",
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "deg",
        "description": "X軸回転角（度）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "addRotateX",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#addRotateX",
    "access": "public",
    "description": "X軸回転角を相対的に加算します（度単位）。",
    "lineNumber": 236,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "deg",
        "description": "加算する角度（度）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "translateAbsolute",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#translateAbsolute",
    "access": "public",
    "description": "ワールド座標系で絶対移動します。",
    "lineNumber": 244,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "移動ベクトル"
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "translateRelative",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#translateRelative",
    "access": "public",
    "description": "カメラのローカル座標系で相対移動します。",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "移動ベクトル"
      }
    ],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "toString",
    "memberof": "src/basic/S3Camera.js~S3Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Camera.js~S3Camera#toString",
    "access": "public",
    "description": "カメラのパラメータを文字列で出力します。",
    "lineNumber": 278,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 視点・注視点・視野角の情報を含む文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "視点・注視点・視野角の情報を含む文字列"
    },
    "params": []
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/basic/S3Light.js",
    "content": "﻿import S3Vector from \"../math/S3Vector.js\";\n\n/**\n * 3DCGシーン用のライト（照明）情報を管理するクラス\n * 各種ライト（環境光・平行光源・点光源など）のモード・強さ・方向・色などを保持します。\n *\n * @class\n * @module S3\n */\nexport default class S3Light {\n\t/**\n\t * ライト情報を初期化して作成します。\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tthis.init();\n\t}\n\n\t/**\n\t * ライト情報を初期値でリセットします。\n\t * モードや強度、範囲、方向、色なども初期状態に戻ります。\n\t */\n\tinit() {\n\t\t/**\n\t\t * ライトの種類（モード）を指定します。S3Light.MODEを参照。\n\t\t * @type {number}\n\t\t */\n\t\tthis.mode = S3Light.MODE.DIRECTIONAL_LIGHT;\n\n\t\t/**\n\t\t * ライトの強さ（1.0=通常、0.0=無効）\n\t\t * @type {number}\n\t\t */\n\t\tthis.power = 1.0;\n\n\t\t/**\n\t\t * ライトの影響範囲（主に点光源で使用）\n\t\t * @type {number}\n\t\t */\n\t\tthis.range = 1000.0;\n\n\t\t/**\n\t\t * ライトの位置ベクトル（主に点光源で使用）\n\t\t * @type {S3Vector}\n\t\t */\n\t\tthis.position = new S3Vector(0.0, 0.0, 0.0);\n\n\t\t/**\n\t\t * ライトの方向ベクトル（主に平行光源で使用）\n\t\t * @type {S3Vector}\n\t\t */\n\t\tthis.direction = new S3Vector(0.0, 0.0, -1.0);\n\n\t\t/**\n\t\t * ライトの色（RGB値のベクトル）\n\t\t * @type {S3Vector}\n\t\t */\n\t\tthis.color = new S3Vector(1.0, 1.0, 1.0);\n\t}\n\n\t/**\n\t * このライト情報のクローン（複製）を作成します。\n\t * @param {typeof S3Light} [Instance] クラス指定（省略時はS3Light）\n\t * @returns {S3Light} 複製されたライトインスタンス\n\t */\n\tclone(Instance) {\n\t\tif (!Instance) {\n\t\t\tInstance = S3Light;\n\t\t}\n\t\tconst light = new Instance();\n\t\tlight.mode = this.mode;\n\t\tlight.power = this.power;\n\t\tlight.range = this.range;\n\t\tlight.position = this.position;\n\t\tlight.direction = this.direction;\n\t\tlight.color = this.color;\n\t\treturn light;\n\t}\n\n\t/**\n\t * ライトの種類（モード）を設定します。\n\t * @param {number} mode S3Light.MODEで定義される値\n\t */\n\tsetMode(mode) {\n\t\tthis.mode = mode;\n\t}\n\n\t/**\n\t * ライトの強さを設定します。\n\t * @param {number} power 強度（通常1.0、0.0で無効）\n\t */\n\tsetPower(power) {\n\t\tthis.power = power;\n\t}\n\n\t/**\n\t * ライトの影響範囲を設定します（点光源等）。\n\t * @param {number} range 範囲\n\t */\n\tsetRange(range) {\n\t\tthis.range = range;\n\t}\n\n\t/**\n\t * ライトの位置を設定します（点光源等）。\n\t * @param {S3Vector} position 位置ベクトル\n\t */\n\tsetPosition(position) {\n\t\tthis.position = position;\n\t}\n\n\t/**\n\t * ライトの方向を設定します（平行光源等）。\n\t * @param {S3Vector} direction 方向ベクトル\n\t */\n\tsetDirection(direction) {\n\t\tthis.direction = direction;\n\t}\n\n\t/**\n\t * ライトの色を設定します（RGB）。\n\t * @param {S3Vector} color 色ベクトル\n\t */\n\tsetColor(color) {\n\t\tthis.color = color;\n\t}\n}\n\n/**\n * ライトの種類（モード）定数\n * @enum {number}\n */\nS3Light.MODE = {\n\t/** ライト無効 */\n\tNONE: 0,\n\t/** 環境光 */\n\tAMBIENT_LIGHT: 1,\n\t/** 平行光源 */\n\tDIRECTIONAL_LIGHT: 2,\n\t/** 点光源 */\n\tPOINT_LIGHT: 3\n};\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/basic/S3Light.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "class",
    "name": "S3Light",
    "memberof": "src/basic/S3Light.js",
    "static": true,
    "longname": "src/basic/S3Light.js~S3Light",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/basic/S3Light.js",
    "importStyle": "S3Light",
    "description": "3DCGシーン用のライト（照明）情報を管理するクラス\n各種ライト（環境光・平行光源・点光源など）のモード・強さ・方向・色などを保持します。",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 96,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/basic/S3Light.js~S3Light",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Light.js~S3Light#constructor",
    "access": "public",
    "description": "ライト情報を初期化して作成します。",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "init",
    "memberof": "src/basic/S3Light.js~S3Light",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Light.js~S3Light#init",
    "access": "public",
    "description": "ライト情報を初期値でリセットします。\nモードや強度、範囲、方向、色なども初期状態に戻ります。",
    "lineNumber": 23,
    "params": [],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "mode",
    "memberof": "src/basic/S3Light.js~S3Light",
    "static": false,
    "longname": "src/basic/S3Light.js~S3Light#mode",
    "access": "public",
    "description": "ライトの種類（モード）を指定します。S3Light.MODEを参照。",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "power",
    "memberof": "src/basic/S3Light.js~S3Light",
    "static": false,
    "longname": "src/basic/S3Light.js~S3Light#power",
    "access": "public",
    "description": "ライトの強さ（1.0=通常、0.0=無効）",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "range",
    "memberof": "src/basic/S3Light.js~S3Light",
    "static": false,
    "longname": "src/basic/S3Light.js~S3Light#range",
    "access": "public",
    "description": "ライトの影響範囲（主に点光源で使用）",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "position",
    "memberof": "src/basic/S3Light.js~S3Light",
    "static": false,
    "longname": "src/basic/S3Light.js~S3Light#position",
    "access": "public",
    "description": "ライトの位置ベクトル（主に点光源で使用）",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "direction",
    "memberof": "src/basic/S3Light.js~S3Light",
    "static": false,
    "longname": "src/basic/S3Light.js~S3Light#direction",
    "access": "public",
    "description": "ライトの方向ベクトル（主に平行光源で使用）",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "color",
    "memberof": "src/basic/S3Light.js~S3Light",
    "static": false,
    "longname": "src/basic/S3Light.js~S3Light#color",
    "access": "public",
    "description": "ライトの色（RGB値のベクトル）",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "clone",
    "memberof": "src/basic/S3Light.js~S3Light",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Light.js~S3Light#clone",
    "access": "public",
    "description": "このライト情報のクローン（複製）を作成します。",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Light} 複製されたライトインスタンス"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "typeof S3Light"
        ],
        "spread": false,
        "optional": true,
        "name": "Instance",
        "description": "クラス指定（省略時はS3Light）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Light"
      ],
      "spread": false,
      "description": "複製されたライトインスタンス"
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "setMode",
    "memberof": "src/basic/S3Light.js~S3Light",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Light.js~S3Light#setMode",
    "access": "public",
    "description": "ライトの種類（モード）を設定します。",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": "S3Light.MODEで定義される値"
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "setPower",
    "memberof": "src/basic/S3Light.js~S3Light",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Light.js~S3Light#setPower",
    "access": "public",
    "description": "ライトの強さを設定します。",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "power",
        "description": "強度（通常1.0、0.0で無効）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "setRange",
    "memberof": "src/basic/S3Light.js~S3Light",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Light.js~S3Light#setRange",
    "access": "public",
    "description": "ライトの影響範囲を設定します（点光源等）。",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "range",
        "description": "範囲"
      }
    ],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/basic/S3Light.js~S3Light",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Light.js~S3Light#setPosition",
    "access": "public",
    "description": "ライトの位置を設定します（点光源等）。",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "位置ベクトル"
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "setDirection",
    "memberof": "src/basic/S3Light.js~S3Light",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Light.js~S3Light#setDirection",
    "access": "public",
    "description": "ライトの方向を設定します（平行光源等）。",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "方向ベクトル"
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "setColor",
    "memberof": "src/basic/S3Light.js~S3Light",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Light.js~S3Light#setColor",
    "access": "public",
    "description": "ライトの色を設定します（RGB）。",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "色ベクトル"
      }
    ],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "src/basic/S3Material.js",
    "content": "﻿import S3System from \"./S3System.js\";\nimport S3Texture from \"./S3Texture.js\";\nimport S3Vector from \"../math/S3Vector.js\";\n\n/**\n * 3DCG用のマテリアル（素材）情報を管理するクラス(mutable)\n * 拡散反射色、自己照明、鏡面反射、環境光、反射、テクスチャなどを一括管理します。\n *\n * @class\n * @module S3\n */\nexport default class S3Material {\n\t/**\n\t * マテリアルを作成します。\n\t * @param {S3System} s3system S3System インスタンス（内部処理・生成補助用）\n\t * @param {string} [name] マテリアル名（任意指定、未指定時は\"s3default\"）\n\t */\n\tconstructor(s3system, name) {\n\t\t/**\n\t\t * システムインスタンス\n\t\t * @type {S3System}\n\t\t */\n\t\tthis.sys = s3system;\n\n\t\t/**\n\t\t * マテリアル名\n\t\t * @type {string}\n\t\t */\n\t\tthis.name = \"s3default\";\n\t\tif (name !== undefined) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\t/**\n\t\t * 拡散反射色（ベースカラー、RGBA値）\n\t\t * @type {S3Vector}\n\t\t */\n\t\tthis.color = new S3Vector(1.0, 1.0, 1.0, 1.0);\n\n\t\t/**\n\t\t * 拡散反射の強さ（0～1）\n\t\t * @type {number}\n\t\t */\n\t\tthis.diffuse = 0.8;\n\n\t\t/**\n\t\t * 自己照明（発光色）\n\t\t * @type {S3Vector}\n\t\t */\n\t\tthis.emission = new S3Vector(0.0, 0.0, 0.0);\n\n\t\t/**\n\t\t * 鏡面反射色\n\t\t * @type {S3Vector}\n\t\t */\n\t\tthis.specular = new S3Vector(0.0, 0.0, 0.0);\n\n\t\t/**\n\t\t * 鏡面反射の強さ\n\t\t * @type {number}\n\t\t */\n\t\tthis.power = 5.0;\n\n\t\t/**\n\t\t * 環境光（光源に依存しない基本色）\n\t\t * @type {S3Vector}\n\t\t */\n\t\tthis.ambient = new S3Vector(0.6, 0.6, 0.6);\n\n\t\t/**\n\t\t * 環境マッピングの反射率\n\t\t * @type {number}\n\t\t */\n\t\tthis.reflect = 0.0;\n\n\t\t/**\n\t\t * 色用テクスチャ（拡散色テクスチャ）\n\t\t * @type {S3Texture}\n\t\t */\n\t\tthis.textureColor = this.sys.createTexture();\n\n\t\t/**\n\t\t * 法線マップ用テクスチャ\n\t\t * @type {S3Texture}\n\t\t */\n\t\tthis.textureNormal = this.sys.createTexture();\n\t}\n\n\t/**\n\t * マテリアルを解放します（現状は未実装）。\n\t */\n\tdispose() {}\n\n\t/**\n\t * マテリアル名を設定します。\n\t * @param {string} name 新しい名前\n\t */\n\tsetName(name) {\n\t\tthis.name = name;\n\t}\n\n\t/**\n\t * 拡散反射色を設定します。\n\t * @param {S3Vector|Array<number>|number} color S3Vector, 配列, または単一値\n\t */\n\tsetColor(color) {\n\t\tthis.color = this.sys._toVector3(color);\n\t}\n\n\t/**\n\t * 拡散反射の強さを設定します。\n\t * @param {number} diffuse 拡散反射係数（0～1）\n\t */\n\tsetDiffuse(diffuse) {\n\t\tthis.diffuse = this.sys._toValue(diffuse);\n\t}\n\n\t/**\n\t * 自己照明（発光色）を設定します。\n\t * @param {S3Vector|Array<number>|number} emission S3Vector, 配列, または単一値\n\t */\n\tsetEmission(emission) {\n\t\tthis.emission = this.sys._toVector3(emission);\n\t}\n\n\t/**\n\t * 鏡面反射色を設定します。\n\t * @param {S3Vector|Array<number>|number} specular S3Vector, 配列, または単一値\n\t */\n\tsetSpecular(specular) {\n\t\tthis.specular = this.sys._toVector3(specular);\n\t}\n\n\t/**\n\t * 鏡面反射の強さを設定します。\n\t * @param {number} power 鏡面反射係数\n\t */\n\tsetPower(power) {\n\t\tthis.power = this.sys._toValue(power);\n\t}\n\n\t/**\n\t * 環境光（アンビエント色）を設定します。\n\t * @param {S3Vector|Array<number>|number} ambient S3Vector, 配列, または単一値\n\t */\n\tsetAmbient(ambient) {\n\t\tthis.ambient = this.sys._toVector3(ambient);\n\t}\n\n\t/**\n\t * 環境マッピングの反射率を設定します。\n\t * @param {number} reflect 反射率（0～1）\n\t */\n\tsetReflect(reflect) {\n\t\tthis.reflect = this.sys._toValue(reflect);\n\t}\n\n\t/**\n\t * 拡散色用テクスチャ画像を設定します。\n\t * @param {*} data 画像またはURL等（S3Texture.setImage に渡される形式）\n\t */\n\tsetTextureColor(data) {\n\t\tif (this.textureColor !== null) {\n\t\t\tthis.textureColor.dispose();\n\t\t}\n\t\tthis.textureColor = this.sys.createTexture();\n\t\tthis.textureColor.setImage(data);\n\t}\n\n\t/**\n\t * 法線マップ用テクスチャ画像を設定します。\n\t * @param {*} data 画像またはURL等（S3Texture.setImageに渡される形式）\n\t */\n\tsetTextureNormal(data) {\n\t\tif (this.textureNormal !== null) {\n\t\t\tthis.textureNormal.dispose();\n\t\t}\n\t\tthis.textureNormal = this.sys.createTexture();\n\t\tthis.textureNormal.setImage(data);\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/basic/S3Material.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "class",
    "name": "S3Material",
    "memberof": "src/basic/S3Material.js",
    "static": true,
    "longname": "src/basic/S3Material.js~S3Material",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/basic/S3Material.js",
    "importStyle": "S3Material",
    "description": "3DCG用のマテリアル（素材）情報を管理するクラス(mutable)\n拡散反射色、自己照明、鏡面反射、環境光、反射、テクスチャなどを一括管理します。",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 119,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/basic/S3Material.js~S3Material",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#constructor",
    "access": "public",
    "description": "マテリアルを作成します。",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3System"
        ],
        "spread": false,
        "optional": false,
        "name": "s3system",
        "description": "S3System インスタンス（内部処理・生成補助用）"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "マテリアル名（任意指定、未指定時は\"s3default\"）"
      }
    ]
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "sys",
    "memberof": "src/basic/S3Material.js~S3Material",
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#sys",
    "access": "public",
    "description": "システムインスタンス",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "S3System"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "name",
    "memberof": "src/basic/S3Material.js~S3Material",
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#name",
    "access": "public",
    "description": "マテリアル名",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "color",
    "memberof": "src/basic/S3Material.js~S3Material",
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#color",
    "access": "public",
    "description": "拡散反射色（ベースカラー、RGBA値）",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "diffuse",
    "memberof": "src/basic/S3Material.js~S3Material",
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#diffuse",
    "access": "public",
    "description": "拡散反射の強さ（0～1）",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "emission",
    "memberof": "src/basic/S3Material.js~S3Material",
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#emission",
    "access": "public",
    "description": "自己照明（発光色）",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "specular",
    "memberof": "src/basic/S3Material.js~S3Material",
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#specular",
    "access": "public",
    "description": "鏡面反射色",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "power",
    "memberof": "src/basic/S3Material.js~S3Material",
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#power",
    "access": "public",
    "description": "鏡面反射の強さ",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "ambient",
    "memberof": "src/basic/S3Material.js~S3Material",
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#ambient",
    "access": "public",
    "description": "環境光（光源に依存しない基本色）",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "reflect",
    "memberof": "src/basic/S3Material.js~S3Material",
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#reflect",
    "access": "public",
    "description": "環境マッピングの反射率",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "textureColor",
    "memberof": "src/basic/S3Material.js~S3Material",
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#textureColor",
    "access": "public",
    "description": "色用テクスチャ（拡散色テクスチャ）",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "S3Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "textureNormal",
    "memberof": "src/basic/S3Material.js~S3Material",
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#textureNormal",
    "access": "public",
    "description": "法線マップ用テクスチャ",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "S3Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "dispose",
    "memberof": "src/basic/S3Material.js~S3Material",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#dispose",
    "access": "public",
    "description": "マテリアルを解放します（現状は未実装）。",
    "lineNumber": 92,
    "params": [],
    "return": null
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "setName",
    "memberof": "src/basic/S3Material.js~S3Material",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#setName",
    "access": "public",
    "description": "マテリアル名を設定します。",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "新しい名前"
      }
    ],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "setColor",
    "memberof": "src/basic/S3Material.js~S3Material",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#setColor",
    "access": "public",
    "description": "拡散反射色を設定します。",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector",
          "Array<number>",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "S3Vector, 配列, または単一値"
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "setDiffuse",
    "memberof": "src/basic/S3Material.js~S3Material",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#setDiffuse",
    "access": "public",
    "description": "拡散反射の強さを設定します。",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "diffuse",
        "description": "拡散反射係数（0～1）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "setEmission",
    "memberof": "src/basic/S3Material.js~S3Material",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#setEmission",
    "access": "public",
    "description": "自己照明（発光色）を設定します。",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector",
          "Array<number>",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "emission",
        "description": "S3Vector, 配列, または単一値"
      }
    ],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "setSpecular",
    "memberof": "src/basic/S3Material.js~S3Material",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#setSpecular",
    "access": "public",
    "description": "鏡面反射色を設定します。",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector",
          "Array<number>",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "specular",
        "description": "S3Vector, 配列, または単一値"
      }
    ],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "setPower",
    "memberof": "src/basic/S3Material.js~S3Material",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#setPower",
    "access": "public",
    "description": "鏡面反射の強さを設定します。",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "power",
        "description": "鏡面反射係数"
      }
    ],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "setAmbient",
    "memberof": "src/basic/S3Material.js~S3Material",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#setAmbient",
    "access": "public",
    "description": "環境光（アンビエント色）を設定します。",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector",
          "Array<number>",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ambient",
        "description": "S3Vector, 配列, または単一値"
      }
    ],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "setReflect",
    "memberof": "src/basic/S3Material.js~S3Material",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#setReflect",
    "access": "public",
    "description": "環境マッピングの反射率を設定します。",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "reflect",
        "description": "反射率（0～1）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "setTextureColor",
    "memberof": "src/basic/S3Material.js~S3Material",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#setTextureColor",
    "access": "public",
    "description": "拡散色用テクスチャ画像を設定します。",
    "lineNumber": 162,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "画像またはURL等（S3Texture.setImage に渡される形式）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "setTextureNormal",
    "memberof": "src/basic/S3Material.js~S3Material",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Material.js~S3Material#setTextureNormal",
    "access": "public",
    "description": "法線マップ用テクスチャ画像を設定します。",
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "画像またはURL等（S3Texture.setImageに渡される形式）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "src/basic/S3Mesh.js",
    "content": "﻿import S3Vertex from \"./S3Vertex.js\";\nimport S3Material from \"./S3Material.js\";\nimport S3TriangleIndex from \"./S3TriangleIndex.js\";\nimport S3System from \"./S3System.js\";\n\n/**\n * 3DCG用メッシュ（立体形状データ）を管理するクラス (mutable)\n * 頂点・面・マテリアルを保持し、複数の形状や属性を一つにまとめます。\n *\n * @class\n * @module S3\n */\nexport default class S3Mesh {\n\t/**\n\t * メッシュを作成します。\n\t * @param {S3System} s3system S3Systemインスタンス\n\t */\n\tconstructor(s3system) {\n\t\t/**\n\t\t * システムインスタンス\n\t\t * @type {S3System}\n\t\t */\n\t\tthis.sys = s3system;\n\n\t\t/**\n\t\t * 三角形インデックス追加時に面の頂点順序（表裏）を反転するかどうかを指定します。\n\t\t * true の場合は addTriangleIndex() で自動的に面を裏返して追加します。\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.is_inverse = false;\n\n\t\tthis._init();\n\t}\n\n\t/**\n\t * メッシュの内部状態を初期化します。\n\t */\n\t_init() {\n\t\t/**\n\t\t * メッシュの構成要素\n\t\t * @type {{vertex: Array<S3Vertex>, triangleindex: Array<S3TriangleIndex>, material: Array<S3Material>}}\n\t\t */\n\t\tthis.src = {\n\t\t\tvertex: [],\n\t\t\ttriangleindex: [],\n\t\t\tmaterial: []\n\t\t};\n\n\t\t/**\n\t\t * メッシュが確定済みかどうか\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.is_complete = false;\n\t}\n\n\t/**\n\t * データを開放します\n\t * @returns {void}\n\t */\n\tdispose() {\n\t\tthis.src = null;\n\t\tthis.sys = null;\n\t\tthis.is_complete = false;\n\t}\n\n\t/**\n\t * メッシュが確定済みかどうかを返します。\n\t * @returns {boolean} 確定済みならtrue\n\t */\n\tisComplete() {\n\t\treturn this.is_complete;\n\t}\n\n\t/**\n\t * このメッシュのクローン（複製）を作成します。\n\t * @param {typeof S3Mesh} [Instance] 複製時のクラス指定（省略時はS3Mesh）\n\t * @returns {S3Mesh} 複製されたS3Meshインスタンス\n\t */\n\tclone(Instance) {\n\t\tif (!Instance) {\n\t\t\tInstance = S3Mesh;\n\t\t}\n\t\tconst mesh = new Instance(this.sys);\n\t\tmesh.addVertex(this.getVertexArray());\n\t\tmesh.addTriangleIndex(this.getTriangleIndexArray());\n\t\tmesh.addMaterial(this.getMaterialArray());\n\t\treturn mesh;\n\t}\n\n\t/**\n\t * メッシュの確定状態を設定します。\n\t * @param {boolean} is_complete 確定済みかどうか\n\t */\n\tsetComplete(is_complete) {\n\t\tthis.is_complete = is_complete;\n\t}\n\n\t/**\n\t * 三角形インデックスの順序を反転するモードを設定します。\n\t * 反転時はaddTriangleIndexで自動的に面を裏返します。\n\t * @param {boolean} inverse 反転するならtrue\n\t */\n\tsetInverseTriangle(inverse) {\n\t\tthis.setComplete(false);\n\t\tthis.is_inverse = inverse;\n\t}\n\n\t/**\n\t * メッシュが保持する頂点配列を取得します。\n\t * @returns {Array<S3Vertex>} 頂点配列\n\t */\n\tgetVertexArray() {\n\t\treturn this.src.vertex;\n\t}\n\n\t/**\n\t * メッシュが保持する三角形インデックス配列を取得します。\n\t * @returns {Array<S3TriangleIndex>} 三角形インデックス配列\n\t */\n\tgetTriangleIndexArray() {\n\t\treturn this.src.triangleindex;\n\t}\n\n\t/**\n\t * メッシュが保持するマテリアル配列を取得します。\n\t * @returns {Array<S3Material>} マテリアル配列\n\t */\n\tgetMaterialArray() {\n\t\treturn this.src.material;\n\t}\n\n\t/**\n\t * 頂点（S3Vertexまたはその配列）をメッシュに追加します。\n\t * @param {S3Vertex|Array<S3Vertex>} [vertex] 追加する頂点またはその配列\n\t */\n\taddVertex(vertex) {\n\t\t// immutableなのでシャローコピー\n\t\tthis.setComplete(false);\n\t\t// 引数があった場合にのみ処理\n\t\tif (vertex) {\n\t\t\tconst meshvertex = this.getVertexArray();\n\t\t\tif (vertex instanceof S3Vertex) {\n\t\t\t\tmeshvertex[meshvertex.length] = vertex;\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < vertex.length; i++) {\n\t\t\t\t\tmeshvertex[meshvertex.length] = vertex[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 三角形インデックス（S3TriangleIndexまたはその配列）をメッシュに追加します。\n\t * 反転モード時は面を裏返して追加します。\n\t * @param {S3TriangleIndex|Array<S3TriangleIndex>} [ti] 追加する三角形インデックスまたはその配列\n\t */\n\taddTriangleIndex(ti) {\n\t\t// immutableなのでシャローコピー\n\t\tthis.setComplete(false);\n\t\t// 引数がある場合に動作する\n\t\tif (ti !== undefined) {\n\t\t\tconst meshtri = this.getTriangleIndexArray();\n\t\t\tif (ti instanceof S3TriangleIndex) {\n\t\t\t\tmeshtri[meshtri.length] = this.is_inverse ? ti.inverseTriangle() : ti;\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < ti.length; i++) {\n\t\t\t\t\tmeshtri[meshtri.length] = this.is_inverse ? ti[i].inverseTriangle() : ti[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * マテリアル（S3Materialまたはその配列）をメッシュに追加します。\n\t * @param {S3Material|Array<S3Material>} [material] 追加するマテリアルまたはその配列\n\t */\n\taddMaterial(material) {\n\t\t// immutableなのでシャローコピー\n\t\tthis.setComplete(false);\n\t\tconst meshmat = this.getMaterialArray();\n\t\t// 引数が設定されたとき動作する\n\t\tif (material) {\n\t\t\tif (material instanceof S3Material) {\n\t\t\t\tmeshmat[meshmat.length] = material;\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < material.length; i++) {\n\t\t\t\t\tmeshmat[meshmat.length] = material[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/basic/S3Mesh.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "class",
    "name": "S3Mesh",
    "memberof": "src/basic/S3Mesh.js",
    "static": true,
    "longname": "src/basic/S3Mesh.js~S3Mesh",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/basic/S3Mesh.js",
    "importStyle": "S3Mesh",
    "description": "3DCG用メッシュ（立体形状データ）を管理するクラス (mutable)\n頂点・面・マテリアルを保持し、複数の形状や属性を一つにまとめます。",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 155,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#constructor",
    "access": "public",
    "description": "メッシュを作成します。",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3System"
        ],
        "spread": false,
        "optional": false,
        "name": "s3system",
        "description": "S3Systemインスタンス"
      }
    ]
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "sys",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#sys",
    "access": "public",
    "description": "システムインスタンス",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "S3System"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "is_inverse",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#is_inverse",
    "access": "public",
    "description": "三角形インデックス追加時に面の頂点順序（表裏）を反転するかどうかを指定します。\ntrue の場合は addTriangleIndex() で自動的に面を裏返して追加します。",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "_init",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#_init",
    "access": "private",
    "description": "メッシュの内部状態を初期化します。",
    "lineNumber": 38,
    "params": [],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "src",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#src",
    "access": "public",
    "description": "メッシュの構成要素",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "{vertex: Array<S3Vertex>, triangleindex: Array<S3TriangleIndex>, material: Array<S3Material>}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "is_complete",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#is_complete",
    "access": "public",
    "description": "メッシュが確定済みかどうか",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "dispose",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#dispose",
    "access": "public",
    "description": "データを開放します",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "isComplete",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#isComplete",
    "access": "public",
    "description": "メッシュが確定済みかどうかを返します。",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 確定済みならtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "確定済みならtrue"
    },
    "params": []
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "clone",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#clone",
    "access": "public",
    "description": "このメッシュのクローン（複製）を作成します。",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Mesh} 複製されたS3Meshインスタンス"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "typeof S3Mesh"
        ],
        "spread": false,
        "optional": true,
        "name": "Instance",
        "description": "複製時のクラス指定（省略時はS3Mesh）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Mesh"
      ],
      "spread": false,
      "description": "複製されたS3Meshインスタンス"
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "setComplete",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#setComplete",
    "access": "public",
    "description": "メッシュの確定状態を設定します。",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "is_complete",
        "description": "確定済みかどうか"
      }
    ],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "setInverseTriangle",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#setInverseTriangle",
    "access": "public",
    "description": "三角形インデックスの順序を反転するモードを設定します。\n反転時はaddTriangleIndexで自動的に面を裏返します。",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "inverse",
        "description": "反転するならtrue"
      }
    ],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "getVertexArray",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#getVertexArray",
    "access": "public",
    "description": "メッシュが保持する頂点配列を取得します。",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<S3Vertex>} 頂点配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<S3Vertex>"
      ],
      "spread": false,
      "description": "頂点配列"
    },
    "params": []
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "getTriangleIndexArray",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#getTriangleIndexArray",
    "access": "public",
    "description": "メッシュが保持する三角形インデックス配列を取得します。",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<S3TriangleIndex>} 三角形インデックス配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<S3TriangleIndex>"
      ],
      "spread": false,
      "description": "三角形インデックス配列"
    },
    "params": []
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "getMaterialArray",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#getMaterialArray",
    "access": "public",
    "description": "メッシュが保持するマテリアル配列を取得します。",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<S3Material>} マテリアル配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<S3Material>"
      ],
      "spread": false,
      "description": "マテリアル配列"
    },
    "params": []
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "addVertex",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#addVertex",
    "access": "public",
    "description": "頂点（S3Vertexまたはその配列）をメッシュに追加します。",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vertex",
          "Array<S3Vertex>"
        ],
        "spread": false,
        "optional": true,
        "name": "vertex",
        "description": "追加する頂点またはその配列"
      }
    ],
    "return": null
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "addTriangleIndex",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#addTriangleIndex",
    "access": "public",
    "description": "三角形インデックス（S3TriangleIndexまたはその配列）をメッシュに追加します。\n反転モード時は面を裏返して追加します。",
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3TriangleIndex",
          "Array<S3TriangleIndex>"
        ],
        "spread": false,
        "optional": true,
        "name": "ti",
        "description": "追加する三角形インデックスまたはその配列"
      }
    ],
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "addMaterial",
    "memberof": "src/basic/S3Mesh.js~S3Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Mesh.js~S3Mesh#addMaterial",
    "access": "public",
    "description": "マテリアル（S3Materialまたはその配列）をメッシュに追加します。",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Material",
          "Array<S3Material>"
        ],
        "spread": false,
        "optional": true,
        "name": "material",
        "description": "追加するマテリアルまたはその配列"
      }
    ],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "src/basic/S3Model.js",
    "content": "﻿import S3Vector from \"../math/S3Vector.js\";\nimport S3Angles from \"../math/S3Angles.js\";\nimport S3Mesh from \"./S3Mesh.js\";\n\n/**\n * 3DCGシーンに配置する「モデル」を管理するクラス (mutable)\n * 位置・回転・スケール・メッシュ（形状）などモデルの変換・配置情報を保持します。\n *\n * @class\n * @module S3\n */\nexport default class S3Model {\n\t/**\n\t * モデル情報を初期化して作成します。 (mutable)\n\t */\n\tconstructor() {\n\t\tthis._init();\n\t}\n\n\t/**\n\t * モデル各種パラメータを初期化します。\n\t * @private\n\t */\n\t_init() {\n\t\t/**\n\t\t * モデルの回転角（オイラー角）\n\t\t * @type {S3Angles}\n\t\t */\n\t\tthis.angles = new S3Angles();\n\n\t\t/**\n\t\t * モデルの拡大縮小率（スケール）\n\t\t * @type {S3Vector}\n\t\t */\n\t\tthis.scale = new S3Vector(1, 1, 1);\n\n\t\t/**\n\t\t * モデルのワールド座標系での位置\n\t\t * @type {S3Vector}\n\t\t */\n\t\tthis.position = new S3Vector(0, 0, 0);\n\n\t\t/**\n\t\t * モデルが持つメッシュ（形状データ）\n\t\t * @type {S3Mesh}\n\t\t */\n\t\tthis.mesh = null;\n\t}\n\n\t/**\n\t * モデルのメッシュを設定します。\n\t * @param {S3Mesh} mesh 新しいメッシュ\n\t */\n\tsetMesh(mesh) {\n\t\tthis.mesh = mesh;\n\t}\n\n\t/**\n\t * モデルのメッシュを取得します。\n\t * @returns {S3Mesh} 現在のメッシュ\n\t */\n\tgetMesh() {\n\t\treturn this.mesh;\n\t}\n\n\t/**\n\t * モデルのスケール（拡大縮小）を設定します。\n\t * - 1引数の場合、数値なら等倍、S3Vectorならベクトル指定\n\t * - 3引数の場合は(x, y, z)を個別指定\n\t * @param {number|S3Vector} x Xスケール or S3Vector\n\t * @param {number} [y] Yスケール\n\t * @param {number} [z] Zスケール\n\t */\n\tsetScale(x, y, z) {\n\t\tif (arguments.length === 1) {\n\t\t\tif (typeof x === \"number\") {\n\t\t\t\tthis.scale = new S3Vector(x, x, x);\n\t\t\t} else if (x instanceof S3Vector) {\n\t\t\t\tthis.scale = x;\n\t\t\t}\n\t\t} else {\n\t\t\tif (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") {\n\t\t\t\tthis.scale = new S3Vector(x, y, z);\n\t\t\t} else {\n\t\t\t\tthrow new TypeError(\"setScale(x, y, z): All arguments must be numbers.\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * モデルのスケール（拡大縮小率）を取得します。\n\t * @returns {S3Vector} 現在のスケール\n\t */\n\tgetScale() {\n\t\treturn this.scale;\n\t}\n\n\t/**\n\t * モデルのワールド座標系での位置を設定します。\n\t * - S3Vectorでの一括指定、またはx, y, z個別指定\n\t * @param {number|S3Vector} x X座標 or S3Vector\n\t * @param {number} [y] Y座標\n\t * @param {number} [z] Z座標\n\t */\n\tsetPosition(x, y, z) {\n\t\tif (arguments.length === 1 && x instanceof S3Vector) {\n\t\t\tthis.position = x;\n\t\t} else {\n\t\t\tif (typeof x === \"number\" && typeof y === \"number\" && typeof z === \"number\") {\n\t\t\t\tthis.position = new S3Vector(x, y, z);\n\t\t\t} else {\n\t\t\t\tthrow new TypeError(\"setPosition(x, y, z): All arguments must be numbers.\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * モデルのワールド座標系での位置を取得します。\n\t * @returns {S3Vector} 現在の位置\n\t */\n\tgetPosition() {\n\t\treturn this.position;\n\t}\n\n\t/**\n\t * モデルの回転角（オイラー角）を取得します。\n\t * @returns {S3Angles} 現在の回転角\n\t */\n\tgetAngle() {\n\t\treturn this.angles;\n\t}\n\n\t/**\n\t * モデルの回転角（オイラー角）を設定します。\n\t * @param {S3Angles} angles 新しいオイラー角\n\t */\n\tsetAngle(angles) {\n\t\tthis.angles = angles;\n\t}\n\n\t/**\n\t * X軸まわりに回転（相対値）を加えます。\n\t * @param {number} x 加算する角度（度単位）\n\t */\n\taddRotateX(x) {\n\t\tthis.angles = this.angles.addRotateX(x);\n\t}\n\n\t/**\n\t * Y軸まわりに回転（相対値）を加えます。\n\t * @param {number} y 加算する角度（度単位）\n\t */\n\taddRotateY(y) {\n\t\tthis.angles = this.angles.addRotateY(y);\n\t}\n\n\t/**\n\t * Z軸まわりに回転（相対値）を加えます。\n\t * @param {number} z 加算する角度（度単位）\n\t */\n\taddRotateZ(z) {\n\t\tthis.angles = this.angles.addRotateZ(z);\n\t}\n\n\t/**\n\t * X軸まわりの回転角を絶対値で設定します。\n\t * @param {number} x 新しい角度（度単位）\n\t */\n\tsetRotateX(x) {\n\t\tthis.angles = this.angles.setRotateX(x);\n\t}\n\n\t/**\n\t * Y軸まわりの回転角を絶対値で設定します。\n\t * @param {number} y 新しい角度（度単位）\n\t */\n\tsetRotateY(y) {\n\t\tthis.angles = this.angles.setRotateY(y);\n\t}\n\n\t/**\n\t * Z軸まわりの回転角を絶対値で設定します。\n\t * @param {number} z 新しい角度（度単位）\n\t */\n\tsetRotateZ(z) {\n\t\tthis.angles = this.angles.addRotateZ(z);\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/basic/S3Model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "class",
    "name": "S3Model",
    "memberof": "src/basic/S3Model.js",
    "static": true,
    "longname": "src/basic/S3Model.js~S3Model",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/basic/S3Model.js",
    "importStyle": "S3Model",
    "description": "3DCGシーンに配置する「モデル」を管理するクラス (mutable)\n位置・回転・スケール・メッシュ（形状）などモデルの変換・配置情報を保持します。",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 179,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/basic/S3Model.js~S3Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#constructor",
    "access": "public",
    "description": "モデル情報を初期化して作成します。 (mutable)",
    "lineNumber": 16
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "_init",
    "memberof": "src/basic/S3Model.js~S3Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#_init",
    "access": "private",
    "description": "モデル各種パラメータを初期化します。",
    "lineNumber": 24,
    "params": [],
    "return": null
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "angles",
    "memberof": "src/basic/S3Model.js~S3Model",
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#angles",
    "access": "public",
    "description": "モデルの回転角（オイラー角）",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "S3Angles"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "scale",
    "memberof": "src/basic/S3Model.js~S3Model",
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#scale",
    "access": "public",
    "description": "モデルの拡大縮小率（スケール）",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "position",
    "memberof": "src/basic/S3Model.js~S3Model",
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#position",
    "access": "public",
    "description": "モデルのワールド座標系での位置",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "mesh",
    "memberof": "src/basic/S3Model.js~S3Model",
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#mesh",
    "access": "public",
    "description": "モデルが持つメッシュ（形状データ）",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "S3Mesh"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "setMesh",
    "memberof": "src/basic/S3Model.js~S3Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#setMesh",
    "access": "public",
    "description": "モデルのメッシュを設定します。",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Mesh"
        ],
        "spread": false,
        "optional": false,
        "name": "mesh",
        "description": "新しいメッシュ"
      }
    ],
    "return": null
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "getMesh",
    "memberof": "src/basic/S3Model.js~S3Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#getMesh",
    "access": "public",
    "description": "モデルのメッシュを取得します。",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Mesh} 現在のメッシュ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Mesh"
      ],
      "spread": false,
      "description": "現在のメッシュ"
    },
    "params": []
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "setScale",
    "memberof": "src/basic/S3Model.js~S3Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#setScale",
    "access": "public",
    "description": "モデルのスケール（拡大縮小）を設定します。\n- 1引数の場合、数値なら等倍、S3Vectorならベクトル指定\n- 3引数の場合は(x, y, z)を個別指定",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Xスケール or S3Vector"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "y",
        "description": "Yスケール"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "z",
        "description": "Zスケール"
      }
    ],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "getScale",
    "memberof": "src/basic/S3Model.js~S3Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#getScale",
    "access": "public",
    "description": "モデルのスケール（拡大縮小率）を取得します。",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector} 現在のスケール"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": "現在のスケール"
    },
    "params": []
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/basic/S3Model.js~S3Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#setPosition",
    "access": "public",
    "description": "モデルのワールド座標系での位置を設定します。\n- S3Vectorでの一括指定、またはx, y, z個別指定",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X座標 or S3Vector"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "y",
        "description": "Y座標"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "z",
        "description": "Z座標"
      }
    ],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "getPosition",
    "memberof": "src/basic/S3Model.js~S3Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#getPosition",
    "access": "public",
    "description": "モデルのワールド座標系での位置を取得します。",
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector} 現在の位置"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": "現在の位置"
    },
    "params": []
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "getAngle",
    "memberof": "src/basic/S3Model.js~S3Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#getAngle",
    "access": "public",
    "description": "モデルの回転角（オイラー角）を取得します。",
    "lineNumber": 129,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Angles} 現在の回転角"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Angles"
      ],
      "spread": false,
      "description": "現在の回転角"
    },
    "params": []
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "setAngle",
    "memberof": "src/basic/S3Model.js~S3Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#setAngle",
    "access": "public",
    "description": "モデルの回転角（オイラー角）を設定します。",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Angles"
        ],
        "spread": false,
        "optional": false,
        "name": "angles",
        "description": "新しいオイラー角"
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "addRotateX",
    "memberof": "src/basic/S3Model.js~S3Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#addRotateX",
    "access": "public",
    "description": "X軸まわりに回転（相対値）を加えます。",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "加算する角度（度単位）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "addRotateY",
    "memberof": "src/basic/S3Model.js~S3Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#addRotateY",
    "access": "public",
    "description": "Y軸まわりに回転（相対値）を加えます。",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "加算する角度（度単位）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "addRotateZ",
    "memberof": "src/basic/S3Model.js~S3Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#addRotateZ",
    "access": "public",
    "description": "Z軸まわりに回転（相対値）を加えます。",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "加算する角度（度単位）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "setRotateX",
    "memberof": "src/basic/S3Model.js~S3Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#setRotateX",
    "access": "public",
    "description": "X軸まわりの回転角を絶対値で設定します。",
    "lineNumber": 169,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "新しい角度（度単位）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "setRotateY",
    "memberof": "src/basic/S3Model.js~S3Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#setRotateY",
    "access": "public",
    "description": "Y軸まわりの回転角を絶対値で設定します。",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "新しい角度（度単位）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "setRotateZ",
    "memberof": "src/basic/S3Model.js~S3Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Model.js~S3Model#setRotateZ",
    "access": "public",
    "description": "Z軸まわりの回転角を絶対値で設定します。",
    "lineNumber": 185,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "新しい角度（度単位）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "file",
    "name": "src/basic/S3Scene.js",
    "content": "﻿import S3Camera from \"./S3Camera.js\";\nimport S3Model from \"./S3Model.js\";\nimport S3Light from \"./S3Light.js\";\n\n/**\n * 3DCGシーン（描画シーン）の管理クラス\n * モデル・ライト・カメラなどシーン構成要素を一括管理します。\n *\n * @class\n * @module S3\n */\nexport default class S3Scene {\n\t/**\n\t * シーンを作成します。モデル・ライト・カメラを初期化します。\n\t */\n\tconstructor() {\n\t\tthis._init();\n\t}\n\n\t/**\n\t * シーン構成要素を初期化します。\n\t * カメラは新規作成、モデル・ライトは空配列となります。\n\t */\n\t_init() {\n\t\t/**\n\t\t * シーン全体のカメラ\n\t\t * @type {S3Camera}\n\t\t */\n\t\tthis.camera = null;\n\t\t/**\n\t\t * シーン内の3Dモデル配列\n\t\t * @type {Array<S3Model>}\n\t\t */\n\t\tthis.model = [];\n\t\t/**\n\t\t * シーン内のライト配列\n\t\t * @type {Array<S3Light>}\n\t\t */\n\t\tthis.light = [];\n\t}\n\n\t/**\n\t * シーン内のモデル・ライトをすべて削除します（カメラは保持）。\n\t */\n\tempty() {\n\t\tthis.model = [];\n\t\tthis.light = [];\n\t}\n\n\t/**\n\t * シーンのカメラを設定します（ディープコピー）。\n\t * @param {S3Camera} camera 設定するカメラ\n\t */\n\tsetCamera(camera) {\n\t\tthis.camera = camera.clone();\n\t}\n\n\t/**\n\t * シーンにモデルを追加します。\n\t * @param {S3Model} model 追加する3Dモデル（型はS3Model等を想定）\n\t */\n\taddModel(model) {\n\t\tthis.model[this.model.length] = model;\n\t}\n\n\t/**\n\t * シーンにライトを追加します。\n\t * @param {S3Light} light 追加するライト（型はS3Light等を想定）\n\t */\n\taddLight(light) {\n\t\tthis.light[this.light.length] = light;\n\t}\n\n\t/**\n\t * 現在のカメラを取得します。\n\t * @returns {S3Camera} シーンのカメラ\n\t */\n\tgetCamera() {\n\t\treturn this.camera;\n\t}\n\n\t/**\n\t * シーン内の全モデルを取得します。\n\t * @returns {Array<S3Model>} モデル配列\n\t */\n\tgetModels() {\n\t\treturn this.model;\n\t}\n\n\t/**\n\t * シーン内の全ライトを取得します。\n\t * @returns {Array<S3Light>} ライト配列\n\t */\n\tgetLights() {\n\t\treturn this.light;\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/basic/S3Scene.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "class",
    "name": "S3Scene",
    "memberof": "src/basic/S3Scene.js",
    "static": true,
    "longname": "src/basic/S3Scene.js~S3Scene",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/basic/S3Scene.js",
    "importStyle": "S3Scene",
    "description": "3DCGシーン（描画シーン）の管理クラス\nモデル・ライト・カメラなどシーン構成要素を一括管理します。",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 214,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/basic/S3Scene.js~S3Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Scene.js~S3Scene#constructor",
    "access": "public",
    "description": "シーンを作成します。モデル・ライト・カメラを初期化します。",
    "lineNumber": 16
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "_init",
    "memberof": "src/basic/S3Scene.js~S3Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Scene.js~S3Scene#_init",
    "access": "private",
    "description": "シーン構成要素を初期化します。\nカメラは新規作成、モデル・ライトは空配列となります。",
    "lineNumber": 24,
    "params": [],
    "return": null
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "camera",
    "memberof": "src/basic/S3Scene.js~S3Scene",
    "static": false,
    "longname": "src/basic/S3Scene.js~S3Scene#camera",
    "access": "public",
    "description": "シーン全体のカメラ",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "S3Camera"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "model",
    "memberof": "src/basic/S3Scene.js~S3Scene",
    "static": false,
    "longname": "src/basic/S3Scene.js~S3Scene#model",
    "access": "public",
    "description": "シーン内の3Dモデル配列",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Array<S3Model>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "light",
    "memberof": "src/basic/S3Scene.js~S3Scene",
    "static": false,
    "longname": "src/basic/S3Scene.js~S3Scene#light",
    "access": "public",
    "description": "シーン内のライト配列",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Array<S3Light>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "empty",
    "memberof": "src/basic/S3Scene.js~S3Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Scene.js~S3Scene#empty",
    "access": "public",
    "description": "シーン内のモデル・ライトをすべて削除します（カメラは保持）。",
    "lineNumber": 45,
    "params": [],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "setCamera",
    "memberof": "src/basic/S3Scene.js~S3Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Scene.js~S3Scene#setCamera",
    "access": "public",
    "description": "シーンのカメラを設定します（ディープコピー）。",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Camera"
        ],
        "spread": false,
        "optional": false,
        "name": "camera",
        "description": "設定するカメラ"
      }
    ],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "addModel",
    "memberof": "src/basic/S3Scene.js~S3Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Scene.js~S3Scene#addModel",
    "access": "public",
    "description": "シーンにモデルを追加します。",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Model"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": "追加する3Dモデル（型はS3Model等を想定）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "addLight",
    "memberof": "src/basic/S3Scene.js~S3Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Scene.js~S3Scene#addLight",
    "access": "public",
    "description": "シーンにライトを追加します。",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Light"
        ],
        "spread": false,
        "optional": false,
        "name": "light",
        "description": "追加するライト（型はS3Light等を想定）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "getCamera",
    "memberof": "src/basic/S3Scene.js~S3Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Scene.js~S3Scene#getCamera",
    "access": "public",
    "description": "現在のカメラを取得します。",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Camera} シーンのカメラ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Camera"
      ],
      "spread": false,
      "description": "シーンのカメラ"
    },
    "params": []
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "getModels",
    "memberof": "src/basic/S3Scene.js~S3Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Scene.js~S3Scene#getModels",
    "access": "public",
    "description": "シーン内の全モデルを取得します。",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<S3Model>} モデル配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<S3Model>"
      ],
      "spread": false,
      "description": "モデル配列"
    },
    "params": []
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "getLights",
    "memberof": "src/basic/S3Scene.js~S3Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Scene.js~S3Scene#getLights",
    "access": "public",
    "description": "シーン内の全ライトを取得します。",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<S3Light>} ライト配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<S3Light>"
      ],
      "spread": false,
      "description": "ライト配列"
    },
    "params": []
  },
  {
    "__docId__": 229,
    "kind": "file",
    "name": "src/basic/S3System.js",
    "content": "﻿import S3Math from \"../math/S3Math.js\";\nimport S3Vector from \"../math/S3Vector.js\";\nimport S3Matrix from \"../math/S3Matrix.js\";\n\nimport S3Camera from \"./S3Camera.js\";\nimport S3Light from \"./S3Light.js\";\nimport S3Material from \"./S3Material.js\";\nimport S3Mesh from \"./S3Mesh.js\";\nimport S3Model from \"./S3Model.js\";\nimport S3Scene from \"./S3Scene.js\";\nimport S3Texture from \"./S3Texture.js\";\nimport S3TriangleIndex from \"./S3TriangleIndex.js\";\nimport S3Vertex from \"./S3Vertex.js\";\n\n/**\n * /////////////////////////////////////////////////////////\n * 描写に使用するシーンを構成するクラス群\n * 3DCGを作成するための行列を準備したり、シーンの描写をしたりする\n *\n * 3DCGを作るうえで必要最小限の機能を提供する\n * ・それらを構成する頂点、材質、面（全てimmutable）\n * ・モデル (mutable)\n * ・カメラ (mutable)\n * ・シーン (mutable)\n * ・描写用の行列作成\n * ・描写のための必要最低限の計算\n *\n * ポリゴン情報を構成部品\n * S3Vertex\t\t\t頂点\n * S3Material\t\t素材\n * S3TriangleIndex\tインデックス\n * S3Mesh\t\t\t頂点とインデックス情報と素材からなるメッシュ\n *\n * ポリゴンの描写用構成部品\n * S3Model\t\t\tどの座標にどのように表示するかモデル\n * S3Camera\t\t\t映像をどのように映すか\n * S3Scene\t\t\tモデルとカメラを使用してシーン\n * S3Texture\t\tテクスチャ\n * /////////////////////////////////////////////////////////\n */\n\n/**\n * 3DCGシステム全体を管理するクラス\n *\n * 3DCGのための座標変換やシーン管理、基本的な生成処理・ユーティリティ関数などをまとめて提供します。\n * 頂点やメッシュ、マテリアルなど各種オブジェクトのファクトリ機能も持ちます。\n *\n * @class\n * @module S3\n *\n */\nexport default class S3System {\n\t/**\n\t * S3Systemインスタンスを作成します。\n\t * 描画モードや背景色などを初期化します。\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * 現在のシステムモード（OpenGL/DirectX）\n\t\t * @type {number}\n\t\t * @see S3System.SYSTEM_MODE\n\t\t */\n\t\tthis.systemmode = S3System.SYSTEM_MODE.OPEN_GL;\n\n\t\t/**\n\t\t * 深度バッファのモード（OpenGL/DirectX）\n\t\t * @type {number}\n\t\t * @see S3System.DEPTH_MODE\n\t\t */\n\t\tthis.depthmode = S3System.DEPTH_MODE.OPEN_GL;\n\n\t\t/**\n\t\t * 座標系モード（右手系/左手系）\n\t\t * @type {number}\n\t\t * @see S3System.DIMENSION_MODE\n\t\t */\n\t\tthis.dimensionmode = S3System.DIMENSION_MODE.RIGHT_HAND;\n\n\t\t/**\n\t\t * ベクトル型のモード（VECTOR4x1 / VECTOR1x4）\n\t\t * @type {number}\n\t\t * @see S3System.VECTOR_MODE\n\t\t */\n\t\tthis.vectormode = S3System.VECTOR_MODE.VECTOR4x1;\n\n\t\t/**\n\t\t * 前面判定の面の向き（時計回り/反時計回り）\n\t\t * @type {number}\n\t\t * @see S3System.FRONT_FACE\n\t\t */\n\t\tthis.frontface = S3System.FRONT_FACE.COUNTER_CLOCKWISE;\n\n\t\t/**\n\t\t * カリングモード（面の非表示除去方法）\n\t\t * @type {number}\n\t\t * @see S3System.CULL_MODE\n\t\t */\n\t\tthis.cullmode = S3System.CULL_MODE.BACK;\n\n\t\t/**\n\t\t * 背景色（RGBAベクトル）\n\t\t * @type {S3Vector}\n\t\t */\n\t\tthis.backgroundColor = new S3Vector(1.0, 1.0, 1.0, 1.0);\n\n\t\t/**\n\t\t * 描画に使うcanvas要素\n\t\t * @type {HTMLCanvasElement}\n\t\t */\n\t\tthis.canvas = null;\n\n\t\tthis._init();\n\t}\n\n\t/**\n\t * 内部状態を初期化します（描画モードや背景色のリセット）。\n\t * @private\n\t */\n\t_init() {\n\t\tthis.setSystemMode(S3System.SYSTEM_MODE.OPEN_GL);\n\t\tthis.setBackgroundColor(new S3Vector(1.0, 1.0, 1.0, 1.0));\n\t}\n\n\t/**\n\t * ユニークなID文字列を発行します（テクスチャなどの管理用途）。\n\t * @returns {string} 新しいID文字列\n\t */\n\t_createID() {\n\t\tif (!this._CREATE_ID) {\n\t\t\t/**\n\t\t\t * 内部で一意なIDを発行するためのカウンタ配列\n\t\t\t * @type {number[]} [4]\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis._CREATE_ID = [0, 0, 0, 0];\n\t\t}\n\t\tconst id =\n\t\t\tthis._CREATE_ID[3].toString(16) +\n\t\t\t\":\" +\n\t\t\tthis._CREATE_ID[2].toString(16) +\n\t\t\t\":\" +\n\t\t\tthis._CREATE_ID[1].toString(16) +\n\t\t\t\":\" +\n\t\t\tthis._CREATE_ID[0].toString(16);\n\t\tthis._CREATE_ID[0]++;\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tif (this._CREATE_ID[i] === 0x100000000) {\n\t\t\t\tthis._CREATE_ID[i] = 0;\n\t\t\t\tif (i < 3) {\n\t\t\t\t\tthis._CREATE_ID[i + 1]++;\n\t\t\t\t} else {\n\t\t\t\t\t// 全てのカウンタがオーバーフローした場合\n\t\t\t\t\tthrow \"createID\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn id;\n\t}\n\n\t/**\n\t * 画像やテキストファイルをダウンロードします。\n\t * 画像拡張子ならImage要素、それ以外はテキストとして取得しコールバックします。\n\t * @param {string} url 取得先URL\n\t * @param {function} callback 取得完了時に呼ばれるコールバック関数\n\t */\n\t_download(url, callback) {\n\t\tconst dotlist = url.split(\".\");\n\t\tlet isImage = false;\n\t\tconst ext = \"\";\n\t\tif (dotlist.length > 1) {\n\t\t\tconst ext = dotlist[dotlist.length - 1].toLocaleString();\n\t\t\tisImage =\n\t\t\t\text === \"gif\" || ext === \"jpg\" || ext === \"png\" || ext === \"bmp\" || ext === \"svg\" || ext === \"jpeg\";\n\t\t}\n\t\tif (isImage) {\n\t\t\tconst image = new Image();\n\t\t\timage.onload = function () {\n\t\t\t\tcallback(image, ext);\n\t\t\t};\n\t\t\timage.src = url;\n\t\t\treturn;\n\t\t}\n\t\tconst http = new XMLHttpRequest();\n\t\t/**\n\t\t * @returns {void}\n\t\t */\n\t\tconst handleHttpResponse = function () {\n\t\t\tif (http.readyState === 4) {\n\t\t\t\t// DONE\n\t\t\t\tif (http.status !== 200) {\n\t\t\t\t\tconsole.log(\"error download [\" + url + \"]\");\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tcallback(http.responseText, ext);\n\t\t\t}\n\t\t};\n\t\thttp.onreadystatechange = handleHttpResponse;\n\t\thttp.open(\"GET\", url, true);\n\t\thttp.send(null);\n\t}\n\n\t/**\n\t * 任意の値をS3Vectorに変換します。\n\t * @param {S3Vector|Array<number>|number} x 変換対象\n\t * @returns {S3Vector} ベクトル化した値\n\t */\n\t_toVector3(x) {\n\t\tif (x instanceof S3Vector) {\n\t\t\treturn x;\n\t\t} else if (typeof x === \"number\") {\n\t\t\treturn new S3Vector(x, x, x);\n\t\t} else if (x instanceof Array) {\n\t\t\treturn new S3Vector(x[0], x[1], x[2]);\n\t\t} else {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t}\n\n\t/**\n\t * 任意の値を数値に変換します。\n\t * @param {*} x 変換対象\n\t * @returns {number} 数値\n\t */\n\t_toValue(x) {\n\t\tif (!isNaN(x)) {\n\t\t\treturn x;\n\t\t} else {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t}\n\n\t/**\n\t * 背景色を設定します。\n\t * @param {S3Vector} color RGBAで指定する背景色\n\t */\n\tsetBackgroundColor(color) {\n\t\t/**\n\t\t * 背景色（RGBAベクトル）\n\t\t * @type {S3Vector}\n\t\t */\n\t\tthis.backgroundColor = color;\n\t}\n\n\t/**\n\t * 背景色を取得します。\n\t * @returns {S3Vector} 現在の背景色（RGBA）\n\t */\n\tgetBackgroundColor() {\n\t\treturn this.backgroundColor;\n\t}\n\n\t/**\n\t * システムモードを設定します（OpenGL/DIRECT_Xなど）。\n\t * 各種描画パラメータも合わせて設定されます。\n\t * @param {number} mode S3System.SYSTEM_MODE で定義される値\n\t */\n\tsetSystemMode(mode) {\n\t\tthis.systemmode = mode;\n\t\tif (this.systemmode === S3System.SYSTEM_MODE.OPEN_GL) {\n\t\t\tthis.depthmode = S3System.DEPTH_MODE.OPEN_GL;\n\t\t\tthis.dimensionmode = S3System.DIMENSION_MODE.RIGHT_HAND;\n\t\t\tthis.vectormode = S3System.VECTOR_MODE.VECTOR4x1;\n\t\t\tthis.frontface = S3System.FRONT_FACE.COUNTER_CLOCKWISE;\n\t\t\tthis.cullmode = S3System.CULL_MODE.BACK;\n\t\t} else {\n\t\t\tthis.depthmode = S3System.DEPTH_MODE.DIRECT_X;\n\t\t\tthis.dimensionmode = S3System.DIMENSION_MODE.LEFT_HAND;\n\t\t\tthis.vectormode = S3System.VECTOR_MODE.VECTOR1x4;\n\t\t\tthis.frontface = S3System.FRONT_FACE.CLOCKWISE;\n\t\t\tthis.cullmode = S3System.CULL_MODE.BACK;\n\t\t}\n\t}\n\n\t/**\n\t * 深度（Z値の扱い）のモードを設定します。\n\t * @param {number} depthmode S3System.DEPTH_MODE\n\t */\n\tsetDepthMode(depthmode) {\n\t\tthis.depthmode = depthmode;\n\t}\n\n\t/**\n\t * 座標系（右手/左手系）を設定します。\n\t * @param {number} dimensionmode S3System.DIMENSION_MODE\n\t */\n\tsetDimensionMode(dimensionmode) {\n\t\tthis.dimensionmode = dimensionmode;\n\t}\n\n\t/**\n\t * ベクトル表現のモードを設定します（縦型/横型）。\n\t * @param {number} vectormode S3System.VECTOR_MODE\n\t */\n\tsetVectorMode(vectormode) {\n\t\tthis.vectormode = vectormode;\n\t}\n\n\t/**\n\t * 前面と判定する面の頂点順序（時計回り/反時計回り）を設定します。\n\t * @param {number} frontface S3System.FRONT_FACE\n\t */\n\tsetFrontMode(frontface) {\n\t\tthis.frontface = frontface;\n\t}\n\n\t/**\n\t * カリング（非表示面除去）の方法を設定します。\n\t * @param {number} cullmode S3System.CULL_MODE\n\t */\n\tsetCullMode(cullmode) {\n\t\tthis.cullmode = cullmode;\n\t}\n\n\t/**\n\t * 描画に使うCanvasを関連付け、2D描画用Contextを内部にセットします。\n\t * @param {HTMLCanvasElement} canvas 使用するcanvas要素\n\t */\n\tsetCanvas(canvas) {\n\t\tconst that = this;\n\t\tconst ctx = canvas.getContext(\"2d\");\n\t\tthis.canvas = canvas;\n\n\t\t/**\n\t\t * 2D描画用のユーティリティオブジェクト（drawLine, drawLinePolygonなど）\n\t\t * @property {CanvasRenderingContext2D} context 2D描画コンテキスト\n\t\t * @property {function(S3Vector, S3Vector):void} drawLine 2点間の直線を描画\n\t\t * @property {function(S3Vector, S3Vector, S3Vector):void} drawLinePolygon 3点から三角形（線のみ）を描画\n\t\t * @property {function(number):void} setLineWidth 線の太さを設定\n\t\t * @property {function(string):void} setLineColor 線の色を設定\n\t\t * @property {function():void} clear キャンバス全体を背景色で塗りつぶし\n\t\t */\n\t\tthis.context2d = {\n\t\t\tcontext: ctx,\n\n\t\t\t/**\n\t\t\t * 2点間の直線を描画します。\n\t\t\t * @param {S3Vector} v0 始点\n\t\t\t * @param {S3Vector} v1 終点\n\t\t\t */\n\t\t\tdrawLine: function (v0, v1) {\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(v0.x, v0.y);\n\t\t\t\tctx.lineTo(v1.x, v1.y);\n\t\t\t\tctx.stroke();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * 3点で囲む三角形の外枠（線のみ）を描画します。\n\t\t\t * @param {S3Vector} v0\n\t\t\t * @param {S3Vector} v1\n\t\t\t * @param {S3Vector} v2\n\t\t\t */\n\t\t\tdrawLinePolygon: function (v0, v1, v2) {\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(v0.x, v0.y);\n\t\t\t\tctx.lineTo(v1.x, v1.y);\n\t\t\t\tctx.lineTo(v2.x, v2.y);\n\t\t\t\tctx.closePath();\n\t\t\t\tctx.stroke();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * 線の太さを設定します（ピクセル単位）。\n\t\t\t * @param {number} width 線幅\n\t\t\t */\n\t\t\tsetLineWidth: function (width) {\n\t\t\t\tctx.lineWidth = width;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * 線の色を設定します（CSSカラー形式）。\n\t\t\t * @param {string} color 線の色（例: \"rgb(255,0,0)\"）\n\t\t\t */\n\t\t\tsetLineColor: function (color) {\n\t\t\t\tctx.strokeStyle = color;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * キャンバス全体を背景色でクリアします。\n\t\t\t */\n\t\t\tclear: function () {\n\t\t\t\tconst color = that.getBackgroundColor();\n\t\t\t\tctx.clearRect(0, 0, that.canvas.width, that.canvas.height);\n\t\t\t\tctx.fillStyle =\n\t\t\t\t\t\"rgba(\" + color.x * 255 + \",\" + color.y * 255 + \",\" + color.z * 255 + \",\" + color.w + \")\";\n\t\t\t\tctx.fillRect(0, 0, that.canvas.width, that.canvas.height);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * 三角形がカリング対象かどうか判定します。\n\t * @param {S3Vector} p1 頂点1\n\t * @param {S3Vector} p2 頂点2\n\t * @param {S3Vector} p3 頂点3\n\t * @returns {boolean} trueの場合は描画しない\n\t */\n\ttestCull(p1, p2, p3) {\n\t\tif (this.cullmode === S3System.CULL_MODE.NONE) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.cullmode === S3System.CULL_MODE.FRONT_AND_BACK) {\n\t\t\treturn true;\n\t\t}\n\t\tconst isclock = S3Vector.isClockwise(p1, p2, p3);\n\t\tif (isclock === null) {\n\t\t\treturn true;\n\t\t} else if (!isclock) {\n\t\t\tif (this.frontface === S3System.FRONT_FACE.CLOCKWISE) {\n\t\t\t\treturn this.cullmode !== S3System.CULL_MODE.BACK;\n\t\t\t} else {\n\t\t\t\treturn this.cullmode !== S3System.CULL_MODE.FRONT;\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.frontface === S3System.FRONT_FACE.CLOCKWISE) {\n\t\t\t\treturn this.cullmode === S3System.CULL_MODE.BACK;\n\t\t\t} else {\n\t\t\t\treturn this.cullmode === S3System.CULL_MODE.FRONT;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * ビューポート行列を生成します。\n\t * @param {number} x 左上X\n\t * @param {number} y 左上Y\n\t * @param {number} Width 幅\n\t * @param {number} Height 高さ\n\t * @param {number} [MinZ=0.0] 最小深度\n\t * @param {number} [MaxZ=1.0] 最大深度\n\t * @returns {S3Matrix} ビューポート変換行列\n\t */\n\tgetMatrixViewport(x, y, Width, Height, MinZ, MaxZ) {\n\t\tif (MinZ === undefined) {\n\t\t\tMinZ = 0.0;\n\t\t}\n\t\tif (MaxZ === undefined) {\n\t\t\tMaxZ = 1.0;\n\t\t}\n\t\t// M.m11 は、DirectXだとマイナス、OpenGLだとプラスである\n\t\t// 今回は、下がプラスであるcanvasに表示させることを考えて、マイナスにしてある。\n\t\tconst M = new S3Matrix();\n\t\tM.m00 = Width / 2;\n\t\tM.m01 = 0.0;\n\t\tM.m02 = 0.0;\n\t\tM.m03 = 0.0;\n\t\tM.m10 = 0.0;\n\t\tM.m11 = -Height / 2;\n\t\tM.m12 = 0.0;\n\t\tM.m13 = 0.0;\n\t\tM.m20 = 0.0;\n\t\tM.m21 = 0.0;\n\t\tM.m22 = 1.0;\n\t\tM.m23 = 1.0;\n\t\tM.m30 = x + Width / 2;\n\t\tM.m31 = y + Height / 2;\n\t\tM.m32 = 0.0;\n\t\tM.m33 = 1.0;\n\n\t\tif (this.depthmode === S3System.DEPTH_MODE.DIRECT_X) {\n\t\t\tM.m22 = MinZ - MaxZ;\n\t\t\tM.m32 = MinZ;\n\t\t} else if (this.depthmode === S3System.DEPTH_MODE.OPEN_GL) {\n\t\t\tM.m22 = (MinZ - MaxZ) / 2;\n\t\t\tM.m32 = (MinZ + MaxZ) / 2;\n\t\t}\n\t\treturn this.vectormode === S3System.VECTOR_MODE.VECTOR4x1 ? M.transposed() : M;\n\t}\n\n\t/**\n\t * 視体積の上下方向の視野角を求めます。\n\t * @param {number} zoomY\n\t * @returns {number}\n\t */\n\tstatic calcFovY(zoomY) {\n\t\treturn 2.0 * Math.atan(1.0 / zoomY);\n\t}\n\n\t/**\n\t * アスペクト比を計算します。\n\t * @static\n\t * @param {number} width 幅\n\t * @param {number} height 高さ\n\t * @returns {number} アスペクト比\n\t */\n\tstatic calcAspect(width, height) {\n\t\treturn width / height;\n\t}\n\n\t/**\n\t * 視野角（FOVY）から射影行列を生成します。\n\t * @param {number} fovY 視体積の上下方向の視野角（0度から180度）\n\t * @param {number} Aspect 近平面、遠平面のアスペクト比（Width / Height）\n\t * @param {number} Near カメラから近平面までの距離（ニアークリッピング平面）\n\t * @param {number} Far カメラから遠平面までの距離（ファークリッピング平面）\n\t * @returns {S3Matrix} 射影変換行列\n\t */\n\tgetMatrixPerspectiveFov(fovY, Aspect, Near, Far) {\n\t\tconst arc = S3Math.radius(fovY);\n\t\tconst zoomY = 1.0 / Math.tan(arc / 2.0);\n\t\tconst zoomX = zoomY / Aspect;\n\t\tconst M = new S3Matrix();\n\t\tM.m00 = zoomX;\n\t\tM.m01 = 0.0;\n\t\tM.m02 = 0.0;\n\t\tM.m03 = 0.0;\n\t\tM.m10 = 0.0;\n\t\tM.m11 = zoomY;\n\t\tM.m12 = 0.0;\n\t\tM.m13 = 0.0;\n\t\tM.m20 = 0.0;\n\t\tM.m21 = 0.0;\n\t\tM.m22 = 1.0;\n\t\tM.m23 = 1.0;\n\t\tM.m30 = 0.0;\n\t\tM.m31 = 0.0;\n\t\tM.m32 = 0.0;\n\t\tM.m33 = 0.0;\n\t\tconst Delta = Far - Near;\n\t\tif (Near > Far) {\n\t\t\tthrow \"Near > Far error\";\n\t\t} else if (Delta === 0.0) {\n\t\t\tthrow \"divide error\";\n\t\t}\n\t\tif (this.depthmode === S3System.DEPTH_MODE.DIRECT_X) {\n\t\t\tM.m22 = Far / Delta;\n\t\t\tM.m32 = (-Far * Near) / Delta;\n\t\t} else if (this.depthmode === S3System.DEPTH_MODE.OPEN_GL) {\n\t\t\tM.m22 = (Far + Near) / Delta;\n\t\t\tM.m32 = (-2.0 * Far * Near) / Delta;\n\t\t}\n\t\tif (this.dimensionmode === S3System.DIMENSION_MODE.RIGHT_HAND) {\n\t\t\tM.m22 = -M.m22;\n\t\t\tM.m23 = -M.m23;\n\t\t}\n\t\treturn this.vectormode === S3System.VECTOR_MODE.VECTOR4x1 ? M.transposed() : M;\n\t}\n\n\t/**\n\t * カメラのビュー行列を生成します。\n\t * @param {S3Vector} eye カメラの座標の位置ベクトル\n\t * @param {S3Vector} at カメラの注視点の位置ベクトル\n\t * @param {S3Vector} [up] カメラの上への方向ベクトル\n\t * @returns {S3Matrix} ビュー行列\n\t */\n\tgetMatrixLookAt(eye, at, up) {\n\t\tif (up === undefined) {\n\t\t\tup = new S3Vector(0.0, 1.0, 0.0);\n\t\t}\n\t\t// Z ベクトルの作成\n\t\tlet Z = eye.getDirectionNormalized(at);\n\t\tif (this.dimensionmode === S3System.DIMENSION_MODE.RIGHT_HAND) {\n\t\t\t// 右手系なら反転\n\t\t\tZ = Z.negate();\n\t\t}\n\t\t// X, Y ベクトルの作成\n\t\tconst X = up.cross(Z).normalize();\n\t\tconst Y = Z.cross(X);\n\t\tconst M = new S3Matrix();\n\t\tM.m00 = X.x;\n\t\tM.m01 = Y.x;\n\t\tM.m02 = Z.x;\n\t\tM.m03 = 0.0;\n\t\tM.m10 = X.y;\n\t\tM.m11 = Y.y;\n\t\tM.m12 = Z.y;\n\t\tM.m13 = 0.0;\n\t\tM.m20 = X.z;\n\t\tM.m21 = Y.z;\n\t\tM.m22 = Z.z;\n\t\tM.m23 = 0.0;\n\t\tM.m30 = -X.dot(eye);\n\t\tM.m31 = -Y.dot(eye);\n\t\tM.m32 = -Z.dot(eye);\n\t\tM.m33 = 1.0;\n\t\treturn this.vectormode === S3System.VECTOR_MODE.VECTOR4x1 ? M.transposed() : M;\n\t}\n\n\t/**\n\t * 単位行列を生成します。\n\t * @returns {S3Matrix} 単位行列\n\t */\n\tgetMatrixIdentity() {\n\t\tconst M = new S3Matrix();\n\t\tM.m00 = 1.0;\n\t\tM.m01 = 0.0;\n\t\tM.m02 = 0.0;\n\t\tM.m03 = 0.0;\n\t\tM.m10 = 0.0;\n\t\tM.m11 = 1.0;\n\t\tM.m12 = 0.0;\n\t\tM.m13 = 0.0;\n\t\tM.m20 = 0.0;\n\t\tM.m21 = 0.0;\n\t\tM.m22 = 1.0;\n\t\tM.m23 = 0.0;\n\t\tM.m30 = 0.0;\n\t\tM.m31 = 0.0;\n\t\tM.m32 = 0.0;\n\t\tM.m33 = 1.0;\n\t\treturn M;\n\t}\n\n\t/**\n\t * 平行移動行列を生成します。\n\t * @param {number} x X移動量\n\t * @param {number} y Y移動量\n\t * @param {number} z Z移動量\n\t * @returns {S3Matrix} 平行移動行列\n\t */\n\tgetMatrixTranslate(x, y, z) {\n\t\tconst M = new S3Matrix();\n\t\tM.m00 = 1.0;\n\t\tM.m01 = 0.0;\n\t\tM.m02 = 0.0;\n\t\tM.m03 = 0.0;\n\t\tM.m10 = 0.0;\n\t\tM.m11 = 1.0;\n\t\tM.m12 = 0.0;\n\t\tM.m13 = 0.0;\n\t\tM.m20 = 0.0;\n\t\tM.m21 = 0.0;\n\t\tM.m22 = 1.0;\n\t\tM.m23 = 0.0;\n\t\tM.m30 = x;\n\t\tM.m31 = y;\n\t\tM.m32 = z;\n\t\tM.m33 = 1.0;\n\t\treturn this.vectormode === S3System.VECTOR_MODE.VECTOR4x1 ? M.transposed() : M;\n\t}\n\n\t/**\n\t * 拡大縮小行列を生成します。\n\t * @param {number} x X方向スケール\n\t * @param {number} y Y方向スケール\n\t * @param {number} z Z方向スケール\n\t * @returns {S3Matrix} スケーリング行列\n\t */\n\tgetMatrixScale(x, y, z) {\n\t\tconst M = new S3Matrix();\n\t\tM.m00 = x;\n\t\tM.m01 = 0.0;\n\t\tM.m02 = 0.0;\n\t\tM.m03 = 0.0;\n\t\tM.m10 = 0.0;\n\t\tM.m11 = y;\n\t\tM.m12 = 0.0;\n\t\tM.m13 = 0.0;\n\t\tM.m20 = 0.0;\n\t\tM.m21 = 0.0;\n\t\tM.m22 = z;\n\t\tM.m23 = 0.0;\n\t\tM.m30 = 0.0;\n\t\tM.m31 = 0.0;\n\t\tM.m32 = 0.0;\n\t\tM.m33 = 1.0;\n\t\treturn this.vectormode === S3System.VECTOR_MODE.VECTOR4x1 ? M.transposed() : M;\n\t}\n\n\t/**\n\t * X軸周りの回転行列を生成します。\n\t * @param {number} degree 角度（度）\n\t * @returns {S3Matrix} 回転行列\n\t */\n\tgetMatrixRotateX(degree) {\n\t\tconst arc = S3Math.radius(degree);\n\t\tconst cos = Math.cos(arc);\n\t\tconst sin = Math.sin(arc);\n\t\tconst M = new S3Matrix();\n\t\tM.m00 = 1.0;\n\t\tM.m01 = 0.0;\n\t\tM.m02 = 0.0;\n\t\tM.m03 = 0.0;\n\t\tM.m10 = 0.0;\n\t\tM.m11 = cos;\n\t\tM.m12 = sin;\n\t\tM.m13 = 0.0;\n\t\tM.m20 = 0.0;\n\t\tM.m21 = -sin;\n\t\tM.m22 = cos;\n\t\tM.m23 = 0.0;\n\t\tM.m30 = 0.0;\n\t\tM.m31 = 0.0;\n\t\tM.m32 = 0.0;\n\t\tM.m33 = 1.0;\n\t\treturn this.vectormode === S3System.VECTOR_MODE.VECTOR4x1 ? M.transposed() : M;\n\t}\n\n\t/**\n\t * Y軸周りの回転行列を生成します。\n\t * @param {number} degree 角度（度）\n\t * @returns {S3Matrix} 回転行列\n\t */\n\tgetMatrixRotateY(degree) {\n\t\tconst arc = S3Math.radius(degree);\n\t\tconst cos = Math.cos(arc);\n\t\tconst sin = Math.sin(arc);\n\t\tconst M = new S3Matrix();\n\t\tM.m00 = cos;\n\t\tM.m01 = 0.0;\n\t\tM.m02 = -sin;\n\t\tM.m03 = 0.0;\n\t\tM.m10 = 0.0;\n\t\tM.m11 = 1.0;\n\t\tM.m12 = 0.0;\n\t\tM.m13 = 0.0;\n\t\tM.m20 = sin;\n\t\tM.m21 = 0.0;\n\t\tM.m22 = cos;\n\t\tM.m23 = 0.0;\n\t\tM.m30 = 0.0;\n\t\tM.m31 = 0.0;\n\t\tM.m32 = 0.0;\n\t\tM.m33 = 1.0;\n\t\treturn this.vectormode === S3System.VECTOR_MODE.VECTOR4x1 ? M.transposed() : M;\n\t}\n\n\t/**\n\t * Z軸周りの回転行列を生成します。\n\t * @param {number} degree 角度（度）\n\t * @returns {S3Matrix} 回転行列\n\t */\n\tgetMatrixRotateZ(degree) {\n\t\tconst arc = S3Math.radius(degree);\n\t\tconst cos = Math.cos(arc);\n\t\tconst sin = Math.sin(arc);\n\t\tconst M = new S3Matrix();\n\t\tM.m00 = cos;\n\t\tM.m01 = sin;\n\t\tM.m02 = 0.0;\n\t\tM.m03 = 0.0;\n\t\tM.m10 = -sin;\n\t\tM.m11 = cos;\n\t\tM.m12 = 0.0;\n\t\tM.m13 = 0.0;\n\t\tM.m20 = 0.0;\n\t\tM.m21 = 0.0;\n\t\tM.m22 = 1.0;\n\t\tM.m23 = 0.0;\n\t\tM.m30 = 0.0;\n\t\tM.m31 = 0.0;\n\t\tM.m32 = 0.0;\n\t\tM.m33 = 1.0;\n\t\treturn this.vectormode === S3System.VECTOR_MODE.VECTOR4x1 ? M.transposed() : M;\n\t}\n\n\t/**\n\t * 縦型/横型を踏まえて2つの行列を掛けます。\n\t * @param {S3Matrix} A\n\t * @param {S3Matrix} B\n\t * @returns {S3Matrix} 計算結果\n\t */\n\tmulMatrix(A, B) {\n\t\t// 横型の場合は、v[AB]=u\n\t\t// 縦型の場合は、[BA]v=u\n\t\treturn this.vectormode === S3System.VECTOR_MODE.VECTOR4x1 ? B.mulMatrix(A) : A.mulMatrix(B);\n\t}\n\n\t/**\n\t * 縦型/横型を踏まえて行列とベクトルを掛けます。\n\t * @param {S3Matrix} A\n\t * @param {S3Vector} B\n\t * @returns {S3Vector} 計算結果\n\t */\n\tmulVector(A, B) {\n\t\t// 横型の場合は、[vA]=u\n\t\t// 縦型の場合は、[Av]=u\n\t\treturn this.vectormode === S3System.VECTOR_MODE.VECTOR4x1 ? A.mulVector(B) : B.mul(A);\n\t}\n\n\t/**\n\t * 航空機の姿勢制御 ZXY（ロール・ピッチ・ヨー）の順で回転行列を作成します。\n\t * @param {number} z ロール角（Z）\n\t * @param {number} x ピッチ角（X）\n\t * @param {number} y ヨー角（Y）\n\t * @returns {S3Matrix} 合成回転行列\n\t */\n\tgetMatrixRotateZXY(z, x, y) {\n\t\tconst Z = this.getMatrixRotateZ(z);\n\t\tconst X = this.getMatrixRotateX(x);\n\t\tconst Y = this.getMatrixRotateY(y);\n\t\treturn this.mulMatrix(this.mulMatrix(Z, X), Y);\n\t}\n\n\t/**\n\t * 指定モデルのワールド変換行列を生成します（スケール→回転→移動の順）。\n\t * @param {S3Model} model 対象モデル\n\t * @returns {S3Matrix} ワールド変換行列\n\t */\n\tgetMatrixWorldTransform(model) {\n\t\t// 回転行列\n\t\tconst R = this.getMatrixRotateZXY(model.angles.roll, model.angles.pitch, model.angles.yaw);\n\t\t// スケーリング\n\t\tconst S = this.getMatrixScale(model.scale.x, model.scale.y, model.scale.z);\n\t\t// 移動行列\n\t\tconst T = this.getMatrixTranslate(model.position.x, model.position.y, model.position.z);\n\t\t// ワールド変換行列を作成する\n\t\tconst W = this.mulMatrix(this.mulMatrix(S, R), T);\n\t\treturn W;\n\t}\n\n\t/**\n\t * 2Dキャンバスの内容をクリアします。\n\t */\n\tclear() {\n\t\tthis.context2d.clear();\n\t}\n\n\t/**\n\t * 頂点リストをMVP変換・射影して新しい頂点配列を返します。\n\t * @param {Array<S3Vertex>} vertexlist 変換対象の頂点配列\n\t * @param {S3Matrix} MVP モデル・ビュー・射影行列\n\t * @param {S3Matrix} Viewport ビューポート変換行列\n\t * @returns {Array<S3Vertex>} 変換後の頂点配列\n\t */\n\t_calcVertexTransformation(vertexlist, MVP, Viewport) {\n\t\tconst newvertexlist = [];\n\n\t\tfor (let i = 0; i < vertexlist.length; i++) {\n\t\t\tlet p = vertexlist[i].position;\n\n\t\t\t//\tconsole.log(\"1 \" + p);\n\t\t\t//\tconsole.log(\"2 \" + this.mulMatrix(VPS.LookAt, p));\n\t\t\t//\tconsole.log(\"3 \" + this.mulMatrix(VPS.PerspectiveFov, this.mulMatrix(VPS.LookAt, p)));\n\t\t\t//\tconsole.log(\"4 \" + this.mulMatrix(MVP, p));\n\n\t\t\tp = this.mulVector(MVP, p);\n\t\t\tconst rhw = p.w;\n\t\t\tp = p.mul(1.0 / rhw);\n\t\t\tp = this.mulVector(Viewport, p);\n\t\t\tnewvertexlist[i] = new S3Vertex(p);\n\t\t}\n\t\treturn newvertexlist;\n\t}\n\n\t/**\n\t * X, Y, Zの座標軸を描画します（デバッグ用）。\n\t * @param {S3Scene} scene 対象シーン\n\t */\n\tdrawAxis(scene) {\n\t\tconst VPS = scene.getCamera().getVPSMatrix(this.canvas);\n\n\t\tconst vertexvector = [];\n\t\tvertexvector[0] = new S3Vector(0, 0, 0);\n\t\tvertexvector[1] = new S3Vector(10, 0, 0);\n\t\tvertexvector[2] = new S3Vector(0, 10, 0);\n\t\tvertexvector[3] = new S3Vector(0, 0, 10);\n\n\t\tconst newvector = [];\n\t\tconst M = this.mulMatrix(VPS.LookAt, VPS.PerspectiveFov);\n\t\tfor (let i = 0; i < vertexvector.length; i++) {\n\t\t\tlet p = vertexvector[i];\n\t\t\tp = this.mulVector(M, p);\n\t\t\tp = p.mul(1.0 / p.w);\n\t\t\tp = this.mulVector(VPS.Viewport, p);\n\t\t\tnewvector[i] = p;\n\t\t}\n\n\t\tthis.context2d.setLineWidth(3.0);\n\t\tthis.context2d.setLineColor(\"rgb(255, 0, 0)\");\n\t\tthis.context2d.drawLine(newvector[0], newvector[1]);\n\t\tthis.context2d.setLineColor(\"rgb(0, 255, 0)\");\n\t\tthis.context2d.drawLine(newvector[0], newvector[2]);\n\t\tthis.context2d.setLineColor(\"rgb(0, 0, 255)\");\n\t\tthis.context2d.drawLine(newvector[0], newvector[3]);\n\t}\n\n\t/**\n\t * ポリゴン（三角形群）を描画します（ラインで表示）。\n\t * @param {Array<S3Vertex>} vetexlist 頂点配列\n\t * @param {Array<S3TriangleIndex>} triangleindexlist インデックス配列\n\t */\n\t_drawPolygon(vetexlist, triangleindexlist) {\n\t\tfor (let i = 0; i < triangleindexlist.length; i++) {\n\t\t\tconst ti = triangleindexlist[i];\n\t\t\tif (\n\t\t\t\tthis.testCull(\n\t\t\t\t\tvetexlist[ti.index[0]].position,\n\t\t\t\t\tvetexlist[ti.index[1]].position,\n\t\t\t\t\tvetexlist[ti.index[2]].position\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.context2d.drawLinePolygon(\n\t\t\t\tvetexlist[ti.index[0]].position,\n\t\t\t\tvetexlist[ti.index[1]].position,\n\t\t\t\tvetexlist[ti.index[2]].position\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * シーン全体を描画します。\n\t * @param {S3Scene} scene 描画対象のシーン\n\t */\n\tdrawScene(scene) {\n\t\tconst VPS = scene.getCamera().getVPSMatrix(this.canvas);\n\n\t\tthis.context2d.setLineWidth(1.0);\n\t\tthis.context2d.setLineColor(\"rgb(0, 0, 0)\");\n\n\t\tconst models = scene.getModels();\n\t\tfor (let i = 0; i < models.length; i++) {\n\t\t\tconst model = models[i];\n\t\t\tconst mesh = model.getMesh();\n\t\t\tif (mesh.isComplete() === false) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst M = this.getMatrixWorldTransform(model);\n\t\t\tconst MVP = this.mulMatrix(this.mulMatrix(M, VPS.LookAt), VPS.PerspectiveFov);\n\t\t\tconst vlist = this._calcVertexTransformation(mesh.src.vertex, MVP, VPS.Viewport);\n\t\t\tthis._drawPolygon(vlist, mesh.src.triangleindex);\n\t\t}\n\t}\n\n\t/**\n\t * 不要になったリソースを解放します（未実装）。\n\t * @param {Object} obj 解放対象のオブジェクト\n\t * @returns {void}\n\t */\n\t_disposeObject(obj) {}\n\n\t/**\n\t * 新しい頂点インスタンスを生成します。\n\t * @param {S3Vector} position 頂点座標\n\t * @returns {S3Vertex} 生成された頂点\n\t */\n\tcreateVertex(position) {\n\t\treturn new S3Vertex(position);\n\t}\n\n\t/**\n\t * 新しい三角形インデックスインスタンスを生成します。\n\t * @param {number} i1 頂点1のインデックス\n\t * @param {number} i2 頂点2のインデックス\n\t * @param {number} i3 頂点3のインデックス\n\t * @param {Array<number>} indexlist 頂点インデックス配列\n\t * @param {number} [materialIndex] マテリアルインデックス\n\t * @param {Array<S3Vector>} [uvlist] UV座標配列\n\t * @returns {S3TriangleIndex} 生成された三角形インデックス\n\t */\n\tcreateTriangleIndex(i1, i2, i3, indexlist, materialIndex, uvlist) {\n\t\treturn new S3TriangleIndex(i1, i2, i3, indexlist, materialIndex, uvlist);\n\t}\n\n\t/**\n\t * 新しいテクスチャインスタンスを生成します。\n\t * @param {string|ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [name] テクスチャ名や画像データ\n\t * @returns {S3Texture} 生成されたテクスチャ\n\t */\n\tcreateTexture(name) {\n\t\treturn new S3Texture(this, name);\n\t}\n\n\t/**\n\t * 新しいシーンインスタンスを生成します。\n\t * @returns {S3Scene} 生成されたシーン\n\t */\n\tcreateScene() {\n\t\treturn new S3Scene();\n\t}\n\n\t/**\n\t * 新しいモデルインスタンスを生成します。\n\t * @returns {S3Model} 生成されたモデル\n\t */\n\tcreateModel() {\n\t\treturn new S3Model();\n\t}\n\n\t/**\n\t * 新しいメッシュインスタンスを生成します。\n\t * @returns {S3Mesh} 生成されたメッシュ\n\t */\n\tcreateMesh() {\n\t\treturn new S3Mesh(this);\n\t}\n\n\t/**\n\t * 新しいマテリアルインスタンスを生成します。\n\t * @param {string} [name] マテリアル名\n\t * @returns {S3Material} 生成されたマテリアル\n\t */\n\tcreateMaterial(name) {\n\t\treturn new S3Material(this, name);\n\t}\n\n\t/**\n\t * 新しいライトインスタンスを生成します。\n\t * @returns {S3Light} 生成されたライト\n\t */\n\tcreateLight() {\n\t\treturn new S3Light();\n\t}\n\n\t/**\n\t * 新しいカメラインスタンスを生成します。\n\t * @returns {S3Camera} 生成されたカメラ\n\t */\n\tcreateCamera() {\n\t\tconst camera = new S3Camera(this);\n\t\treturn camera;\n\t}\n}\n\n/**\n * システムの描画モードを指定する定数\n *\n * - OPEN_GL: OpenGLに準拠した描画処理・座標変換方式を用います。\n * - DIRECT_X: DirectXに準拠した描画処理・座標変換方式を用います。\n *\n * シーンの座標系や深度バッファの扱いなどにも影響します。\n * @enum {number}\n * @property {number} OPEN_GL   OpenGL準拠（値: 0）\n * @property {number} DIRECT_X  DirectX準拠（値: 1）\n */\nS3System.SYSTEM_MODE = {\n\t/** OpenGL準拠の描画方式（右手系、Zバッファ0～1など） */\n\tOPEN_GL: 0,\n\t/** DirectX準拠の描画方式（左手系、Zバッファ0～1など） */\n\tDIRECT_X: 1\n};\n\nS3System.DEPTH_MODE = {\n\t/**\n\t * Z値の範囲などの依存関係をOpenGL準拠\n\t * @type Number\n\t */\n\tOPEN_GL: 0,\n\t/**\n\t * Z値の範囲などの依存関係をDirecX準拠\n\t * @type Number\n\t */\n\tDIRECT_X: 1\n};\n\nS3System.DIMENSION_MODE = {\n\t/**\n\t * 右手系\n\t * @type Number\n\t */\n\tRIGHT_HAND: 0,\n\t/**\n\t * 左手系\n\t * @type Number\n\t */\n\tLEFT_HAND: 1\n};\n\nS3System.VECTOR_MODE = {\n\t/**\n\t * 値を保持するベクトルを縦ベクトルとみなす\n\t * @type Number\n\t */\n\tVECTOR4x1: 0,\n\t/**\n\t * 値を保持するベクトルを横ベクトルとみなす\n\t * @type Number\n\t */\n\tVECTOR1x4: 1\n};\n\nS3System.FRONT_FACE = {\n\t/**\n\t * 反時計回りを前面とする\n\t * @type Number\n\t */\n\tCOUNTER_CLOCKWISE: 0,\n\n\t/**\n\t * 時計回りを前面とする\n\t * @type Number\n\t */\n\tCLOCKWISE: 1\n};\n\nS3System.CULL_MODE = {\n\t/**\n\t * 常にすべての三角形を描画します。\n\t * @type Number\n\t */\n\tNONE: 0,\n\n\t/**\n\t * 前向きの三角形を描写しません。\n\t * @type Number\n\t */\n\tFRONT: 1,\n\n\t/**\n\t * 後ろ向きの三角形を描写しません。\n\t * @type Number\n\t */\n\tBACK: 2,\n\n\t/**\n\t * 常に描写しない。\n\t * @type Number\n\t */\n\tFRONT_AND_BACK: 3\n};\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/basic/S3System.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 230,
    "kind": "class",
    "name": "S3System",
    "memberof": "src/basic/S3System.js",
    "static": true,
    "longname": "src/basic/S3System.js~S3System",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/basic/S3System.js",
    "importStyle": "S3System",
    "description": "3DCGシステム全体を管理するクラス\n\n3DCGのための座標変換やシーン管理、基本的な生成処理・ユーティリティ関数などをまとめて提供します。\n頂点やメッシュ、マテリアルなど各種オブジェクトのファクトリ機能も持ちます。",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 231,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#constructor",
    "access": "public",
    "description": "S3Systemインスタンスを作成します。\n描画モードや背景色などを初期化します。",
    "lineNumber": 57
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "systemmode",
    "memberof": "src/basic/S3System.js~S3System",
    "static": false,
    "longname": "src/basic/S3System.js~S3System#systemmode",
    "access": "public",
    "description": "現在のシステムモード（OpenGL/DirectX）",
    "see": [
      "S3System.SYSTEM_MODE"
    ],
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "depthmode",
    "memberof": "src/basic/S3System.js~S3System",
    "static": false,
    "longname": "src/basic/S3System.js~S3System#depthmode",
    "access": "public",
    "description": "深度バッファのモード（OpenGL/DirectX）",
    "see": [
      "S3System.DEPTH_MODE"
    ],
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "dimensionmode",
    "memberof": "src/basic/S3System.js~S3System",
    "static": false,
    "longname": "src/basic/S3System.js~S3System#dimensionmode",
    "access": "public",
    "description": "座標系モード（右手系/左手系）",
    "see": [
      "S3System.DIMENSION_MODE"
    ],
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "vectormode",
    "memberof": "src/basic/S3System.js~S3System",
    "static": false,
    "longname": "src/basic/S3System.js~S3System#vectormode",
    "access": "public",
    "description": "ベクトル型のモード（VECTOR4x1 / VECTOR1x4）",
    "see": [
      "S3System.VECTOR_MODE"
    ],
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "frontface",
    "memberof": "src/basic/S3System.js~S3System",
    "static": false,
    "longname": "src/basic/S3System.js~S3System#frontface",
    "access": "public",
    "description": "前面判定の面の向き（時計回り/反時計回り）",
    "see": [
      "S3System.FRONT_FACE"
    ],
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "cullmode",
    "memberof": "src/basic/S3System.js~S3System",
    "static": false,
    "longname": "src/basic/S3System.js~S3System#cullmode",
    "access": "public",
    "description": "カリングモード（面の非表示除去方法）",
    "see": [
      "S3System.CULL_MODE"
    ],
    "lineNumber": 98,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "backgroundColor",
    "memberof": "src/basic/S3System.js~S3System",
    "static": false,
    "longname": "src/basic/S3System.js~S3System#backgroundColor",
    "access": "public",
    "description": "背景色（RGBAベクトル）",
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "canvas",
    "memberof": "src/basic/S3System.js~S3System",
    "static": false,
    "longname": "src/basic/S3System.js~S3System#canvas",
    "access": "public",
    "description": "描画に使うcanvas要素",
    "lineNumber": 110,
    "type": {
      "nullable": null,
      "types": [
        "HTMLCanvasElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "_init",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#_init",
    "access": "private",
    "description": "内部状態を初期化します（描画モードや背景色のリセット）。",
    "lineNumber": 119,
    "params": [],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "_createID",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#_createID",
    "access": "private",
    "description": "ユニークなID文字列を発行します（テクスチャなどの管理用途）。",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 新しいID文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "新しいID文字列"
    },
    "params": []
  },
  {
    "__docId__": 242,
    "kind": "member",
    "name": "_CREATE_ID",
    "memberof": "src/basic/S3System.js~S3System",
    "static": false,
    "longname": "src/basic/S3System.js~S3System#_CREATE_ID",
    "access": "private",
    "description": "内部で一意なIDを発行するためのカウンタ配列",
    "lineNumber": 135,
    "type": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "_download",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#_download",
    "access": "private",
    "description": "画像やテキストファイルをダウンロードします。\n画像拡張子ならImage要素、それ以外はテキストとして取得しコールバックします。",
    "lineNumber": 168,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "取得先URL"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "取得完了時に呼ばれるコールバック関数"
      }
    ],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "_toVector3",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#_toVector3",
    "access": "private",
    "description": "任意の値をS3Vectorに変換します。",
    "lineNumber": 209,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector} ベクトル化した値"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector",
          "Array<number>",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "変換対象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": "ベクトル化した値"
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "_toValue",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#_toValue",
    "access": "private",
    "description": "任意の値を数値に変換します。",
    "lineNumber": 226,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 数値"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "変換対象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "数値"
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "setBackgroundColor",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#setBackgroundColor",
    "access": "public",
    "description": "背景色を設定します。",
    "lineNumber": 238,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "RGBAで指定する背景色"
      }
    ],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "getBackgroundColor",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#getBackgroundColor",
    "access": "public",
    "description": "背景色を取得します。",
    "lineNumber": 250,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector} 現在の背景色（RGBA）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": "現在の背景色（RGBA）"
    },
    "params": []
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "setSystemMode",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#setSystemMode",
    "access": "public",
    "description": "システムモードを設定します（OpenGL/DIRECT_Xなど）。\n各種描画パラメータも合わせて設定されます。",
    "lineNumber": 259,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": "S3System.SYSTEM_MODE で定義される値"
      }
    ],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "setDepthMode",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#setDepthMode",
    "access": "public",
    "description": "深度（Z値の扱い）のモードを設定します。",
    "lineNumber": 280,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "depthmode",
        "description": "S3System.DEPTH_MODE"
      }
    ],
    "return": null
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "setDimensionMode",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#setDimensionMode",
    "access": "public",
    "description": "座標系（右手/左手系）を設定します。",
    "lineNumber": 288,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dimensionmode",
        "description": "S3System.DIMENSION_MODE"
      }
    ],
    "return": null
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "setVectorMode",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#setVectorMode",
    "access": "public",
    "description": "ベクトル表現のモードを設定します（縦型/横型）。",
    "lineNumber": 296,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vectormode",
        "description": "S3System.VECTOR_MODE"
      }
    ],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "setFrontMode",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#setFrontMode",
    "access": "public",
    "description": "前面と判定する面の頂点順序（時計回り/反時計回り）を設定します。",
    "lineNumber": 304,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "frontface",
        "description": "S3System.FRONT_FACE"
      }
    ],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "setCullMode",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#setCullMode",
    "access": "public",
    "description": "カリング（非表示面除去）の方法を設定します。",
    "lineNumber": 312,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cullmode",
        "description": "S3System.CULL_MODE"
      }
    ],
    "return": null
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "setCanvas",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#setCanvas",
    "access": "public",
    "description": "描画に使うCanvasを関連付け、2D描画用Contextを内部にセットします。",
    "lineNumber": 320,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLCanvasElement"
        ],
        "spread": false,
        "optional": false,
        "name": "canvas",
        "description": "使用するcanvas要素"
      }
    ],
    "return": null
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "context2d",
    "memberof": "src/basic/S3System.js~S3System",
    "static": false,
    "longname": "src/basic/S3System.js~S3System#context2d",
    "access": "public",
    "description": "2D描画用のユーティリティオブジェクト（drawLine, drawLinePolygonなど）",
    "lineNumber": 334,
    "properties": [
      {
        "nullable": null,
        "types": [
          "CanvasRenderingContext2D"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "2D描画コンテキスト"
      },
      {
        "nullable": null,
        "types": [
          "function(S3Vector, S3Vector):void"
        ],
        "spread": false,
        "optional": false,
        "name": "drawLine",
        "description": "2点間の直線を描画"
      },
      {
        "nullable": null,
        "types": [
          "function(S3Vector, S3Vector, S3Vector):void"
        ],
        "spread": false,
        "optional": false,
        "name": "drawLinePolygon",
        "description": "3点から三角形（線のみ）を描画"
      },
      {
        "nullable": null,
        "types": [
          "function(number):void"
        ],
        "spread": false,
        "optional": false,
        "name": "setLineWidth",
        "description": "線の太さを設定"
      },
      {
        "nullable": null,
        "types": [
          "function(string):void"
        ],
        "spread": false,
        "optional": false,
        "name": "setLineColor",
        "description": "線の色を設定"
      },
      {
        "nullable": null,
        "types": [
          "function():void"
        ],
        "spread": false,
        "optional": false,
        "name": "clear",
        "description": "キャンバス全体を背景色で塗りつぶし"
      }
    ],
    "type": {
      "types": [
        "{\"context\": *, \"drawLine\": *, \"drawLinePolygon\": *, \"setLineWidth\": *, \"setLineColor\": *, \"clear\": *}"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "testCull",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#testCull",
    "access": "public",
    "description": "三角形がカリング対象かどうか判定します。",
    "lineNumber": 400,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} trueの場合は描画しない"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "p1",
        "description": "頂点1"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "p2",
        "description": "頂点2"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "p3",
        "description": "頂点3"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "trueの場合は描画しない"
    }
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "getMatrixViewport",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#getMatrixViewport",
    "access": "public",
    "description": "ビューポート行列を生成します。",
    "lineNumber": 435,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix} ビューポート変換行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "左上X"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "左上Y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "Width",
        "description": "幅"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "Height",
        "description": "高さ"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "MinZ",
        "description": "最小深度"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "MaxZ",
        "description": "最大深度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix"
      ],
      "spread": false,
      "description": "ビューポート変換行列"
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "calcFovY",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/basic/S3System.js~S3System.calcFovY",
    "access": "public",
    "description": "視体積の上下方向の視野角を求めます。",
    "lineNumber": 477,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "zoomY",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "calcAspect",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/basic/S3System.js~S3System.calcAspect",
    "access": "public",
    "description": "アスペクト比を計算します。",
    "lineNumber": 488,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} アスペクト比"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "幅"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "高さ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "アスペクト比"
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "getMatrixPerspectiveFov",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#getMatrixPerspectiveFov",
    "access": "public",
    "description": "視野角（FOVY）から射影行列を生成します。",
    "lineNumber": 500,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix} 射影変換行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fovY",
        "description": "視体積の上下方向の視野角（0度から180度）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "Aspect",
        "description": "近平面、遠平面のアスペクト比（Width / Height）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "Near",
        "description": "カメラから近平面までの距離（ニアークリッピング平面）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "Far",
        "description": "カメラから遠平面までの距離（ファークリッピング平面）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix"
      ],
      "spread": false,
      "description": "射影変換行列"
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "getMatrixLookAt",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#getMatrixLookAt",
    "access": "public",
    "description": "カメラのビュー行列を生成します。",
    "lineNumber": 548,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix} ビュー行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "eye",
        "description": "カメラの座標の位置ベクトル"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "at",
        "description": "カメラの注視点の位置ベクトル"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": true,
        "name": "up",
        "description": "カメラの上への方向ベクトル"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix"
      ],
      "spread": false,
      "description": "ビュー行列"
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "getMatrixIdentity",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#getMatrixIdentity",
    "access": "public",
    "description": "単位行列を生成します。",
    "lineNumber": 585,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix} 単位行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix"
      ],
      "spread": false,
      "description": "単位行列"
    },
    "params": []
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "getMatrixTranslate",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#getMatrixTranslate",
    "access": "public",
    "description": "平行移動行列を生成します。",
    "lineNumber": 613,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix} 平行移動行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X移動量"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y移動量"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "Z移動量"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix"
      ],
      "spread": false,
      "description": "平行移動行列"
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "getMatrixScale",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#getMatrixScale",
    "access": "public",
    "description": "拡大縮小行列を生成します。",
    "lineNumber": 641,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix} スケーリング行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X方向スケール"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y方向スケール"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "Z方向スケール"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix"
      ],
      "spread": false,
      "description": "スケーリング行列"
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "getMatrixRotateX",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#getMatrixRotateX",
    "access": "public",
    "description": "X軸周りの回転行列を生成します。",
    "lineNumber": 667,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix} 回転行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "degree",
        "description": "角度（度）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix"
      ],
      "spread": false,
      "description": "回転行列"
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "getMatrixRotateY",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#getMatrixRotateY",
    "access": "public",
    "description": "Y軸周りの回転行列を生成します。",
    "lineNumber": 696,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix} 回転行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "degree",
        "description": "角度（度）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix"
      ],
      "spread": false,
      "description": "回転行列"
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "getMatrixRotateZ",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#getMatrixRotateZ",
    "access": "public",
    "description": "Z軸周りの回転行列を生成します。",
    "lineNumber": 725,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix} 回転行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "degree",
        "description": "角度（度）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix"
      ],
      "spread": false,
      "description": "回転行列"
    }
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "mulMatrix",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#mulMatrix",
    "access": "public",
    "description": "縦型/横型を踏まえて2つの行列を掛けます。",
    "lineNumber": 755,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix} 計算結果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "S3Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "B",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix"
      ],
      "spread": false,
      "description": "計算結果"
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "mulVector",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#mulVector",
    "access": "public",
    "description": "縦型/横型を踏まえて行列とベクトルを掛けます。",
    "lineNumber": 767,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector} 計算結果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "B",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": "計算結果"
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "getMatrixRotateZXY",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#getMatrixRotateZXY",
    "access": "public",
    "description": "航空機の姿勢制御 ZXY（ロール・ピッチ・ヨー）の順で回転行列を作成します。",
    "lineNumber": 780,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix} 合成回転行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "ロール角（Z）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "ピッチ角（X）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "ヨー角（Y）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix"
      ],
      "spread": false,
      "description": "合成回転行列"
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "getMatrixWorldTransform",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#getMatrixWorldTransform",
    "access": "public",
    "description": "指定モデルのワールド変換行列を生成します（スケール→回転→移動の順）。",
    "lineNumber": 792,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix} ワールド変換行列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Model"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": "対象モデル"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix"
      ],
      "spread": false,
      "description": "ワールド変換行列"
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "clear",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#clear",
    "access": "public",
    "description": "2Dキャンバスの内容をクリアします。",
    "lineNumber": 807,
    "params": [],
    "return": null
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "_calcVertexTransformation",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#_calcVertexTransformation",
    "access": "private",
    "description": "頂点リストをMVP変換・射影して新しい頂点配列を返します。",
    "lineNumber": 818,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<S3Vertex>} 変換後の頂点配列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<S3Vertex>"
        ],
        "spread": false,
        "optional": false,
        "name": "vertexlist",
        "description": "変換対象の頂点配列"
      },
      {
        "nullable": null,
        "types": [
          "S3Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "MVP",
        "description": "モデル・ビュー・射影行列"
      },
      {
        "nullable": null,
        "types": [
          "S3Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "Viewport",
        "description": "ビューポート変換行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<S3Vertex>"
      ],
      "spread": false,
      "description": "変換後の頂点配列"
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "drawAxis",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#drawAxis",
    "access": "public",
    "description": "X, Y, Zの座標軸を描画します（デバッグ用）。",
    "lineNumber": 842,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "対象シーン"
      }
    ],
    "return": null
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "_drawPolygon",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#_drawPolygon",
    "access": "private",
    "description": "ポリゴン（三角形群）を描画します（ラインで表示）。",
    "lineNumber": 875,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<S3Vertex>"
        ],
        "spread": false,
        "optional": false,
        "name": "vetexlist",
        "description": "頂点配列"
      },
      {
        "nullable": null,
        "types": [
          "Array<S3TriangleIndex>"
        ],
        "spread": false,
        "optional": false,
        "name": "triangleindexlist",
        "description": "インデックス配列"
      }
    ],
    "return": null
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "drawScene",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#drawScene",
    "access": "public",
    "description": "シーン全体を描画します。",
    "lineNumber": 899,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Scene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "描画対象のシーン"
      }
    ],
    "return": null
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "_disposeObject",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#_disposeObject",
    "access": "private",
    "description": "不要になったリソースを解放します（未実装）。",
    "lineNumber": 924,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "解放対象のオブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "createVertex",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#createVertex",
    "access": "public",
    "description": "新しい頂点インスタンスを生成します。",
    "lineNumber": 931,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vertex} 生成された頂点"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "頂点座標"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vertex"
      ],
      "spread": false,
      "description": "生成された頂点"
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "createTriangleIndex",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#createTriangleIndex",
    "access": "public",
    "description": "新しい三角形インデックスインスタンスを生成します。",
    "lineNumber": 945,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3TriangleIndex} 生成された三角形インデックス"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i1",
        "description": "頂点1のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i2",
        "description": "頂点2のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i3",
        "description": "頂点3のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "indexlist",
        "description": "頂点インデックス配列"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "materialIndex",
        "description": "マテリアルインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Array<S3Vector>"
        ],
        "spread": false,
        "optional": true,
        "name": "uvlist",
        "description": "UV座標配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3TriangleIndex"
      ],
      "spread": false,
      "description": "生成された三角形インデックス"
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "createTexture",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#createTexture",
    "access": "public",
    "description": "新しいテクスチャインスタンスを生成します。",
    "lineNumber": 954,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Texture} 生成されたテクスチャ"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "ImageData",
          "HTMLImageElement",
          "HTMLCanvasElement",
          "HTMLVideoElement"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "テクスチャ名や画像データ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Texture"
      ],
      "spread": false,
      "description": "生成されたテクスチャ"
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "createScene",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#createScene",
    "access": "public",
    "description": "新しいシーンインスタンスを生成します。",
    "lineNumber": 962,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Scene} 生成されたシーン"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Scene"
      ],
      "spread": false,
      "description": "生成されたシーン"
    },
    "params": []
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "createModel",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#createModel",
    "access": "public",
    "description": "新しいモデルインスタンスを生成します。",
    "lineNumber": 970,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Model} 生成されたモデル"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Model"
      ],
      "spread": false,
      "description": "生成されたモデル"
    },
    "params": []
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "createMesh",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#createMesh",
    "access": "public",
    "description": "新しいメッシュインスタンスを生成します。",
    "lineNumber": 978,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Mesh} 生成されたメッシュ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Mesh"
      ],
      "spread": false,
      "description": "生成されたメッシュ"
    },
    "params": []
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "createMaterial",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#createMaterial",
    "access": "public",
    "description": "新しいマテリアルインスタンスを生成します。",
    "lineNumber": 987,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Material} 生成されたマテリアル"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "マテリアル名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Material"
      ],
      "spread": false,
      "description": "生成されたマテリアル"
    }
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "createLight",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#createLight",
    "access": "public",
    "description": "新しいライトインスタンスを生成します。",
    "lineNumber": 995,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Light} 生成されたライト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Light"
      ],
      "spread": false,
      "description": "生成されたライト"
    },
    "params": []
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "createCamera",
    "memberof": "src/basic/S3System.js~S3System",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3System.js~S3System#createCamera",
    "access": "public",
    "description": "新しいカメラインスタンスを生成します。",
    "lineNumber": 1003,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Camera} 生成されたカメラ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Camera"
      ],
      "spread": false,
      "description": "生成されたカメラ"
    },
    "params": []
  },
  {
    "__docId__": 305,
    "kind": "file",
    "name": "src/basic/S3Texture.js",
    "content": "﻿import S3System from \"./S3System.js\";\n\n/**\n * 3DCG用のテクスチャ（画像）情報を管理するクラス\n * 画像のセットや2の累乗化処理、ロード状況管理、破棄処理などを担当します。\n *\n * @class\n * @module S3\n */\nexport default class S3Texture {\n\t/**\n\t * テクスチャを作成します。\n\t * @param {S3System} s3system S3Systemインスタンス（画像ID発行・ダウンロード補助用）\n\t * @param {string|ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [data] 初期化時に与える画像やURL等（省略可）\n\t */\n\tconstructor(s3system, data) {\n\t\t/**\n\t\t * システムインスタンス\n\t\t * @type {S3System}\n\t\t */\n\t\tthis.sys = s3system;\n\t\tthis._init();\n\t\tif (data !== undefined) {\n\t\t\tthis.setImage(data);\n\t\t}\n\t}\n\n\t/**\n\t * テクスチャ情報を初期化します。ロードフラグや画像情報をリセットします。\n\t * @protect\n\t */\n\t_init() {\n\t\t/**\n\t\t * テクスチャのURLやID\n\t\t * @type {?string}\n\t\t */\n\t\tthis.url = null;\n\n\t\t/**\n\t\t * テクスチャ画像本体（ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElementなど）\n\t\t * @type {?ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement}\n\t\t */\n\t\tthis.image = null;\n\n\t\t/**\n\t\t * 画像がロード済みかどうか\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.is_loadimage = false;\n\n\t\t/**\n\t\t * テクスチャが破棄されたかどうか\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.is_dispose = false;\n\t}\n\n\t/**\n\t * テクスチャを破棄します。再利用は不可になります。\n\t */\n\tdispose() {\n\t\tif (!this.is_dispose) {\n\t\t\tthis.is_dispose = true;\n\t\t}\n\t}\n\n\t/**\n\t * テクスチャ画像を設定します。\n\t * - 画像が2の累乗でない場合は自動でリサイズします。\n\t * - 文字列の場合はURLとして画像をダウンロードします。\n\t * - 設定可能な形式: ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement, URL(string)\n\t * @param {string|ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image 設定する画像データまたはURL文字列\n\t */\n\tsetImage(image) {\n\t\tif (image === null || this.is_dispose) {\n\t\t\treturn;\n\t\t}\n\t\tif (image instanceof HTMLImageElement || image instanceof HTMLCanvasElement) {\n\t\t\tconst original_width = image.width;\n\t\t\tconst original_height = image.height;\n\t\t\t/**\n\t\t\t * 指定された値以上の最小の2のべき乗の値を返します。\n\t\t\t * 例えば、5を渡すと8を返し、8を渡すと8を返します。\n\t\t\t * Math.log2 が使えない環境（例: IE）でも動作します。\n\t\t\t *\n\t\t\t * @param {number} x - 2のべき乗に切り上げたい対象の数値\n\t\t\t * @returns {number} x以上の最小の2のべき乗の値\n\t\t\t *\n\t\t\t * @example\n\t\t\t * ceil_power_of_2(5); // 8\n\t\t\t * ceil_power_of_2(8); // 8\n\t\t\t * ceil_power_of_2(15); // 16\n\t\t\t */\n\t\t\tconst ceil_power_of_2 = function (x) {\n\t\t\t\t// IE には Math.log2 がない\n\t\t\t\tconst a = Math.log(x) / Math.log(2);\n\t\t\t\tif (a - Math.floor(a) < 1e-10) {\n\t\t\t\t\treturn x;\n\t\t\t\t} else {\n\t\t\t\t\treturn 1 << Math.ceil(a);\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst ceil_width = ceil_power_of_2(original_width);\n\t\t\tconst ceil_height = ceil_power_of_2(original_height);\n\t\t\tif (original_width !== ceil_width || original_height !== ceil_height) {\n\t\t\t\t// 2の累乗ではない場合は、2の累乗のサイズに変換\n\t\t\t\tconst ceil_image = document.createElement(\"canvas\");\n\t\t\t\tceil_image.width = ceil_width;\n\t\t\t\tceil_image.height = ceil_height;\n\t\t\t\tceil_image\n\t\t\t\t\t.getContext(\"2d\")\n\t\t\t\t\t.drawImage(image, 0, 0, original_width, original_height, 0, 0, ceil_width, ceil_height);\n\t\t\t\timage = ceil_image;\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\timage instanceof ImageData ||\n\t\t\timage instanceof HTMLImageElement ||\n\t\t\timage instanceof HTMLCanvasElement ||\n\t\t\timage instanceof HTMLVideoElement\n\t\t) {\n\t\t\tif (this.url === null) {\n\t\t\t\t// 直接設定した場合はIDをURLとして設定する\n\t\t\t\tthis.url = this.sys._createID();\n\t\t\t}\n\t\t\tthis.image = image;\n\t\t\tthis.is_loadimage = true;\n\t\t\treturn;\n\t\t} else if (typeof image === \"string\") {\n\t\t\tthis.url = image;\n\t\t\tconst that = this;\n\t\t\tthis.sys._download(\n\t\t\t\tthis.url,\n\t\t\t\t/**\n\t\t\t\t * @param {ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\tfunction (image) {\n\t\t\t\t\tthat.setImage(image);\n\t\t\t\t}\n\t\t\t);\n\t\t\treturn;\n\t\t} else {\n\t\t\tconsole.log(\"not setImage\");\n\t\t\tconsole.log(image);\n\t\t}\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/basic/S3Texture.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 306,
    "kind": "class",
    "name": "S3Texture",
    "memberof": "src/basic/S3Texture.js",
    "static": true,
    "longname": "src/basic/S3Texture.js~S3Texture",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/basic/S3Texture.js",
    "importStyle": "S3Texture",
    "description": "3DCG用のテクスチャ（画像）情報を管理するクラス\n画像のセットや2の累乗化処理、ロード状況管理、破棄処理などを担当します。",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 307,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/basic/S3Texture.js~S3Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Texture.js~S3Texture#constructor",
    "access": "public",
    "description": "テクスチャを作成します。",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3System"
        ],
        "spread": false,
        "optional": false,
        "name": "s3system",
        "description": "S3Systemインスタンス（画像ID発行・ダウンロード補助用）"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "ImageData",
          "HTMLImageElement",
          "HTMLCanvasElement",
          "HTMLVideoElement"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "初期化時に与える画像やURL等（省略可）"
      }
    ]
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "sys",
    "memberof": "src/basic/S3Texture.js~S3Texture",
    "static": false,
    "longname": "src/basic/S3Texture.js~S3Texture#sys",
    "access": "public",
    "description": "システムインスタンス",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "S3System"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "_init",
    "memberof": "src/basic/S3Texture.js~S3Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Texture.js~S3Texture#_init",
    "access": "private",
    "description": "テクスチャ情報を初期化します。ロードフラグや画像情報をリセットします。",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@protect",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 310,
    "kind": "member",
    "name": "url",
    "memberof": "src/basic/S3Texture.js~S3Texture",
    "static": false,
    "longname": "src/basic/S3Texture.js~S3Texture#url",
    "access": "public",
    "description": "テクスチャのURLやID",
    "lineNumber": 37,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 311,
    "kind": "member",
    "name": "image",
    "memberof": "src/basic/S3Texture.js~S3Texture",
    "static": false,
    "longname": "src/basic/S3Texture.js~S3Texture#image",
    "access": "public",
    "description": "テクスチャ画像本体（ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElementなど）",
    "lineNumber": 43,
    "type": {
      "nullable": true,
      "types": [
        "ImageData",
        "HTMLImageElement",
        "HTMLCanvasElement",
        "HTMLVideoElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 312,
    "kind": "member",
    "name": "is_loadimage",
    "memberof": "src/basic/S3Texture.js~S3Texture",
    "static": false,
    "longname": "src/basic/S3Texture.js~S3Texture#is_loadimage",
    "access": "public",
    "description": "画像がロード済みかどうか",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "is_dispose",
    "memberof": "src/basic/S3Texture.js~S3Texture",
    "static": false,
    "longname": "src/basic/S3Texture.js~S3Texture#is_dispose",
    "access": "public",
    "description": "テクスチャが破棄されたかどうか",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "dispose",
    "memberof": "src/basic/S3Texture.js~S3Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Texture.js~S3Texture#dispose",
    "access": "public",
    "description": "テクスチャを破棄します。再利用は不可になります。",
    "lineNumber": 61,
    "params": [],
    "return": null
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "setImage",
    "memberof": "src/basic/S3Texture.js~S3Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Texture.js~S3Texture#setImage",
    "access": "public",
    "description": "テクスチャ画像を設定します。\n- 画像が2の累乗でない場合は自動でリサイズします。\n- 文字列の場合はURLとして画像をダウンロードします。\n- 設定可能な形式: ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement, URL(string)",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "ImageData",
          "HTMLImageElement",
          "HTMLCanvasElement",
          "HTMLVideoElement"
        ],
        "spread": false,
        "optional": false,
        "name": "image",
        "description": "設定する画像データまたはURL文字列"
      }
    ],
    "return": null
  },
  {
    "__docId__": 321,
    "kind": "file",
    "name": "src/basic/S3TriangleIndex.js",
    "content": "﻿import S3Vector from \"../math/S3Vector.js\";\n\n/**\n * 三角形ポリゴンのインデックス情報を保持するクラス（immutable）\n * 各ポリゴン面を構成する頂点インデックスやUV座標、マテリアルインデックスを管理します。\n *\n * @class\n * @module S3\n */\nexport default class S3TriangleIndex {\n\t/**\n\t * ABCの頂点を囲む三角形ポリゴンを作成します。\n\t * @param {number} i1 配列内の頂点Aのインデックス\n\t * @param {number} i2 配列内の頂点Bのインデックス\n\t * @param {number} i3 配列内の頂点Cのインデックス\n\t * @param {Array<number>} indexlist 頂点インデックス配列\n\t * @param {number} [materialIndex] 使用するマテリアルのインデックス（省略時や負値の場合は0）\n\t * @param {Array<S3Vector>} [uvlist] UV座標配列（S3Vector配列、なくても可）\n\t */\n\tconstructor(i1, i2, i3, indexlist, materialIndex, uvlist) {\n\t\tthis._init(i1, i2, i3, indexlist, materialIndex, uvlist);\n\t}\n\n\t/**\n\t * 三角形ポリゴン情報を初期化します。\n\t * @private\n\t * @param {number} i1 頂点Aのインデックス\n\t * @param {number} i2 頂点Bのインデックス\n\t * @param {number} i3 頂点Cのインデックス\n\t * @param {Array<number>} indexlist 頂点インデックス配列\n\t * @param {number} [materialIndex] マテリアルインデックス\n\t * @param {Array<S3Vector>} [uvlist] UV座標配列\n\t */\n\t_init(i1, i2, i3, indexlist, materialIndex, uvlist) {\n\t\t/**\n\t\t * 頂点インデックス配列（各頂点のインデックスを3つ持つ）\n\t\t * @type {Array<number>}\n\t\t */\n\t\tthis.index = null;\n\n\t\t/**\n\t\t * 各頂点のUV座標配列（3つのS3Vector、またはnull）\n\t\t * @type {Array<S3Vector|null>}\n\t\t */\n\t\tthis.uv = null;\n\t\t/**\n\t\t * 面のマテリアルインデックス（0以上の整数）\n\t\t * @type {number}\n\t\t */\n\t\tthis.materialIndex = null;\n\n\t\tif (indexlist instanceof Array && indexlist.length > 0) {\n\t\t\tthis.index = [indexlist[i1], indexlist[i2], indexlist[i3]];\n\t\t} else {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t\tif (uvlist !== undefined && uvlist instanceof Array && uvlist.length > 0 && uvlist[0] instanceof S3Vector) {\n\t\t\tthis.uv = [uvlist[i1], uvlist[i2], uvlist[i3]];\n\t\t} else {\n\t\t\tthis.uv = [null, null, null];\n\t\t}\n\t\tmaterialIndex = materialIndex ? materialIndex : 0;\n\t\tmaterialIndex = materialIndex >= 0 ? materialIndex : 0;\n\t\tthis.materialIndex = materialIndex;\n\t}\n\n\t/**\n\t * この三角形インデックスのクローンを作成します。\n\t * @param {typeof S3TriangleIndex} [Instance] クローン時のクラス指定（省略時はS3TriangleIndex）\n\t * @returns {S3TriangleIndex} 複製されたインスタンス\n\t */\n\tclone(Instance) {\n\t\tif (!Instance) {\n\t\t\tInstance = S3TriangleIndex;\n\t\t}\n\t\treturn new Instance(0, 1, 2, this.index, this.materialIndex, this.uv);\n\t}\n\n\t/**\n\t * 頂点A/B/Cの順序を逆転させた三角形インデックスを返します。\n\t * 通常カリングモードに応じて表裏を反転させたい場合に利用します。\n\t * @param {typeof S3TriangleIndex} [Instance] 反転時のクラス指定（省略時はS3TriangleIndex）\n\t * @returns {S3TriangleIndex} 反転された三角形インデックス\n\t */\n\tinverseTriangle(Instance) {\n\t\tif (!Instance) {\n\t\t\tInstance = S3TriangleIndex;\n\t\t}\n\t\treturn new Instance(2, 1, 0, this.index, this.materialIndex, this.uv);\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/basic/S3TriangleIndex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 322,
    "kind": "class",
    "name": "S3TriangleIndex",
    "memberof": "src/basic/S3TriangleIndex.js",
    "static": true,
    "longname": "src/basic/S3TriangleIndex.js~S3TriangleIndex",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/basic/S3TriangleIndex.js",
    "importStyle": "S3TriangleIndex",
    "description": "三角形ポリゴンのインデックス情報を保持するクラス（immutable）\n各ポリゴン面を構成する頂点インデックスやUV座標、マテリアルインデックスを管理します。",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 323,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/basic/S3TriangleIndex.js~S3TriangleIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3TriangleIndex.js~S3TriangleIndex#constructor",
    "access": "public",
    "description": "ABCの頂点を囲む三角形ポリゴンを作成します。",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i1",
        "description": "配列内の頂点Aのインデックス"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i2",
        "description": "配列内の頂点Bのインデックス"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i3",
        "description": "配列内の頂点Cのインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "indexlist",
        "description": "頂点インデックス配列"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "materialIndex",
        "description": "使用するマテリアルのインデックス（省略時や負値の場合は0）"
      },
      {
        "nullable": null,
        "types": [
          "Array<S3Vector>"
        ],
        "spread": false,
        "optional": true,
        "name": "uvlist",
        "description": "UV座標配列（S3Vector配列、なくても可）"
      }
    ]
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "_init",
    "memberof": "src/basic/S3TriangleIndex.js~S3TriangleIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3TriangleIndex.js~S3TriangleIndex#_init",
    "access": "private",
    "description": "三角形ポリゴン情報を初期化します。",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i1",
        "description": "頂点Aのインデックス"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i2",
        "description": "頂点Bのインデックス"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i3",
        "description": "頂点Cのインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "indexlist",
        "description": "頂点インデックス配列"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "materialIndex",
        "description": "マテリアルインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Array<S3Vector>"
        ],
        "spread": false,
        "optional": true,
        "name": "uvlist",
        "description": "UV座標配列"
      }
    ],
    "return": null
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "index",
    "memberof": "src/basic/S3TriangleIndex.js~S3TriangleIndex",
    "static": false,
    "longname": "src/basic/S3TriangleIndex.js~S3TriangleIndex#index",
    "access": "public",
    "description": "頂点インデックス配列（各頂点のインデックスを3つ持つ）",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "uv",
    "memberof": "src/basic/S3TriangleIndex.js~S3TriangleIndex",
    "static": false,
    "longname": "src/basic/S3TriangleIndex.js~S3TriangleIndex#uv",
    "access": "public",
    "description": "各頂点のUV座標配列（3つのS3Vector、またはnull）",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Array<S3Vector|null>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 327,
    "kind": "member",
    "name": "materialIndex",
    "memberof": "src/basic/S3TriangleIndex.js~S3TriangleIndex",
    "static": false,
    "longname": "src/basic/S3TriangleIndex.js~S3TriangleIndex#materialIndex",
    "access": "public",
    "description": "面のマテリアルインデックス（0以上の整数）",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "clone",
    "memberof": "src/basic/S3TriangleIndex.js~S3TriangleIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3TriangleIndex.js~S3TriangleIndex#clone",
    "access": "public",
    "description": "この三角形インデックスのクローンを作成します。",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3TriangleIndex} 複製されたインスタンス"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "typeof S3TriangleIndex"
        ],
        "spread": false,
        "optional": true,
        "name": "Instance",
        "description": "クローン時のクラス指定（省略時はS3TriangleIndex）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3TriangleIndex"
      ],
      "spread": false,
      "description": "複製されたインスタンス"
    }
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "inverseTriangle",
    "memberof": "src/basic/S3TriangleIndex.js~S3TriangleIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3TriangleIndex.js~S3TriangleIndex#inverseTriangle",
    "access": "public",
    "description": "頂点A/B/Cの順序を逆転させた三角形インデックスを返します。\n通常カリングモードに応じて表裏を反転させたい場合に利用します。",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3TriangleIndex} 反転された三角形インデックス"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "typeof S3TriangleIndex"
        ],
        "spread": false,
        "optional": true,
        "name": "Instance",
        "description": "反転時のクラス指定（省略時はS3TriangleIndex）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3TriangleIndex"
      ],
      "spread": false,
      "description": "反転された三角形インデックス"
    }
  },
  {
    "__docId__": 334,
    "kind": "file",
    "name": "src/basic/S3Vertex.js",
    "content": "﻿import S3Vector from \"../math/S3Vector.js\";\n\n/**\n * 3DCG用の頂点クラス（immutable）\n * 各頂点の空間上の座標情報を管理するシンプルなクラスです。\n *\n * @class\n * @module S3\n */\nexport default class S3Vertex {\n\t/**\n\t * 頂点を作成します。（immutable）\n\t * @param {S3Vector} position 頂点の座標ベクトル\n\t */\n\tconstructor(position) {\n\t\t/**\n\t\t * 頂点の座標ベクトル\n\t\t * @type {S3Vector}\n\t\t */\n\t\tthis.position = position;\n\t}\n\n\t/**\n\t * 頂点インスタンスのクローン（複製）を作成します。\n\t * @param {typeof S3Vertex} [Instance] 複製する際のクラス指定（省略時はS3Vertex）\n\t * @returns {S3Vertex} 複製されたS3Vertexインスタンス\n\t */\n\tclone(Instance) {\n\t\tif (!Instance) {\n\t\t\tInstance = S3Vertex;\n\t\t}\n\t\treturn new Instance(this.position);\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/basic/S3Vertex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 335,
    "kind": "class",
    "name": "S3Vertex",
    "memberof": "src/basic/S3Vertex.js",
    "static": true,
    "longname": "src/basic/S3Vertex.js~S3Vertex",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/basic/S3Vertex.js",
    "importStyle": "S3Vertex",
    "description": "3DCG用の頂点クラス（immutable）\n各頂点の空間上の座標情報を管理するシンプルなクラスです。",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 336,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/basic/S3Vertex.js~S3Vertex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Vertex.js~S3Vertex#constructor",
    "access": "public",
    "description": "頂点を作成します。（immutable）",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "頂点の座標ベクトル"
      }
    ]
  },
  {
    "__docId__": 337,
    "kind": "member",
    "name": "position",
    "memberof": "src/basic/S3Vertex.js~S3Vertex",
    "static": false,
    "longname": "src/basic/S3Vertex.js~S3Vertex#position",
    "access": "public",
    "description": "頂点の座標ベクトル",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "clone",
    "memberof": "src/basic/S3Vertex.js~S3Vertex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/basic/S3Vertex.js~S3Vertex#clone",
    "access": "public",
    "description": "頂点インスタンスのクローン（複製）を作成します。",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vertex} 複製されたS3Vertexインスタンス"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "typeof S3Vertex"
        ],
        "spread": false,
        "optional": true,
        "name": "Instance",
        "description": "複製する際のクラス指定（省略時はS3Vertex）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vertex"
      ],
      "spread": false,
      "description": "複製されたS3Vertexインスタンス"
    }
  },
  {
    "__docId__": 339,
    "kind": "file",
    "name": "src/gl/S3GLArray.js",
    "content": "﻿import S3Vector from \"../math/S3Vector.js\";\nimport S3Matrix from \"../math/S3Matrix.js\";\n\n/**\n * WebGL用の配列（バッファ）を生成・管理するクラス。（immutable）\n * 各種型（S3Vector, S3Matrix, 数値配列等）をWebGLバッファ（Float32Array/Int32Array）に変換し、\n * 対応するGLSL型（vec3, mat4等）情報も保持します。\n *\n * @class\n * @module S3\n */\nexport default class S3GLArray {\n\t/**\n\t * WebGL用の配列データを作成します（immutable）。\n\t * 渡された値に応じて型変換・整形し、GLSLでそのまま利用可能な形にします。\n\t *\n\t * @param {number[]|number|S3Vector|S3Matrix|Float32Array|Int32Array} data 配列、数値、S3Vector/S3Matrix、あるいは既にTypedArrayの場合も可\n\t * @param {number} dimension 配列の次元（例：3ならvec3やivec3になる）\n\t * @param {S3GLArrayDataType} datatype 使用するバッファ型（S3GLArray.datatype）\n\t */\n\tconstructor(data, dimension, datatype) {\n\t\t// 引数の情報(S3GLArray.datatype.instance)を用いて、\n\t\t// JS用配列を、WEBGL用配列に変換して保存する\n\t\tif (data instanceof datatype.instance) {\n\t\t\t/**\n\t\t\t * 本体データ（TypedArray: Float32Array または Int32Array）\n\t\t\t * @type {Float32Array|Int32Array}\n\t\t\t */\n\t\t\tthis.data = data;\n\t\t} else if (data instanceof S3Vector || data instanceof S3Matrix) {\n\t\t\tthis.data = data.toInstanceArray(datatype.instance, dimension);\n\t\t} else if (data instanceof Array || data instanceof Float32Array || data instanceof Int32Array) {\n\t\t\tthis.data = new datatype.instance(data);\n\t\t} else if (!isNaN(data)) {\n\t\t\tthis.data = new datatype.instance([data]);\n\t\t} else {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\n\t\t/**\n\t\t * 配列の次元（要素数やGLSL型を決定するための値）\n\t\t * 例: 3 → vec3, 16 → mat4\n\t\t * @type {number}\n\t\t */\n\t\tthis.dimension = dimension;\n\n\t\t/**\n\t\t * 配列のデータ型情報（TypedArray種別や型名などを格納したオブジェクト）\n\t\t * @type {S3GLArrayDataType}\n\t\t */\n\t\tthis.datatype = datatype;\n\n\t\tlet instance = \"\";\n\t\tif (data instanceof S3Vector) {\n\t\t\tinstance = \"S3Vector\";\n\t\t} else if (data instanceof S3Matrix) {\n\t\t\tinstance = \"S3Matrix\";\n\t\t} else {\n\t\t\tinstance = \"Number\";\n\t\t}\n\n\t\t// GLSL型（vec3, mat4など）を自動判別し、型名文字列として保存\n\n\t\t/**\n\t\t * GLSLの型名（vec3, mat4, float等）\n\t\t * @type {string}\n\t\t */\n\t\tthis.glsltype = S3GLArray.gltypetable[datatype.name][instance][dimension];\n\t}\n}\n\n/**\n * TypedArrayのコンストラクタ型定義（Int32Array, Float32Array など）。\n * @typedef {(typeof Float32Array | typeof Int32Array)} S3GLTypedArrayConstructor\n */\n\n/**\n * WebGL配列で利用できるデータ型情報（各種TypedArray型）。\n *\n * - instance: 対応するTypedArrayコンストラクタ（例：Float32Array, Int32Array）\n * - name:     型の名前文字列（\"Float32Array\"等）\n *\n * @typedef {Object} S3GLArrayDataType\n * @property {S3GLTypedArrayConstructor} instance 対応するTypedArrayのコンストラクタ\n * @property {string} name 型名（\"Float32Array\"等）\n */\n\n/**\n * WebGLで利用できる配列データ型定数（Float32Array/Int32Array）。\n * @type {{ Float32Array: S3GLArrayDataType, Int32Array: S3GLArrayDataType }}\n */\nS3GLArray.datatype = {\n\tFloat32Array: {\n\t\tinstance: Float32Array,\n\t\tname: \"Float32Array\"\n\t},\n\tInt32Array: {\n\t\tinstance: Int32Array,\n\t\tname: \"Int32Array\"\n\t}\n};\n\n/**\n * GLSL型名（\"vec3\"や\"mat4\"など）を配列次元や入力種別から自動判定するためのテーブル構造。\n *\n * - 第一階層キー：データ型名（\"Float32Array\" または \"Int32Array\"）\n * - 第二階層キー：値種別（\"Number\", \"S3Vector\", \"S3Matrix\"）\n * - 第三階層キー：配列次元や要素数（2, 3, 4, 9, 16など）\n * - 値：対応するGLSL型名（\"vec3\"等）を表す文字列\n *\n * 例）gltypetable[\"Float32Array\"][\"S3Matrix\"][16] === \"mat4\"\n *\n * @typedef {Object<string, Object<string, Object<number, string>>>} S3GLArrayGLTypeTable\n */\n\n/**\n * GLSL型判定用テーブル。\n * 値の型により適切なGLSL型名（vec3, mat4等）を自動で取得できます。\n *\n * @type {S3GLArrayGLTypeTable}\n */\nS3GLArray.gltypetable = {\n\tFloat32Array: {\n\t\tNumber: {\n\t\t\t1: \"float\",\n\t\t\t2: \"vec2\",\n\t\t\t3: \"vec3\",\n\t\t\t4: \"vec4\"\n\t\t},\n\t\tS3Vector: {\n\t\t\t2: \"vec2\",\n\t\t\t3: \"vec3\",\n\t\t\t4: \"vec4\"\n\t\t},\n\t\tS3Matrix: {\n\t\t\t4: \"mat2\",\n\t\t\t9: \"mat3\",\n\t\t\t16: \"mat4\"\n\t\t}\n\t},\n\tInt32Array: {\n\t\tNumber: {\n\t\t\t1: \"int\",\n\t\t\t2: \"ivec2\",\n\t\t\t3: \"ivec3\",\n\t\t\t4: \"ivec4\"\n\t\t},\n\t\tS3Vector: {\n\t\t\t2: \"ivec2\",\n\t\t\t3: \"ivec3\",\n\t\t\t4: \"ivec4\"\n\t\t}\n\t}\n};\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/gl/S3GLArray.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 340,
    "kind": "class",
    "name": "S3GLArray",
    "memberof": "src/gl/S3GLArray.js",
    "static": true,
    "longname": "src/gl/S3GLArray.js~S3GLArray",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/gl/S3GLArray.js",
    "importStyle": "S3GLArray",
    "description": "WebGL用の配列（バッファ）を生成・管理するクラス。（immutable）\n各種型（S3Vector, S3Matrix, 数値配列等）をWebGLバッファ（Float32Array/Int32Array）に変換し、\n対応するGLSL型（vec3, mat4等）情報も保持します。",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 341,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/gl/S3GLArray.js~S3GLArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLArray.js~S3GLArray#constructor",
    "access": "public",
    "description": "WebGL用の配列データを作成します（immutable）。\n渡された値に応じて型変換・整形し、GLSLでそのまま利用可能な形にします。",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "number",
          "S3Vector",
          "S3Matrix",
          "Float32Array",
          "Int32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "配列、数値、S3Vector/S3Matrix、あるいは既にTypedArrayの場合も可"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "配列の次元（例：3ならvec3やivec3になる）"
      },
      {
        "nullable": null,
        "types": [
          "S3GLArrayDataType"
        ],
        "spread": false,
        "optional": false,
        "name": "datatype",
        "description": "使用するバッファ型（S3GLArray.datatype）"
      }
    ]
  },
  {
    "__docId__": 342,
    "kind": "member",
    "name": "data",
    "memberof": "src/gl/S3GLArray.js~S3GLArray",
    "static": false,
    "longname": "src/gl/S3GLArray.js~S3GLArray#data",
    "access": "public",
    "description": "本体データ（TypedArray: Float32Array または Int32Array）",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Float32Array",
        "Int32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 346,
    "kind": "member",
    "name": "dimension",
    "memberof": "src/gl/S3GLArray.js~S3GLArray",
    "static": false,
    "longname": "src/gl/S3GLArray.js~S3GLArray#dimension",
    "access": "public",
    "description": "配列の次元（要素数やGLSL型を決定するための値）\n例: 3 → vec3, 16 → mat4",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 347,
    "kind": "member",
    "name": "datatype",
    "memberof": "src/gl/S3GLArray.js~S3GLArray",
    "static": false,
    "longname": "src/gl/S3GLArray.js~S3GLArray#datatype",
    "access": "public",
    "description": "配列のデータ型情報（TypedArray種別や型名などを格納したオブジェクト）",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "S3GLArrayDataType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 348,
    "kind": "member",
    "name": "glsltype",
    "memberof": "src/gl/S3GLArray.js~S3GLArray",
    "static": false,
    "longname": "src/gl/S3GLArray.js~S3GLArray#glsltype",
    "access": "public",
    "description": "GLSLの型名（vec3, mat4, float等）",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 349,
    "kind": "typedef",
    "name": "S3GLTypedArrayConstructor",
    "memberof": "src/gl/S3GLArray.js",
    "static": true,
    "longname": "src/gl/S3GLArray.js~S3GLTypedArrayConstructor",
    "access": "public",
    "description": "TypedArrayのコンストラクタ型定義（Int32Array, Float32Array など）。",
    "type": {
      "types": [
        "typeof Float32Array ",
        " typeof Int32Array"
      ],
      "optional": false,
      "name": "S3GLTypedArrayConstructor"
    }
  },
  {
    "__docId__": 350,
    "kind": "typedef",
    "name": "S3GLArrayDataType",
    "memberof": "src/gl/S3GLArray.js",
    "static": true,
    "longname": "src/gl/S3GLArray.js~S3GLArrayDataType",
    "access": "public",
    "description": "WebGL配列で利用できるデータ型情報（各種TypedArray型）。\n\n- instance: 対応するTypedArrayコンストラクタ（例：Float32Array, Int32Array）\n- name:     型の名前文字列（\"Float32Array\"等）",
    "properties": [
      {
        "nullable": null,
        "types": [
          "S3GLTypedArrayConstructor"
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": "対応するTypedArrayのコンストラクタ"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "型名（\"Float32Array\"等）"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3GLArrayDataType"
    }
  },
  {
    "__docId__": 351,
    "kind": "typedef",
    "name": "S3GLArrayGLTypeTable",
    "memberof": "src/gl/S3GLArray.js",
    "static": true,
    "longname": "src/gl/S3GLArray.js~S3GLArrayGLTypeTable",
    "access": "public",
    "description": "GLSL型名（\"vec3\"や\"mat4\"など）を配列次元や入力種別から自動判定するためのテーブル構造。\n\n- 第一階層キー：データ型名（\"Float32Array\" または \"Int32Array\"）\n- 第二階層キー：値種別（\"Number\", \"S3Vector\", \"S3Matrix\"）\n- 第三階層キー：配列次元や要素数（2, 3, 4, 9, 16など）\n- 値：対応するGLSL型名（\"vec3\"等）を表す文字列\n\n例）gltypetable[\"Float32Array\"][\"S3Matrix\"][16] === \"mat4\"",
    "type": {
      "types": [
        "Object<string, Object<string, Object<number, string>>>"
      ],
      "optional": false,
      "name": "S3GLArrayGLTypeTable"
    }
  },
  {
    "__docId__": 352,
    "kind": "file",
    "name": "src/gl/S3GLLight.js",
    "content": "﻿import S3Vector from \"../math/S3Vector.js\";\nimport S3Light from \"../basic/S3Light.js\";\nimport S3GLArray from \"./S3GLArray.js\";\n\n/**\n * WebGLレンダリング用のライト（照明）クラス。\n * 基本のS3Lightを拡張し、GL用データ生成や一意ハッシュ生成などのメソッドを提供します。\n *\n * @class\n * @extends S3Light\n * @module S3\n */\nexport default class S3GLLight extends S3Light {\n\t/**\n\t * ライト情報のインスタンスを作成します。\n\t * 各種パラメータはS3Lightのデフォルト値がセットされます。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * このライトのクローン（複製）を作成します。\n\t * すべてのプロパティがコピーされたS3GLLightインスタンスを返します。\n\t * @returns {S3GLLight} 複製されたインスタンス\n\t */\n\tclone() {\n\t\t// @ts-ignore\n\t\treturn super.clone(S3GLLight);\n\t}\n\n\t/**\n\t * ライトのGL用一意ハッシュ文字列を返します。\n\t * 各種パラメータ（モード・パワー・レンジ・位置・方向・色）をもとに生成されます。\n\t * @returns {string} ライトの一意な識別用ハッシュ\n\t */\n\tgetGLHash() {\n\t\treturn (\n\t\t\t\"\" +\n\t\t\tthis.mode +\n\t\t\tthis.power +\n\t\t\tthis.range +\n\t\t\tthis.position.toString(3) +\n\t\t\tthis.direction.toString(3) +\n\t\t\tthis.color.toString(3)\n\t\t);\n\t}\n\n\t/**\n\t * @typedef {Object} S3GLLightGLData\n\t * @property {S3GLArray} lightsData1 モード・レンジ・方向or位置 (vec4)\n\t * @property {S3GLArray} lightsData2 方向or位置Z成分＋カラー情報 (vec4)\n\t */\n\n\t/**\n\t * ライト情報をWebGL用に変換し、GLSLのuniform用データ形式で返します。\n\t * 面光源/点光源で内容（direction or position）が切り替わります。\n\t * 各種値はS3GLArrayでラップされ、シェーダ変数名（例: lightsData1, lightsData2）に対応しています。\n\t * @returns {S3GLLightGLData} GL用のライトデータ\n\t */\n\tgetGLData() {\n\t\tconst lightsColor = this.color.mul(this.power);\n\t\tlet lightsVector = new S3Vector(0, 0, 0);\n\t\t// uniform 節約のためにライト用のベクトルは用途によって入れる値を変更する\n\t\tif (this.mode === S3Light.MODE.DIRECTIONAL_LIGHT) {\n\t\t\tlightsVector = this.direction;\n\t\t} else if (this.mode === S3Light.MODE.POINT_LIGHT) {\n\t\t\tlightsVector = this.position;\n\t\t}\n\t\t// uniform 節約のために最終的に渡すデータをまとめる\n\t\treturn {\n\t\t\tlightsData1: new S3GLArray(\n\t\t\t\t[this.mode, this.range, lightsVector.x, lightsVector.y],\n\t\t\t\t4,\n\t\t\t\tS3GLArray.datatype.Float32Array\n\t\t\t),\n\t\t\tlightsData2: new S3GLArray(\n\t\t\t\t[lightsVector.z, lightsColor.x, lightsColor.y, lightsColor.z],\n\t\t\t\t4,\n\t\t\t\tS3GLArray.datatype.Float32Array\n\t\t\t)\n\t\t};\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/gl/S3GLLight.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 353,
    "kind": "class",
    "name": "S3GLLight",
    "memberof": "src/gl/S3GLLight.js",
    "static": true,
    "longname": "src/gl/S3GLLight.js~S3GLLight",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/gl/S3GLLight.js",
    "importStyle": "S3GLLight",
    "description": "WebGLレンダリング用のライト（照明）クラス。\n基本のS3Lightを拡張し、GL用データ生成や一意ハッシュ生成などのメソッドを提供します。",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 354,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/gl/S3GLLight.js~S3GLLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLLight.js~S3GLLight#constructor",
    "access": "public",
    "description": "ライト情報のインスタンスを作成します。\n各種パラメータはS3Lightのデフォルト値がセットされます。",
    "lineNumber": 18
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "clone",
    "memberof": "src/gl/S3GLLight.js~S3GLLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLLight.js~S3GLLight#clone",
    "access": "public",
    "description": "このライトのクローン（複製）を作成します。\nすべてのプロパティがコピーされたS3GLLightインスタンスを返します。",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLLight} 複製されたインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLLight"
      ],
      "spread": false,
      "description": "複製されたインスタンス"
    },
    "params": []
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "getGLHash",
    "memberof": "src/gl/S3GLLight.js~S3GLLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLLight.js~S3GLLight#getGLHash",
    "access": "public",
    "description": "ライトのGL用一意ハッシュ文字列を返します。\n各種パラメータ（モード・パワー・レンジ・位置・方向・色）をもとに生成されます。",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} ライトの一意な識別用ハッシュ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "ライトの一意な識別用ハッシュ"
    },
    "params": []
  },
  {
    "__docId__": 357,
    "kind": "typedef",
    "name": "S3GLLightGLData",
    "memberof": "src/gl/S3GLLight.js~S3GLLight",
    "static": true,
    "longname": "src/gl/S3GLLight.js~S3GLLight.S3GLLightGLData",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "S3GLArray"
        ],
        "spread": false,
        "optional": false,
        "name": "lightsData1",
        "description": "モード・レンジ・方向or位置 (vec4)"
      },
      {
        "nullable": null,
        "types": [
          "S3GLArray"
        ],
        "spread": false,
        "optional": false,
        "name": "lightsData2",
        "description": "方向or位置Z成分＋カラー情報 (vec4)"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3GLLightGLData"
    }
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "getGLData",
    "memberof": "src/gl/S3GLLight.js~S3GLLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLLight.js~S3GLLight#getGLData",
    "access": "public",
    "description": "ライト情報をWebGL用に変換し、GLSLのuniform用データ形式で返します。\n面光源/点光源で内容（direction or position）が切り替わります。\n各種値はS3GLArrayでラップされ、シェーダ変数名（例: lightsData1, lightsData2）に対応しています。",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLLightGLData} GL用のライトデータ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLLightGLData"
      ],
      "spread": false,
      "description": "GL用のライトデータ"
    },
    "params": []
  },
  {
    "__docId__": 359,
    "kind": "file",
    "name": "src/gl/S3GLMaterial.js",
    "content": "﻿import S3Material from \"../basic/S3Material.js\";\nimport S3GLSystem from \"./S3GLSystem.js\";\nimport S3GLArray from \"./S3GLArray.js\";\nimport S3GLTexture from \"./S3GLTexture.js\";\n\n/**\n * WebGL描画用のマテリアル（材質）クラス。\n * 基本のS3Materialを拡張し、GL用データ生成・ハッシュ管理などWebGL用途向けの機能を追加します。\n * 色、拡散/反射/発光/環境光、テクスチャ情報などを保持し、GLSLシェーダへのuniformデータ化を担います。\n *\n * @class\n * @extends S3Material\n * @module S3\n */\nexport default class S3GLMaterial extends S3Material {\n\t/**\n\t * マテリアル情報を初期化します。\n\t * @param {S3GLSystem} s3glsystem GL用システムインスタンス（テクスチャ生成等に必要）\n\t * @param {string} name マテリアル名（一意識別のためGLハッシュにも使用）\n\t */\n\tconstructor(s3glsystem, name) {\n\t\t// @ts-ignore\n\t\tsuper(s3glsystem, name);\n\n\t\t/**\n\t\t * S3GLSystem アクセス用\n\t\t * @type {S3GLSystem}\n\t\t */\n\t\tthis._s3gl = s3glsystem;\n\t}\n\n\t/**\n\t * このマテリアルの一意なハッシュ文字列を取得します。\n\t * 通常はマテリアル名がそのままハッシュ値になります。\n\t * @returns {string} マテリアルの識別用ハッシュ値（名前）\n\t */\n\tgetGLHash() {\n\t\t// 名前は被らないので、ハッシュに使用する\n\t\treturn this.name;\n\t}\n\n\t/**\n\t * 頂点データを作成して取得する\n\t * 頂点データ内に含まれるデータは、S3GLArray型となる。\n\t * なお、ここでつけているメンバの名前は、そのままバーテックスシェーダで使用する変数名となる\n\t * uniform の数がハードウェア上限られているため、送る情報は選定すること\n\t *\n\t *   - materialsColorAndDiffuse: 色(RGB)+拡散率（vec4/Float32Array）\n\t *   - materialsSpecularAndPower: 鏡面色(RGB)+光沢度（vec4/Float32Array）\n\t *   - materialsEmission: 発光色（vec3/Float32Array）\n\t *   - materialsAmbientAndReflect: 環境光(RGB)+反射率（vec4/Float32Array）\n\t *   - materialsTextureExist: テクスチャ有無フラグ（[color有:1/0, normal有:1/0]）\n\t *   - materialsTextureColor: カラーテクスチャのGLオブジェクト\n\t *   - materialsTextureNormal: 法線テクスチャのGLオブジェクト\n\t *\n\t * @returns {{[key: string]: S3GLArray | WebGLTexture }}\n\t */\n\tgetGLData() {\n\t\t/**\n\t\t * @type {S3GLTexture}\n\t\t */\n\t\tconst textureColorGl = /** @type {S3GLTexture} */ (this.textureColor);\n\n\t\t/**\n\t\t * @type {S3GLTexture}\n\t\t */\n\t\tconst textureNormalGl = /** @type {S3GLTexture} */ (this.textureNormal);\n\n\t\t// テクスチャを取得\n\t\tlet tex_color = textureColorGl.getGLData();\n\t\tlet tex_normal = textureNormalGl.getGLData();\n\t\t// テクスチャのありなしフラグを作成。ない場合はダミーデータを入れる。\n\t\tconst tex_exist = [tex_color === null ? 0 : 1, tex_normal === null ? 0 : 1];\n\t\ttex_color = tex_color === null ? this._s3gl._getDummyTexture() : tex_color;\n\t\ttex_normal = tex_normal === null ? this._s3gl._getDummyTexture() : tex_normal;\n\t\treturn {\n\t\t\tmaterialsColorAndDiffuse: new S3GLArray(\n\t\t\t\t[this.color.x, this.color.y, this.color.z, this.diffuse],\n\t\t\t\t4,\n\t\t\t\tS3GLArray.datatype.Float32Array\n\t\t\t),\n\t\t\tmaterialsSpecularAndPower: new S3GLArray(\n\t\t\t\t[this.specular.x, this.specular.y, this.specular.z, this.power],\n\t\t\t\t4,\n\t\t\t\tS3GLArray.datatype.Float32Array\n\t\t\t),\n\t\t\tmaterialsEmission: new S3GLArray(this.emission, 3, S3GLArray.datatype.Float32Array),\n\t\t\tmaterialsAmbientAndReflect: new S3GLArray(\n\t\t\t\t[this.ambient.x, this.ambient.y, this.ambient.z, this.reflect],\n\t\t\t\t4,\n\t\t\t\tS3GLArray.datatype.Float32Array\n\t\t\t),\n\t\t\tmaterialsTextureExist: new S3GLArray(tex_exist, 2, S3GLArray.datatype.Float32Array),\n\t\t\tmaterialsTextureColor: tex_color,\n\t\t\tmaterialsTextureNormal: tex_normal\n\t\t};\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/gl/S3GLMaterial.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 360,
    "kind": "class",
    "name": "S3GLMaterial",
    "memberof": "src/gl/S3GLMaterial.js",
    "static": true,
    "longname": "src/gl/S3GLMaterial.js~S3GLMaterial",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/gl/S3GLMaterial.js",
    "importStyle": "S3GLMaterial",
    "description": "WebGL描画用のマテリアル（材質）クラス。\n基本のS3Materialを拡張し、GL用データ生成・ハッシュ管理などWebGL用途向けの機能を追加します。\n色、拡散/反射/発光/環境光、テクスチャ情報などを保持し、GLSLシェーダへのuniformデータ化を担います。",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 361,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/gl/S3GLMaterial.js~S3GLMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMaterial.js~S3GLMaterial#constructor",
    "access": "public",
    "description": "マテリアル情報を初期化します。",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3GLSystem"
        ],
        "spread": false,
        "optional": false,
        "name": "s3glsystem",
        "description": "GL用システムインスタンス（テクスチャ生成等に必要）"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "マテリアル名（一意識別のためGLハッシュにも使用）"
      }
    ]
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "_s3gl",
    "memberof": "src/gl/S3GLMaterial.js~S3GLMaterial",
    "static": false,
    "longname": "src/gl/S3GLMaterial.js~S3GLMaterial#_s3gl",
    "access": "private",
    "description": "S3GLSystem アクセス用",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "S3GLSystem"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "getGLHash",
    "memberof": "src/gl/S3GLMaterial.js~S3GLMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMaterial.js~S3GLMaterial#getGLHash",
    "access": "public",
    "description": "このマテリアルの一意なハッシュ文字列を取得します。\n通常はマテリアル名がそのままハッシュ値になります。",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} マテリアルの識別用ハッシュ値（名前）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "マテリアルの識別用ハッシュ値（名前）"
    },
    "params": []
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "getGLData",
    "memberof": "src/gl/S3GLMaterial.js~S3GLMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMaterial.js~S3GLMaterial#getGLData",
    "access": "public",
    "description": "頂点データを作成して取得する\n頂点データ内に含まれるデータは、S3GLArray型となる。\nなお、ここでつけているメンバの名前は、そのままバーテックスシェーダで使用する変数名となる\nuniform の数がハードウェア上限られているため、送る情報は選定すること\n\n  - materialsColorAndDiffuse: 色(RGB)+拡散率（vec4/Float32Array）\n  - materialsSpecularAndPower: 鏡面色(RGB)+光沢度（vec4/Float32Array）\n  - materialsEmission: 発光色（vec3/Float32Array）\n  - materialsAmbientAndReflect: 環境光(RGB)+反射率（vec4/Float32Array）\n  - materialsTextureExist: テクスチャ有無フラグ（[color有:1/0, normal有:1/0]）\n  - materialsTextureColor: カラーテクスチャのGLオブジェクト\n  - materialsTextureNormal: 法線テクスチャのGLオブジェクト",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{[key: string]: S3GLArray | WebGLTexture }}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{[key: string]: S3GLArray | WebGLTexture }"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 365,
    "kind": "file",
    "name": "src/gl/S3GLMesh.js",
    "content": "﻿import S3Vector from \"../math/S3Vector.js\";\nimport S3System from \"../basic/S3System.js\";\nimport S3Mesh from \"../basic/S3Mesh.js\";\nimport S3GLTexture from \"./S3GLTexture.js\";\nimport S3GLSystem from \"./S3GLSystem.js\";\nimport S3GLVertex from \"./S3GLVertex.js\";\nimport S3GLTriangleIndex from \"./S3GLTriangleIndex.js\";\nimport S3GLMaterial from \"./S3GLMaterial.js\";\nimport S3GLTriangleIndexData from \"./S3GLTriangleIndexData.js\";\n\n/**\n * WebGL用のメッシュ（立体形状データ）を管理するクラスです。\n * S3Meshを拡張し、WebGL描画に必要なVBOやIBO情報、GL用データ生成・解放機能などを持ちます。\n * モデルの描画時にGLにバインドできるバッファ形式への変換・管理も行います。\n *\n * @class\n * @extends S3Mesh\n * @module S3\n */\nexport default class S3GLMesh extends S3Mesh {\n\t/**\n\t * S3GLMeshのインスタンスを生成します。\n\t * @param {S3GLSystem} s3glsystem WebGLシステム（GLContext等の管理）インスタンス\n\t */\n\tconstructor(s3glsystem) {\n\t\tsuper(s3glsystem);\n\n\t\t/**\n\t\t * S3GLSystem アクセス用\n\t\t * @type {S3GLSystem}\n\t\t */\n\t\tthis._s3gl = s3glsystem;\n\t}\n\n\t/**\n\t * メッシュの内部状態とWebGL用データ（gldata）を初期化します。\n\t * 通常はコンストラクタから自動的に呼ばれます。\n\t */\n\t_init() {\n\t\tsuper._init();\n\n\t\t/**\n\t\t * WebGL用バッファデータ格納オブジェクト\n\t\t * @type {S3GLMeshArrayData}\n\t\t */\n\t\tthis.gldata = null;\n\n\t\t/**\n\t\t * GL用データのコンパイル状態\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.is_compile_gl = false;\n\t}\n\n\t/**\n\t * このメッシュのクローン（複製）を生成します。\n\t * @returns {S3GLMesh} 複製されたS3GLMeshインスタンス\n\t */\n\tclone() {\n\t\t// @ts-ignore\n\t\treturn /** @type {S3GLMesh} */ super.clone(S3GLMesh);\n\t}\n\n\t/**\n\t * メッシュが保持する頂点配列を取得します。\n\t * @returns {Array<S3GLVertex>} 頂点配列\n\t */\n\tgetVertexArray() {\n\t\t// @ts-ignore\n\t\treturn /** @type {Array<S3GLVertex>} */ super.getVertexArray();\n\t}\n\n\t/**\n\t * メッシュが保持する三角形インデックス配列を取得します。\n\t * @returns {Array<S3GLTriangleIndex>} 三角形インデックス配列\n\t */\n\tgetTriangleIndexArray() {\n\t\t// @ts-ignore\n\t\treturn /** @type {Array<S3GLTriangleIndex>} */ super.getTriangleIndexArray();\n\t}\n\n\t/**\n\t * メッシュが保持するマテリアル配列を取得します。\n\t * @returns {Array<S3GLMaterial>} マテリアル配列\n\t */\n\tgetMaterialArray() {\n\t\t// @ts-ignore\n\t\treturn /** @type {Array<S3GLMaterial>} */ super.getMaterialArray();\n\t}\n\n\t/**\n\t * 頂点（ S3GLVertex またはその配列）をメッシュに追加します。\n\t * @param {S3GLVertex|Array<S3GLVertex>} vertex 追加する頂点またはその配列\n\t */\n\taddVertex(vertex) {\n\t\t// @ts-ignore\n\t\tsuper.addVertex(vertex);\n\t}\n\n\t/**\n\t * 三角形インデックス（ S3GLTriangleIndex またはその配列）をメッシュに追加します。\n\t * 反転モード時は面を裏返して追加します。\n\t * @param {S3GLTriangleIndex|Array<S3GLTriangleIndex>} ti 追加する三角形インデックスまたはその配列\n\t */\n\taddTriangleIndex(ti) {\n\t\t// @ts-ignore\n\t\tsuper.addTriangleIndex(ti);\n\t}\n\n\t/**\n\t * マテリアル（ S3GLMaterial またはその配列）をメッシュに追加します。\n\t * @param {S3GLMaterial|Array<S3GLMaterial>} material 追加するマテリアルまたはその配列\n\t */\n\taddMaterial(material) {\n\t\t// @ts-ignore\n\t\tsuper.addMaterial(material);\n\t}\n\n\t/**\n\t * WebGL用データがすでに作成済みかどうかを返します。\n\t * @returns {boolean} 作成済みならtrue\n\t */\n\tisCompileGL() {\n\t\treturn this.is_compile_gl;\n\t}\n\n\t/**\n\t * WebGL用データのコンパイル状態を設定します。\n\t * @param {boolean} is_compile_gl コンパイル済みかどうか\n\t */\n\tsetCompileGL(is_compile_gl) {\n\t\tthis.is_compile_gl = is_compile_gl;\n\t}\n\n\t/**\n\t * 各三角形ごとに、WebGL用属性データ（頂点ごとの法線・接線等）を生成します。\n\t * 頂点の共有を考慮して法線のスムージングも自動計算します。\n\t * @returns {Array<S3GLTriangleIndexData>} 三角形ごとのGL用属性データリスト\n\t */\n\tcreateTriangleIndexData() {\n\t\tconst vertex_list = this.getVertexArray();\n\t\tconst triangleindex_list = this.getTriangleIndexArray();\n\n\t\t/**\n\t\t * @typedef {Object} S3GLNormalVector\n\t\t * @property {S3Vector} normal 平面の法線\n\t\t * @property {S3Vector} tangent UV座標による接線\n\t\t * @property {S3Vector} binormal UV座標による従法線\n\t\t */\n\n\t\t/**\n\t\t * 三角形ごとのWebGL属性データリスト\n\t\t * @type {Array<S3GLTriangleIndexData & { face : S3GLNormalVector }>}\n\t\t */\n\t\tconst tid_list = [];\n\n\t\t/**\n\t\t * @typedef {\"normal\"|\"tangent\"|\"binormal\"} S3GLNormalListKey\n\t\t */\n\n\t\t/**\n\t\t * 面ごとの法線・接線・従法線名をまとめたオブジェクト\n\t\t * @type {{ normal: boolean, tangent: boolean, binormal: boolean }}\n\t\t */\n\t\tconst normallist = {\n\t\t\tnormal: false,\n\t\t\ttangent: false,\n\t\t\tbinormal: false\n\t\t};\n\n\t\t// 各面の法線、接線、従法線を調べる\n\t\tfor (let i = 0; i < triangleindex_list.length; i++) {\n\t\t\tconst triangleindex = triangleindex_list[i];\n\t\t\tconst index = triangleindex.index;\n\t\t\tconst uv = triangleindex.uv;\n\t\t\ttid_list[i] = triangleindex.createGLTriangleIndexData();\n\t\t\tlet vector_list = null;\n\t\t\t// 3点を時計回りで通る平面が表のとき\n\t\t\tif (this.sys.dimensionmode === S3System.DIMENSION_MODE.RIGHT_HAND) {\n\t\t\t\tvector_list = S3Vector.getNormalVector(\n\t\t\t\t\tvertex_list[index[0]].position,\n\t\t\t\t\tvertex_list[index[1]].position,\n\t\t\t\t\tvertex_list[index[2]].position,\n\t\t\t\t\tuv[0],\n\t\t\t\t\tuv[1],\n\t\t\t\t\tuv[2]\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tvector_list = S3Vector.getNormalVector(\n\t\t\t\t\tvertex_list[index[2]].position,\n\t\t\t\t\tvertex_list[index[1]].position,\n\t\t\t\t\tvertex_list[index[0]].position,\n\t\t\t\t\tuv[2],\n\t\t\t\t\tuv[1],\n\t\t\t\t\tuv[0]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttid_list[i].face = {\n\t\t\t\tnormal: vector_list.normal,\n\t\t\t\ttangent: vector_list.tangent,\n\t\t\t\tbinormal: vector_list.binormal\n\t\t\t};\n\t\t}\n\n\t\t// 素材ごとに、三角形の各頂点に、面の法線情報を追加する\n\t\t// 後に正規化する（平均値をとる）が、同じベクトルを加算しないようにキャッシュでチェックする\n\n\t\t/**\n\t\t * マテリアルごと、頂点ごとの属性ベクトル情報リスト\n\t\t * @type {Array<Array<{ normal: S3Vector, tangent: S3Vector, binormal: S3Vector }>>}\n\t\t */\n\t\tconst vertexdatalist_material = [];\n\n\t\t/**\n\t\t * 各マテリアル・頂点ごと、法線等ベクトルごとのキャッシュ管理\n\t\t * @type {Array<Array<{ normal: Object<string, boolean>, tangent: Object<string, boolean>, binormal: Object<string, boolean> }>>}\n\t\t */\n\t\tconst vertexdatalist_material_cash = [];\n\t\tfor (let i = 0; i < triangleindex_list.length; i++) {\n\t\t\tconst triangleindex = triangleindex_list[i];\n\t\t\tconst material = triangleindex.materialIndex;\n\t\t\tconst triangledata = tid_list[i];\n\t\t\t// 未登録なら新規作成する\n\t\t\tif (vertexdatalist_material[material] === undefined) {\n\t\t\t\tvertexdatalist_material[material] = [];\n\t\t\t\tvertexdatalist_material_cash[material] = [];\n\t\t\t}\n\t\t\tconst vertexdata_list = vertexdatalist_material[material];\n\t\t\tconst vertexdata_list_cash = vertexdatalist_material_cash[material];\n\t\t\t// 素材ごとの三角形の各頂点に対応する法線情報に加算していく\n\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t// 未登録なら新規作成する\n\t\t\t\tconst index = triangleindex.index[j];\n\t\t\t\tif (vertexdata_list[index] === undefined) {\n\t\t\t\t\tvertexdata_list[index] = {\n\t\t\t\t\t\tnormal: new S3Vector(0, 0, 0),\n\t\t\t\t\t\ttangent: new S3Vector(0, 0, 0),\n\t\t\t\t\t\tbinormal: new S3Vector(0, 0, 0)\n\t\t\t\t\t};\n\t\t\t\t\tvertexdata_list_cash[index] = {\n\t\t\t\t\t\tnormal: {},\n\t\t\t\t\t\ttangent: {},\n\t\t\t\t\t\tbinormal: {}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tconst vertexdata = vertexdata_list[index];\n\t\t\t\tconst vertexdata_cash = vertexdata_list_cash[index];\n\n\t\t\t\t// 加算する\n\t\t\t\tfor (const vector_name in normallist) {\n\t\t\t\t\tconst key = /** @type {S3GLNormalListKey} */ (vector_name);\n\t\t\t\t\tif (triangledata.face[key] !== null) {\n\t\t\t\t\t\t// データが入っていたら加算する\n\t\t\t\t\t\tconst id = triangledata.face[key].toHash(3);\n\t\t\t\t\t\tif (vertexdata_cash[key][id]) continue;\n\t\t\t\t\t\tvertexdata[key] = vertexdata[key].add(triangledata.face[key]);\n\t\t\t\t\t\tvertexdata_cash[key][id] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// マテリアルごとの頂点の法線を、正規化して1とする（平均値をとる）\n\t\tfor (const material in vertexdatalist_material) {\n\t\t\tconst vertexdata_list = vertexdatalist_material[material];\n\t\t\tfor (const index in vertexdata_list) {\n\t\t\t\tconst vertexdata = vertexdata_list[index];\n\t\t\t\tfor (const vector_name in normallist) {\n\t\t\t\t\tconst key = /** @type {S3GLNormalListKey} */ (vector_name);\n\t\t\t\t\t// あまりに小さいと、0で割ることになるためチェックする\n\t\t\t\t\tif (vertexdata[key].normFast() > 0.000001) {\n\t\t\t\t\t\tvertexdata[key] = vertexdata[key].normalize();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 面法線と、頂点（スムーズ）法線との角度の差が、下記より大きい場合は面法線を優先\n\t\tconst SMOOTH = {};\n\t\tSMOOTH.normal = Math.cos((50 / 360) * (2 * Math.PI));\n\t\tSMOOTH.tangent = Math.cos((50 / 360) * (2 * Math.PI));\n\t\tSMOOTH.binormal = Math.cos((50 / 360) * (2 * Math.PI));\n\n\t\t// 最終的に三角形の各頂点の法線を求める\n\t\tfor (let i = 0; i < triangleindex_list.length; i++) {\n\t\t\tconst triangleindex = triangleindex_list[i];\n\t\t\tconst material = triangleindex.materialIndex;\n\t\t\tconst triangledata = tid_list[i];\n\t\t\tconst vertexdata_list = vertexdatalist_material[material];\n\n\t\t\t// 法線ががあまりに違うのであれば、面の法線を採用する\n\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\tconst index = triangleindex.index[j];\n\t\t\t\tconst vertexdata = vertexdata_list[index];\n\t\t\t\tfor (const vector_name in normallist) {\n\t\t\t\t\tconst key = /** @type {S3GLNormalListKey} */ (vector_name);\n\t\t\t\t\tlet targetdata;\n\t\t\t\t\tif (triangledata.face[key]) {\n\t\t\t\t\t\t// 面で計算した値が入っているなら、\n\t\t\t\t\t\t// 面で計算した値と、頂点の値とを比較してどちらかを採用する\n\t\t\t\t\t\tconst rate = triangledata.face[key].dot(vertexdata[key]);\n\t\t\t\t\t\t// 指定した度以上傾いていたら、面の法線を採用する\n\t\t\t\t\t\ttargetdata = rate < SMOOTH[key] ? triangledata.face : vertexdata;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttargetdata = vertexdata;\n\t\t\t\t\t}\n\t\t\t\t\t// コピー\n\t\t\t\t\ttriangledata.vertex[key][j] = targetdata[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn tid_list;\n\t}\n\n\t/**\n\t * IBO（インデックスバッファオブジェクト）データ構造\n\t * @typedef {Object} S3GLMeshIBOData\n\t * @property {number} array_length 配列の要素数（インデックス総数）\n\t * @property {Int16Array} array インデックス値の配列（WebGL用）\n\t * @property {WebGLBuffer} [data] GL生成後のバッファオブジェクト（未生成時はundefined）\n\t */\n\n\t/**\n\t * VBO（頂点バッファオブジェクト）1要素のデータ構造\n\t * @typedef {Object} S3GLMeshVBOElement\n\t * @property {string} name 属性名（例：\"position\", \"normal\", \"uv\" など）\n\t * @property {number} dimension 配列の次元（例：位置なら3、UVなら2など）\n\t * @property {typeof Float32Array | typeof Int32Array} datatype 使用する配列型\n\t * @property {number} array_length 配列の要素数（全頂点×次元）\n\t * @property {Float32Array | Int32Array} array 属性データ本体\n\t * @property {WebGLBuffer} [data] GL生成後のバッファオブジェクト（未生成時はundefined）\n\t */\n\n\t/**\n\t * VBO（頂点バッファオブジェクト）全体のデータ構造\n\t * @typedef {Object.<string, S3GLMeshVBOElement>} S3GLMeshVBOData\n\t * 属性名（position/normal/uv等）→S3GLVBOElementの連想配列\n\t */\n\n\t/**\n\t * _getGLArrayDataの返却値（IBOとVBOまとめて返す構造）\n\t * @typedef {Object} S3GLMeshArrayData\n\t * @property {S3GLMeshIBOData} ibo インデックスバッファ情報\n\t * @property {S3GLMeshVBOData} vbo 頂点バッファ情報\n\t */\n\n\t/**\n\t * メッシュ全体の頂点・インデックス情報をWebGL用のバッファ形式（VBO/IBO）に変換します。\n\t * すでに計算済みなら再計算は行いません。\n\t *\n\t * - IBOはポリゴン（三角形）の頂点インデックス列\n\t * - VBOは各頂点の属性（位置、法線、UV等）の配列\n\t * - 戻り値の各dataプロパティは、GLバッファ生成後のみセットされます\n\t *\n\t * @returns {S3GLMeshArrayData} IBO/VBOデータをまとめたオブジェクト\n\t */\n\t_getGLArrayData() {\n\t\t/**\n\t\t * 頂点配列\n\t\t * @type {Array<S3GLVertex>}\n\t\t */\n\t\tconst vertex_list = this.getVertexArray();\n\n\t\t/**\n\t\t * 三角形インデックスデータ配列\n\t\t * @type {Array<S3GLTriangleIndexData>}\n\t\t */\n\t\tconst triangleindex_list = this.createTriangleIndexData();\n\n\t\t/**\n\t\t * 頂点ハッシュ文字列→頂点配列インデックスの対応表\n\t\t * @type {Object<string, number>}\n\t\t */\n\t\tconst hashlist = {};\n\n\t\tlet vertex_length = 0;\n\n\t\t/**\n\t\t * 三角形ごとの頂点インデックス配列\n\t\t * @type {Array<Int16Array>}\n\t\t */\n\t\tconst triangle = [];\n\n\t\t/**\n\t\t * 属性ごとの頂点データリスト（raw属性値の配列）\n\t\t * @type {Object<string, Array<any>>}\n\t\t */\n\t\tconst vertextypelist = {};\n\n\t\t// インデックスを再構築して、VBOとIBOを作る\n\t\t// 今の生データだと、頂点情報、素材情報がばらばらに保存されているので\n\t\t// 1つの頂点情報（位置、色等）を1つのセットで保存する必要がある\n\t\t// 面に素材が結びついているので、面が1つの頂点を共有していると\n\t\t// それらの面の素材情報によって、別の頂点として扱う必要がある\n\t\t// なので基本的には頂点情報を毎回作り直す必要があるが、\n\t\t// 1度作ったものと等しいものが必要であれば、キャッシュを使用する\n\t\tfor (let i = 0; i < triangleindex_list.length; i++) {\n\t\t\tconst triangleindex = triangleindex_list[i];\n\n\t\t\t/**\n\t\t\t * 1つの三角形(face)に対する3頂点のインデックス番号リスト\n\t\t\t * @type {Array<number>}\n\t\t\t */\n\t\t\tconst indlist = [];\n\t\t\t// ポリゴンの各頂点を調べる\n\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t// その頂点（面の情報（UVなど）も含めたデータ）のハッシュ値を求める\n\t\t\t\tconst hash = triangleindex.getGLHash(j, vertex_list);\n\t\t\t\t// すでに以前と同一の頂点があるならば、その頂点アドレスを選択。ない場合は新しいアドレス\n\t\t\t\tconst hit = hashlist[hash];\n\t\t\t\tindlist[j] = hit !== undefined ? hit : vertex_length;\n\t\t\t\t// 頂点がもしヒットしていなかったら\n\t\t\t\tif (hit === undefined) {\n\t\t\t\t\t// 頂点データを作成して\n\t\t\t\t\tconst vertexdata = triangleindex.getGLData(j, vertex_list);\n\t\t\t\t\thashlist[hash] = vertex_length;\n\t\t\t\t\t// 頂点にはどういった情報があるか分からないので、in を使用する。\n\t\t\t\t\t// key には、position / normal / color / uv などがおそらく入っている\n\t\t\t\t\tfor (const key in vertexdata) {\n\t\t\t\t\t\tif (vertextypelist[key] === undefined) {\n\t\t\t\t\t\t\tvertextypelist[key] = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvertextypelist[key].push(vertexdata[key]);\n\t\t\t\t\t}\n\t\t\t\t\tvertex_length++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 3つの頂点のインデックスを記録\n\t\t\ttriangle[i] = new Int16Array(indlist);\n\t\t}\n\n\t\t// データ結合処理\n\t\t// これまでは複数の配列にデータが入ってしまっているので、\n\t\t// 1つの指定した型の配列に全てをまとめる必要がある\n\n\t\tlet pt = 0;\n\n\t\t/**\n\t\t * IBOデータ格納用\n\t\t * @type {S3GLMeshIBOData}\n\t\t */\n\t\tconst ibo = {};\n\t\t{\n\t\t\t// IBOの結合（インデックス）\n\t\t\tibo.array_length = triangleindex_list.length * 3;\n\t\t\tibo.array = new Int16Array(ibo.array_length);\n\t\t\tpt = 0;\n\t\t\tfor (let i = 0; i < triangleindex_list.length; i++) {\n\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\tibo.array[pt++] = triangle[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * VBOデータ格納用\n\t\t * @type {S3GLMeshVBOData}\n\t\t */\n\t\tconst vbo = {};\n\t\t{\n\t\t\t// VBOの結合（頂点）\n\t\t\t// 位置、法線、色などを、それぞれ1つの配列として記録する\n\t\t\tfor (const key in vertextypelist) {\n\t\t\t\tconst srcdata = vertextypelist[key];\n\t\t\t\tconst dimension = srcdata[0].dimension;\n\t\t\t\tconst dstdata = {};\n\t\t\t\t// 情報の名前(position / uv / normal など)\n\t\t\t\tdstdata.name = key;\n\t\t\t\t// 1つの頂点あたり、いくつの値が必要か。例えばUVなら2次元情報\n\t\t\t\tdstdata.dimension = srcdata[0].dimension;\n\t\t\t\t// 型情報 Float32Array / Int32Array なのかどうか\n\t\t\t\tdstdata.datatype = srcdata[0].datatype;\n\t\t\t\t// 配列の長さ\n\t\t\t\tdstdata.array_length = dimension * vertex_length;\n\t\t\t\t// 型情報と、配列の長さから、メモリを確保する\n\t\t\t\tdstdata.array = new dstdata.datatype.instance(dstdata.array_length);\n\t\t\t\t// data を1つの配列に結合する\n\t\t\t\tpt = 0;\n\t\t\t\tfor (let i = 0; i < vertex_length; i++) {\n\t\t\t\t\tfor (let j = 0; j < dimension; j++) {\n\t\t\t\t\t\tdstdata.array[pt++] = srcdata[i].data[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// VBOオブジェクトに格納\n\t\t\t\tvbo[key] = dstdata;\n\t\t\t}\n\t\t}\n\n\t\tconst arraydata = {};\n\t\tarraydata.ibo = ibo;\n\t\tarraydata.vbo = vbo;\n\t\treturn arraydata;\n\t}\n\n\t/**\n\t * WebGL用バッファ（IBO/VBO）やテクスチャなどのGLリソースを開放し、再利用不可にします。\n\t * テクスチャを含むマテリアルのリソースも解放対象です。\n\t * @returns {void}\n\t */\n\tdispose() {\n\t\t// コンパイルしていなかったら抜ける\n\t\tif (!this.isCompileGL()) {\n\t\t\treturn;\n\t\t}\n\t\tconst gldata = this.getGLData();\n\t\tif (gldata !== null) {\n\t\t\tif (gldata.ibo !== undefined) {\n\t\t\t\tif (gldata.ibo.data !== undefined) {\n\t\t\t\t\tthis._s3gl.glfunc.deleteBuffer(gldata.ibo.data);\n\t\t\t\t}\n\t\t\t\tdelete gldata.ibo;\n\t\t\t}\n\t\t\tif (gldata.vbo !== undefined) {\n\t\t\t\tfor (const key in gldata.vbo) {\n\t\t\t\t\tif (gldata.vbo[key].data !== undefined) {\n\t\t\t\t\t\tthis._s3gl.glfunc.deleteBuffer(gldata.vbo[key].data);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdelete gldata.vbo;\n\t\t\t}\n\t\t\t{\n\t\t\t\tconst material_list = this.getMaterialArray();\n\t\t\t\tfor (let i = 0; i < material_list.length; i++) {\n\t\t\t\t\tconst mat = material_list[i];\n\t\t\t\t\tmat.textureColor.dispose();\n\t\t\t\t\tmat.textureNormal.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdelete this.gldata;\n\t\tthis.gldata = null;\n\t\tthis.setCompileGL(false);\n\t\tsuper.dispose();\n\t}\n\n\t/**\n\t * メッシュのGLデータ（VBO/IBO）を取得・生成します。\n\t * すでに生成済みならキャッシュを返します。\n\t * メッシュが未完成または GLContext が未セットの場合はnullを返します。\n\t * @returns {S3GLMeshArrayData|null} WebGL用バッファデータ（ibo, vbo等を含む）またはnull\n\t */\n\tgetGLData() {\n\t\t// すでに存在している場合は、返す\n\t\tif (this.isCompileGL()) {\n\t\t\treturn this.gldata;\n\t\t}\n\t\t// 完成していない場合は null\n\t\tif (this.isComplete() === false) {\n\t\t\treturn null;\n\t\t}\n\t\t// GLを取得できない場合も、この時点で終了させる\n\t\tif (!this._s3gl.isSetGL()) {\n\t\t\treturn null;\n\t\t}\n\t\tconst gldata = this._getGLArrayData(); // GL用の配列データを作成\n\n\t\t// IBO / VBO 用のオブジェクトを作成\n\t\tgldata.ibo.data = this._s3gl.glfunc.createBufferIBO(gldata.ibo.array);\n\t\tfor (const key in gldata.vbo) {\n\t\t\tgldata.vbo[key].data = this._s3gl.glfunc.createBufferVBO(gldata.vbo[key].array);\n\t\t}\n\t\t// 代入\n\t\tthis.gldata = gldata;\n\t\tthis.setCompileGL(true);\n\t\treturn this.gldata;\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/gl/S3GLMesh.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 366,
    "kind": "class",
    "name": "S3GLMesh",
    "memberof": "src/gl/S3GLMesh.js",
    "static": true,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/gl/S3GLMesh.js",
    "importStyle": "S3GLMesh",
    "description": "WebGL用のメッシュ（立体形状データ）を管理するクラスです。\nS3Meshを拡張し、WebGL描画に必要なVBOやIBO情報、GL用データ生成・解放機能などを持ちます。\nモデルの描画時にGLにバインドできるバッファ形式への変換・管理も行います。",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 367,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#constructor",
    "access": "public",
    "description": "S3GLMeshのインスタンスを生成します。",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3GLSystem"
        ],
        "spread": false,
        "optional": false,
        "name": "s3glsystem",
        "description": "WebGLシステム（GLContext等の管理）インスタンス"
      }
    ]
  },
  {
    "__docId__": 368,
    "kind": "member",
    "name": "_s3gl",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#_s3gl",
    "access": "private",
    "description": "S3GLSystem アクセス用",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "S3GLSystem"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "_init",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#_init",
    "access": "private",
    "description": "メッシュの内部状態とWebGL用データ（gldata）を初期化します。\n通常はコンストラクタから自動的に呼ばれます。",
    "lineNumber": 39,
    "params": [],
    "return": null
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "gldata",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#gldata",
    "access": "public",
    "description": "WebGL用バッファデータ格納オブジェクト",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "S3GLMeshArrayData"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 371,
    "kind": "member",
    "name": "is_compile_gl",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#is_compile_gl",
    "access": "public",
    "description": "GL用データのコンパイル状態",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "clone",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#clone",
    "access": "public",
    "description": "このメッシュのクローン（複製）を生成します。",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLMesh} 複製されたS3GLMeshインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLMesh"
      ],
      "spread": false,
      "description": "複製されたS3GLMeshインスタンス"
    },
    "params": []
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "getVertexArray",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#getVertexArray",
    "access": "public",
    "description": "メッシュが保持する頂点配列を取得します。",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<S3GLVertex>} 頂点配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<S3GLVertex>"
      ],
      "spread": false,
      "description": "頂点配列"
    },
    "params": []
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "getTriangleIndexArray",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#getTriangleIndexArray",
    "access": "public",
    "description": "メッシュが保持する三角形インデックス配列を取得します。",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<S3GLTriangleIndex>} 三角形インデックス配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<S3GLTriangleIndex>"
      ],
      "spread": false,
      "description": "三角形インデックス配列"
    },
    "params": []
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "getMaterialArray",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#getMaterialArray",
    "access": "public",
    "description": "メッシュが保持するマテリアル配列を取得します。",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<S3GLMaterial>} マテリアル配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<S3GLMaterial>"
      ],
      "spread": false,
      "description": "マテリアル配列"
    },
    "params": []
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "addVertex",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#addVertex",
    "access": "public",
    "description": "頂点（ S3GLVertex またはその配列）をメッシュに追加します。",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3GLVertex",
          "Array<S3GLVertex>"
        ],
        "spread": false,
        "optional": false,
        "name": "vertex",
        "description": "追加する頂点またはその配列"
      }
    ],
    "return": null
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "addTriangleIndex",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#addTriangleIndex",
    "access": "public",
    "description": "三角形インデックス（ S3GLTriangleIndex またはその配列）をメッシュに追加します。\n反転モード時は面を裏返して追加します。",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3GLTriangleIndex",
          "Array<S3GLTriangleIndex>"
        ],
        "spread": false,
        "optional": false,
        "name": "ti",
        "description": "追加する三角形インデックスまたはその配列"
      }
    ],
    "return": null
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "addMaterial",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#addMaterial",
    "access": "public",
    "description": "マテリアル（ S3GLMaterial またはその配列）をメッシュに追加します。",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3GLMaterial",
          "Array<S3GLMaterial>"
        ],
        "spread": false,
        "optional": false,
        "name": "material",
        "description": "追加するマテリアルまたはその配列"
      }
    ],
    "return": null
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "isCompileGL",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#isCompileGL",
    "access": "public",
    "description": "WebGL用データがすでに作成済みかどうかを返します。",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 作成済みならtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "作成済みならtrue"
    },
    "params": []
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "setCompileGL",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#setCompileGL",
    "access": "public",
    "description": "WebGL用データのコンパイル状態を設定します。",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "is_compile_gl",
        "description": "コンパイル済みかどうか"
      }
    ],
    "return": null
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "createTriangleIndexData",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#createTriangleIndexData",
    "access": "public",
    "description": "各三角形ごとに、WebGL用属性データ（頂点ごとの法線・接線等）を生成します。\n頂点の共有を考慮して法線のスムージングも自動計算します。",
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<S3GLTriangleIndexData>} 三角形ごとのGL用属性データリスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<S3GLTriangleIndexData>"
      ],
      "spread": false,
      "description": "三角形ごとのGL用属性データリスト"
    },
    "params": []
  },
  {
    "__docId__": 383,
    "kind": "typedef",
    "name": "S3GLNormalVector",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "static": true,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh.S3GLNormalVector",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "normal",
        "description": "平面の法線"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "tangent",
        "description": "UV座標による接線"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "binormal",
        "description": "UV座標による従法線"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3GLNormalVector"
    }
  },
  {
    "__docId__": 384,
    "kind": "typedef",
    "name": "S3GLNormalListKey",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "static": true,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh.S3GLNormalListKey",
    "access": "public",
    "description": "",
    "type": {
      "types": [
        "\"normal\"",
        "\"tangent\"",
        "\"binormal\""
      ],
      "optional": false,
      "name": "S3GLNormalListKey"
    }
  },
  {
    "__docId__": 385,
    "kind": "typedef",
    "name": "S3GLMeshIBOData",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "static": true,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh.S3GLMeshIBOData",
    "access": "public",
    "description": "IBO（インデックスバッファオブジェクト）データ構造",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "array_length",
        "description": "配列の要素数（インデックス総数）"
      },
      {
        "nullable": null,
        "types": [
          "Int16Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "インデックス値の配列（WebGL用）"
      },
      {
        "nullable": null,
        "types": [
          "WebGLBuffer"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "GL生成後のバッファオブジェクト（未生成時はundefined）"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3GLMeshIBOData"
    }
  },
  {
    "__docId__": 386,
    "kind": "typedef",
    "name": "S3GLMeshVBOElement",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "static": true,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh.S3GLMeshVBOElement",
    "access": "public",
    "description": "VBO（頂点バッファオブジェクト）1要素のデータ構造",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "属性名（例：\"position\", \"normal\", \"uv\" など）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "配列の次元（例：位置なら3、UVなら2など）"
      },
      {
        "nullable": null,
        "types": [
          "typeof Float32Array ",
          " typeof Int32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "datatype",
        "description": "使用する配列型"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "array_length",
        "description": "配列の要素数（全頂点×次元）"
      },
      {
        "nullable": null,
        "types": [
          "Float32Array ",
          " Int32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "属性データ本体"
      },
      {
        "nullable": null,
        "types": [
          "WebGLBuffer"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "GL生成後のバッファオブジェクト（未生成時はundefined）"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3GLMeshVBOElement"
    }
  },
  {
    "__docId__": 387,
    "kind": "typedef",
    "name": "S3GLMeshVBOData",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "static": true,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh.S3GLMeshVBOData",
    "access": "public",
    "description": "VBO（頂点バッファオブジェクト）全体のデータ構造",
    "type": {
      "types": [
        "Object.<string, S3GLMeshVBOElement>"
      ],
      "optional": false,
      "name": "S3GLMeshVBOData"
    }
  },
  {
    "__docId__": 388,
    "kind": "typedef",
    "name": "S3GLMeshArrayData",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "static": true,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh.S3GLMeshArrayData",
    "access": "public",
    "description": "_getGLArrayDataの返却値（IBOとVBOまとめて返す構造）",
    "properties": [
      {
        "nullable": null,
        "types": [
          "S3GLMeshIBOData"
        ],
        "spread": false,
        "optional": false,
        "name": "ibo",
        "description": "インデックスバッファ情報"
      },
      {
        "nullable": null,
        "types": [
          "S3GLMeshVBOData"
        ],
        "spread": false,
        "optional": false,
        "name": "vbo",
        "description": "頂点バッファ情報"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3GLMeshArrayData"
    }
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "_getGLArrayData",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#_getGLArrayData",
    "access": "private",
    "description": "メッシュ全体の頂点・インデックス情報をWebGL用のバッファ形式（VBO/IBO）に変換します。\nすでに計算済みなら再計算は行いません。\n\n- IBOはポリゴン（三角形）の頂点インデックス列\n- VBOは各頂点の属性（位置、法線、UV等）の配列\n- 戻り値の各dataプロパティは、GLバッファ生成後のみセットされます",
    "lineNumber": 359,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLMeshArrayData} IBO/VBOデータをまとめたオブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLMeshArrayData"
      ],
      "spread": false,
      "description": "IBO/VBOデータをまとめたオブジェクト"
    },
    "params": []
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "dispose",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#dispose",
    "access": "public",
    "description": "WebGL用バッファ（IBO/VBO）やテクスチャなどのGLリソースを開放し、再利用不可にします。\nテクスチャを含むマテリアルのリソースも解放対象です。",
    "lineNumber": 502,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "getGLData",
    "memberof": "src/gl/S3GLMesh.js~S3GLMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLMesh.js~S3GLMesh#getGLData",
    "access": "public",
    "description": "メッシュのGLデータ（VBO/IBO）を取得・生成します。\nすでに生成済みならキャッシュを返します。\nメッシュが未完成または GLContext が未セットの場合はnullを返します。",
    "lineNumber": 544,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLMeshArrayData|null} WebGL用バッファデータ（ibo, vbo等を含む）またはnull"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLMeshArrayData",
        "null"
      ],
      "spread": false,
      "description": "WebGL用バッファデータ（ibo, vbo等を含む）またはnull"
    },
    "params": []
  },
  {
    "__docId__": 394,
    "kind": "file",
    "name": "src/gl/S3GLModel.js",
    "content": "﻿import S3GLMaterial from \"./S3GLMaterial.js\";\nimport S3GLArray from \"./S3GLArray.js\";\nimport S3Model from \"../basic/S3Model.js\";\n\n/**\n * WebGL描画用のモデル（Model）クラス。\n * 基本のS3Modelを拡張し、WebGL向けuniformデータの生成（getUniforms）機能を追加します。\n * モデルごとの材質（マテリアル）情報をuniformデータとしてまとめ、GLSLシェーダに渡せる形に整形します。\n *\n * @class\n * @extends S3Model\n * @module S3\n */\nexport default class S3GLModel extends S3Model {\n\t/**\n\t * モデル情報を初期化します。\n\t * 位置・スケール・回転・形状メッシュ等はS3Model準拠です。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * モデルに関連するWebGL向けuniformデータを生成し返します。\n\t * モデルが参照するメッシュ内の最大4つまでのマテリアル情報をGLSLシェーダ向けデータにまとめます。\n\t * 各マテリアルのGLデータをuniform変数名でまとめ、GLへのバインド処理を簡略化します。\n\t *\n\t * - uniforms: uniform変数名→データ配列（各マテリアルの属性ごとに配列化）\n\t *\n\t * @returns {{\n\t *   uniforms: Object<string, Array<any>>\n\t * }}\n\t */\n\tgetUniforms() {\n\t\t/**\n\t\t * @type {{[key: string]: Array<S3GLArray | WebGLTexture>}}\n\t\t */\n\t\tlet uniforms = {};\n\t\tconst MATELIAL_MAX = 4;\n\t\t/**\n\t\t * @type {Array<S3GLMaterial>}\n\t\t */\n\t\tconst material_array = /** @type {Array<S3GLMaterial>} */ (this.getMesh().getMaterialArray());\n\t\tconst materialLength = Math.min(material_array.length, MATELIAL_MAX);\n\t\tfor (let i = 0; i < materialLength; i++) {\n\t\t\tconst data = material_array[i].getGLData();\n\t\t\tfor (const key in data) {\n\t\t\t\tif (!uniforms[key]) {\n\t\t\t\t\t/**\n\t\t\t\t\t * @type {Array<S3GLArray | WebGLTexture>}\n\t\t\t\t\t */\n\t\t\t\t\tuniforms[key] = [];\n\t\t\t\t}\n\t\t\t\tuniforms[key].push(data[key]);\n\t\t\t}\n\t\t}\n\t\tconst ret = {};\n\t\tret.uniforms = uniforms;\n\t\treturn ret;\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/gl/S3GLModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 395,
    "kind": "class",
    "name": "S3GLModel",
    "memberof": "src/gl/S3GLModel.js",
    "static": true,
    "longname": "src/gl/S3GLModel.js~S3GLModel",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/gl/S3GLModel.js",
    "importStyle": "S3GLModel",
    "description": "WebGL描画用のモデル（Model）クラス。\n基本のS3Modelを拡張し、WebGL向けuniformデータの生成（getUniforms）機能を追加します。\nモデルごとの材質（マテリアル）情報をuniformデータとしてまとめ、GLSLシェーダに渡せる形に整形します。",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 396,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/gl/S3GLModel.js~S3GLModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLModel.js~S3GLModel#constructor",
    "access": "public",
    "description": "モデル情報を初期化します。\n位置・スケール・回転・形状メッシュ等はS3Model準拠です。",
    "lineNumber": 19
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "getUniforms",
    "memberof": "src/gl/S3GLModel.js~S3GLModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLModel.js~S3GLModel#getUniforms",
    "access": "public",
    "description": "モデルに関連するWebGL向けuniformデータを生成し返します。\nモデルが参照するメッシュ内の最大4つまでのマテリアル情報をGLSLシェーダ向けデータにまとめます。\n各マテリアルのGLデータをuniform変数名でまとめ、GLへのバインド処理を簡略化します。\n\n- uniforms: uniform変数名→データ配列（各マテリアルの属性ごとに配列化）",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{\n  uniforms: Object<string, Array<any>>\n}}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{\n  uniforms: Object<string, Array<any>>\n}"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 398,
    "kind": "file",
    "name": "src/gl/S3GLProgram.js",
    "content": "﻿import S3Matrix from \"../math/S3Matrix.js\";\nimport S3Vector from \"../math/S3Vector.js\";\nimport S3GLShader from \"./S3GLShader.js\";\nimport S3GLSystem from \"./S3GLSystem.js\";\nimport S3GLArray from \"./S3GLArray.js\";\nimport S3GLMesh from \"./S3GLMesh.js\";\n\n/**\n * @typedef {Int32Array|Float32Array|WebGLBuffer|WebGLTexture|S3GLArray|S3Matrix|S3Vector|number} S3GLProgramBindInputDataSingle bindDataの入力データ(単体)\n */\n\n/**\n * @typedef {S3GLProgramBindInputDataSingle|Array<S3GLProgramBindInputDataSingle>} S3GLProgramBindInputData bindDataの入力データ(配列可)\n */\n\n/**\n * @typedef {Object.<string, S3GLProgramBindInputData>} S3GLProgramBindInputDataTable\n */\n\n/**\n * @typedef {Object} S3GLProgramUniforms\n * @property {S3GLProgramBindInputDataTable} uniforms\n */\n\n/**\n * WebGLのプログラム（Program）管理クラス。\n * 頂点・フラグメント2つのシェーダーと、それらをリンクしたGLプログラムオブジェクトを保持し、\n * 各種attribute/uniform変数とのバインドや、プログラム切替・破棄などの管理を担います。\n * S3GLSystem経由でのWebGL描画制御のコアとなります。\n *\n * @class\n * @module S3\n */\nexport default class S3GLProgram {\n\t/**\n\t * WebGLプログラムを初期化します。\n\t * @param {S3GLSystem} sys GLシステムインスタンス\n\t * @param {number} id プログラム一意識別ID\n\t */\n\tconstructor(sys, id) {\n\t\tthis._init(sys, id);\n\t}\n\n\t/**\n\t * プログラムの内部初期化。\n\t * 変数情報・シェーダー状態・リンク済みフラグ等をリセットします。\n\t * @private\n\t * @param {S3GLSystem} sys\n\t * @param {number} id\n\t */\n\t_init(sys, id) {\n\t\t/**\n\t\t * プログラム一意ID\n\t\t * @type {number}\n\t\t */\n\t\tthis.id = id;\n\n\t\t/**\n\t\t * GLシステムインスタンス\n\t\t * @type {S3GLSystem}\n\t\t */\n\t\tthis.sys = sys;\n\n\t\t/**\n\t\t * 頂点シェーダインスタンス\n\t\t * @type {?S3GLShader}\n\t\t */\n\t\tthis.vertex = null;\n\n\t\t/**\n\t\t * フラグメントシェーダインスタンス\n\t\t * @type {?S3GLShader}\n\t\t */\n\t\tthis.fragment = null;\n\n\t\t/**\n\t\t * 頂点シェーダがダウンロード中かどうか\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.isDLVertex = false;\n\n\t\t/**\n\t\t * フラグメントシェーダがダウンロード中かどうか\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.isDLFragment = false;\n\n\t\t/**\n\t\t * リンク済みGLプログラム\n\t\t * @type {?WebGLProgram}\n\t\t */\n\t\tthis.program = null;\n\n\t\t/**\n\t\t * GL上でリンク済みかどうか\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.is_linked = false;\n\n\t\t/**\n\t\t * エラー発生済みかどうか\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.is_error = false;\n\n\t\t/**\n\t\t * 有効化済みのattributeロケーション番号管理\n\t\t * @type {Object<number, boolean>}\n\t\t */\n\t\tthis.enable_vertex_number = {};\n\n\t\t/**\n\t\t * シェーダ変数管理構造体\n\t\t * @type {Object<string, S3GLShaderData>}\n\t\t */\n\t\tthis.variable = {};\n\n\t\tconst _this = this;\n\n\t\t/**\n\t\t * 次にバインド予定のアクティブテクスチャ番号\n\t\t * @type {number}\n\t\t */\n\t\tthis.activeTextureId = 0;\n\n\t\t/**\n\t\t * WebGLのuniform変数バインド用関数群。\n\t\t * 各関数はGLSLの型に応じて正しいuniform関数（uniform1iv/uniformMatrix4fv等）でデータを送る役割を持ちます。\n\t\t *\n\t\t * @typedef {Object} S3GLUniformBindFunctions\n\t\t * @property {function(WebGLUniformLocation, Int32Array):void}  uniform1iv  1次元整数配列を送信\n\t\t * @property {function(WebGLUniformLocation, Int32Array):void}  uniform2iv  2次元整数配列を送信\n\t\t * @property {function(WebGLUniformLocation, Int32Array):void}  uniform3iv  3次元整数配列を送信\n\t\t * @property {function(WebGLUniformLocation, Int32Array):void}  uniform4iv  4次元整数配列を送信\n\t\t * @property {function(WebGLUniformLocation, Float32Array):void} uniform1fv  1次元浮動小数点配列を送信\n\t\t * @property {function(WebGLUniformLocation, Float32Array):void} uniform2fv  2次元浮動小数点配列を送信\n\t\t * @property {function(WebGLUniformLocation, Float32Array):void} uniform3fv  3次元浮動小数点配列を送信\n\t\t * @property {function(WebGLUniformLocation, Float32Array):void} uniform4fv  4次元浮動小数点配列を送信\n\t\t * @property {function(WebGLUniformLocation, Float32Array):void} uniformMatrix2fv  2x2行列を送信\n\t\t * @property {function(WebGLUniformLocation, Float32Array):void} uniformMatrix3fv  3x3行列を送信\n\t\t * @property {function(WebGLUniformLocation, Float32Array):void} uniformMatrix4fv  4x4行列を送信\n\t\t * @property {function(WebGLUniformLocation, WebGLTexture):void} uniformSampler2D   2Dテクスチャ（sampler2D）を送信\n\t\t */\n\n\t\t/**\n\t\t * GLSLのuniform変数型ごとに適切なWebGLバインド関数を提供するオブジェクト\n\t\t * @type {S3GLUniformBindFunctions}\n\t\t */\n\t\tconst g = {\n\t\t\t/**\n\t\t\t * 1次元整数配列 uniform1iv\n\t\t\t * @param {WebGLUniformLocation} location\n\t\t\t * @param {Int32Array} value\n\t\t\t */\n\t\t\tuniform1iv: function (location, value) {\n\t\t\t\tif (sys.getGL()) {\n\t\t\t\t\tsys.getGL().uniform1iv(location, value);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * 2次元整数配列 uniform2iv\n\t\t\t * @param {WebGLUniformLocation} location\n\t\t\t * @param {Int32Array} value\n\t\t\t */\n\t\t\tuniform2iv: function (location, value) {\n\t\t\t\tif (sys.getGL()) {\n\t\t\t\t\tsys.getGL().uniform2iv(location, value);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * 3次元整数配列 uniform3iv\n\t\t\t * @param {WebGLUniformLocation} location\n\t\t\t * @param {Int32Array} value\n\t\t\t */\n\t\t\tuniform3iv: function (location, value) {\n\t\t\t\tif (sys.getGL()) {\n\t\t\t\t\tsys.getGL().uniform3iv(location, value);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * 4次元整数配列 uniform4iv\n\t\t\t * @param {WebGLUniformLocation} location\n\t\t\t * @param {Int32Array} value\n\t\t\t */\n\t\t\tuniform4iv: function (location, value) {\n\t\t\t\tif (sys.getGL()) {\n\t\t\t\t\tsys.getGL().uniform4iv(location, value);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * 1次元浮動小数点配列 uniform1fv\n\t\t\t * @param {WebGLUniformLocation} location\n\t\t\t * @param {Float32Array} value\n\t\t\t */\n\t\t\tuniform1fv: function (location, value) {\n\t\t\t\tif (sys.getGL()) {\n\t\t\t\t\tsys.getGL().uniform1fv(location, value);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * 2次元浮動小数点配列 uniform2fv\n\t\t\t * @param {WebGLUniformLocation} location\n\t\t\t * @param {Float32Array} value\n\t\t\t */\n\t\t\tuniform2fv: function (location, value) {\n\t\t\t\tif (sys.getGL()) {\n\t\t\t\t\tsys.getGL().uniform2fv(location, value);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * 3次元浮動小数点配列 uniform3fv\n\t\t\t * @param {WebGLUniformLocation} location\n\t\t\t * @param {Float32Array} value\n\t\t\t */\n\t\t\tuniform3fv: function (location, value) {\n\t\t\t\tif (sys.getGL()) {\n\t\t\t\t\tsys.getGL().uniform3fv(location, value);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * 4次元浮動小数点配列 uniform4fv\n\t\t\t * @param {WebGLUniformLocation} location\n\t\t\t * @param {Float32Array} value\n\t\t\t */\n\t\t\tuniform4fv: function (location, value) {\n\t\t\t\tif (sys.getGL()) {\n\t\t\t\t\tsys.getGL().uniform4fv(location, value);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * 2x2行列 uniformMatrix2fv\n\t\t\t * @param {WebGLUniformLocation} location\n\t\t\t * @param {Float32Array} value\n\t\t\t */\n\t\t\tuniformMatrix2fv: function (location, value) {\n\t\t\t\tif (sys.getGL()) {\n\t\t\t\t\tsys.getGL().uniformMatrix2fv(location, false, value);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * 3x3行列 uniformMatrix3fv\n\t\t\t * @param {WebGLUniformLocation} location\n\t\t\t * @param {Float32Array} value\n\t\t\t */\n\t\t\tuniformMatrix3fv: function (location, value) {\n\t\t\t\tif (sys.getGL()) {\n\t\t\t\t\tsys.getGL().uniformMatrix3fv(location, false, value);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * 4x4行列 uniformMatrix4fv\n\t\t\t * @param {WebGLUniformLocation} location\n\t\t\t * @param {Float32Array} value\n\t\t\t */\n\t\t\tuniformMatrix4fv: function (location, value) {\n\t\t\t\tif (sys.getGL()) {\n\t\t\t\t\tsys.getGL().uniformMatrix4fv(location, false, value);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * サンプラー2D（テクスチャ） uniformSampler2D\n\t\t\t * @param {WebGLUniformLocation} location\n\t\t\t * @param {WebGLTexture} value\n\t\t\t */\n\t\t\tuniformSampler2D: function (location, value) {\n\t\t\t\tconst gl = sys.getGL();\n\t\t\t\tif (gl) {\n\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + _this.activeTextureId);\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, value);\n\t\t\t\t\tgl.uniform1i(location, _this.activeTextureId);\n\t\t\t\t\t_this.activeTextureId++;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * GLSL型名ごとのWebGLバインド情報テーブル。\n\t\t * 各GLSL型（int, float, mat4, vec3, sampler2D等）に対し、\n\t\t * - glsltype: GLSL型名（\"vec3\" など）\n\t\t * - instance: 対応するTypedArray型またはImage（サンプラーの場合）\n\t\t * - size: 必要な要素数（配列長）\n\t\t * - btype: 内部的なデータ型種別（\"FLOAT\", \"INT\", \"TEXTURE\" など）\n\t\t * - bind: WebGLのuniformバインド関数（g内の該当関数を使用）\n\t\t * などの情報を保持します。\n\t\t *\n\t\t * @typedef {Object} S3GLProgramGLSLTypeInfo\n\t\t * @property {string} glsltype GLSL型名（例：\"vec3\"）\n\t\t * @property {(typeof Float32Array | typeof Int32Array | Image)} instance 対応TypedArrayコンストラクタまたはImage\n\t\t * @property {number} size 要素数（floatなら1, mat4なら16など）\n\t\t * @property {string} btype 内部データ型区分（\"FLOAT\", \"INT\", \"TEXTURE\"等）\n\t\t * @property {function(WebGLUniformLocation, *):void} bind uniform変数へバインドするための関数\n\t\t */\n\n\t\t/**\n\t\t * GLSL型ごとのWebGL情報テーブル。\n\t\t * 変数型をキーとし、型ごとの詳細プロパティ（GLSL型名/配列型/要素数/バインド関数など）を格納します。\n\t\t * @type {Object<string, S3GLProgramGLSLTypeInfo>}\n\t\t */\n\t\tconst info = {\n\t\t\tint: { glsltype: \"int\", instance: Int32Array, size: 1, btype: \"INT\", bind: g.uniform1iv },\n\t\t\tfloat: { glsltype: \"float\", instance: Float32Array, size: 1, btype: \"FLOAT\", bind: g.uniform1fv },\n\t\t\tbool: { glsltype: \"bool\", instance: Int32Array, size: 1, btype: \"INT\", bind: g.uniform1iv },\n\t\t\tmat2: { glsltype: \"mat2\", instance: Float32Array, size: 4, btype: \"FLOAT\", bind: g.uniformMatrix2fv },\n\t\t\tmat3: { glsltype: \"mat3\", instance: Float32Array, size: 9, btype: \"FLOAT\", bind: g.uniformMatrix3fv },\n\t\t\tmat4: { glsltype: \"mat4\", instance: Float32Array, size: 16, btype: \"FLOAT\", bind: g.uniformMatrix4fv },\n\t\t\tvec2: { glsltype: \"vec2\", instance: Float32Array, size: 2, btype: \"FLOAT\", bind: g.uniform2fv },\n\t\t\tvec3: { glsltype: \"vec3\", instance: Float32Array, size: 3, btype: \"FLOAT\", bind: g.uniform3fv },\n\t\t\tvec4: { glsltype: \"vec4\", instance: Float32Array, size: 4, btype: \"FLOAT\", bind: g.uniform4fv },\n\t\t\tivec2: { glsltype: \"ivec2\", instance: Int32Array, size: 2, btype: \"INT\", bind: g.uniform2iv },\n\t\t\tivec3: { glsltype: \"ivec3\", instance: Int32Array, size: 3, btype: \"INT\", bind: g.uniform3iv },\n\t\t\tivec4: { glsltype: \"ivec4\", instance: Int32Array, size: 4, btype: \"INT\", bind: g.uniform4iv },\n\t\t\tbvec2: { glsltype: \"bvec2\", instance: Int32Array, size: 2, btype: \"INT\", bind: g.uniform2iv },\n\t\t\tbvec3: { glsltype: \"bvec3\", instance: Int32Array, size: 3, btype: \"INT\", bind: g.uniform3iv },\n\t\t\tbvec4: { glsltype: \"bvec4\", instance: Int32Array, size: 4, btype: \"INT\", bind: g.uniform4iv },\n\t\t\tsampler2D: { glsltype: \"sampler2D\", instance: Image, size: 1, btype: \"TEXTURE\", bind: g.uniformSampler2D },\n\t\t\tsamplerCube: { glsltype: \"samplerCube\", instance: Image, size: 1, btype: \"TEXTURE\", bind: null }\n\t\t};\n\n\t\t/**\n\t\t * ソースコードから解析した変数のデータ\n\t\t *\n\t\t * - info オブジェクトのキー（\"int\", \"float\", \"vec3\"など）を使用して、いくつかのデータはコピーされる\n\t\t *\n\t\t * @typedef {Object} S3GLShaderData\n\t\t * @property {string} glsltype GLSL型名（例：\"vec3\"）\n\t\t * @property {(typeof Float32Array | typeof Int32Array | Image)} instance 対応TypedArrayコンストラクタまたはImage\n\t\t * @property {number} size 要素数（floatなら1, mat4なら16など）\n\t\t * @property {string} btype 内部データ型区分（\"FLOAT\", \"INT\", \"TEXTURE\"等）\n\t\t * @property {function(WebGLUniformLocation, *):void} bind uniform変数へバインドするための関数\n\t\t * @property {string} name 変数名（例：\"M\"）\n\t\t * @property {string} modifiers 宣言修飾子（例：\"uniform\"）\n\t\t * @property {boolean} is_array 配列かどうか（例：`true`なら配列型）\n\t\t * @property {Array<GLint|WebGLUniformLocation>} location\n\t\t */\n\n\t\t/**\n\t\t * 頂点・フラグメントシェーダ内のattribute/uniform宣言を自動解析し、\n\t\t * 変数型・ロケーションなどを内部情報として登録します。\n\t\t * （通常はgetProgramで自動的に呼び出されます）\n\t\t * @param {string} code シェーダーのGLSLソース\n\t\t * @param {Object<string, S3GLShaderData>} variable 内部変数情報管理オブジェクト\n\t\t * @private\n\t\t */\n\t\tthis.analysisShader = function (code, variable) {\n\t\t\t// コメントを除去する\n\t\t\tcode = code.replace(/\\/\\/.*/g, \"\");\n\t\t\tcode = code.replace(/\\/\\*([^*]|\\*[^/])*\\*\\//g, \"\");\n\t\t\t// 1行ずつ解析\n\t\t\tconst codelines = code.split(\"\\n\");\n\t\t\tfor (let i = 0; i < codelines.length; i++) {\n\t\t\t\t// uniform vec4 lights[4]; とすると、 uniform,vec4,lights,[4]で区切られる\n\t\t\t\tconst data = codelines[i].match(/(attribute|uniform)\\s+(\\w+)\\s+(\\w+)\\s*(\\[\\s*\\w+\\s*\\])?;/);\n\t\t\t\tif (data === null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// 見つけたら変数名や、型を記録しておく\n\t\t\t\t// 配列数の調査は、定数などを使用されると簡単に調べられないため取得できない\n\t\t\t\t// そのため自動でテストできないため、bindする際に、正しい配列数の配列をbindすること\n\n\t\t\t\t/**\n\t\t\t\t * uniform or attribute\n\t\t\t\t */\n\t\t\t\tconst text_space = data[1];\n\n\t\t\t\t/**\n\t\t\t\t * vec4 ...\n\t\t\t\t */\n\t\t\t\tconst text_type = data[2];\n\n\t\t\t\t/**\n\t\t\t\t * 変数名\n\t\t\t\t */\n\t\t\t\tconst text_variable = data[3];\n\n\t\t\t\t/**\n\t\t\t\t * 配列数\n\t\t\t\t */\n\t\t\t\tconst text_array = data[4];\n\n\t\t\t\t/**\n\t\t\t\t * 配列かどうか\n\t\t\t\t */\n\t\t\t\tconst is_array = text_array !== undefined;\n\n\t\t\t\t// 型に応じたテンプレートを取得する\n\t\t\t\t// data[1] ... uniform, data[2] ... mat4, data[3] ... M\n\t\t\t\tconst targetinfo = info[text_type];\n\n\t\t\t\tvariable[text_variable] = {\n\t\t\t\t\tglsltype: targetinfo.glsltype, // vec3, mat4 など\n\t\t\t\t\tinstance: targetinfo.instance, // Float32Array, Int32Array, Image など\n\t\t\t\t\tsize: targetinfo.size, // 1, 2, 3, 4, 16 など\n\t\t\t\t\tbtype: targetinfo.btype, // FLOAT, INT, TEXTURE など\n\t\t\t\t\tbind: targetinfo.bind, // bind関数（uniform1fvなど）\n\t\t\t\t\tname: text_variable, // 変数名（例：\"M\"）\n\t\t\t\t\tmodifiers: text_space, // uniform, attribute などの修飾子\n\t\t\t\t\tis_array: is_array, // 配列かどうか\n\t\t\t\t\tlocation: [] // ロケーション番号（GLのuniformLocationやattributeLocation）\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn;\n\t\t};\n\t}\n\n\t/**\n\t * 使用するアクティブテクスチャ番号をリセットします。\n\t * テクスチャbind前に毎回呼び出し、TEXTUREユニットIDを初期化します。\n\t */\n\tresetActiveTextureId() {\n\t\tthis.activeTextureId = 0;\n\t}\n\n\t/**\n\t * プログラムがすでにGL上でリンク済みかどうか判定します。\n\t * @returns {boolean} リンク済みならtrue\n\t */\n\tisLinked() {\n\t\treturn this.is_linked;\n\t}\n\n\t/**\n\t * プログラム・シェーダーを全て解放し、GLリソースも破棄します。\n\t * 以後このインスタンスは再利用できません。\n\t * @returns {boolean} 正常終了時true、GL未設定時false\n\t */\n\tdispose() {\n\t\tconst gl = this.sys.getGL();\n\t\tif (gl === null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.is_linked) {\n\t\t\tthis.disuseProgram();\n\t\t\tthis.sys.glfunc.deleteProgram(this.program, this.vertex.getShader(), this.fragment.getShader());\n\t\t\tthis.program = null;\n\t\t\tthis.is_linked = false;\n\t\t}\n\t\tif (this.vertex !== null) {\n\t\t\tthis.vertex.dispose();\n\t\t\tthis.vertex = null;\n\t\t}\n\t\tif (this.fragment !== null) {\n\t\t\tthis.fragment.dispose();\n\t\t\tthis.fragment = null;\n\t\t}\n\t\tthis._init(this.sys, this.id);\n\t\treturn true;\n\t}\n\n\t/**\n\t * 頂点シェーダを設定します。既存のリンク状態なら設定不可。\n\t * @param {string} shader_code GLSLソースコードまたはURL\n\t * @returns {boolean} 成功時true、リンク済みまたはDL中はfalse\n\t */\n\tsetVertexShader(shader_code) {\n\t\tif (this.isLinked()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.vertex !== null) {\n\t\t\tthis.vertex.dispose();\n\t\t\tthis.vertex = null;\n\t\t}\n\t\tthis.vertex = new S3GLShader(this.sys, shader_code);\n\t\tthis.is_error = false;\n\t\treturn true;\n\t}\n\n\t/**\n\t * フラグメントシェーダを設定します。既存のリンク状態なら設定不可。\n\t * @param {string} shader_code GLSLソースコードまたはURL\n\t * @returns {boolean} 成功時true、リンク済みまたはDL中はfalse\n\t */\n\tsetFragmentShader(shader_code) {\n\t\tif (this.isLinked()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.fragment !== null) {\n\t\t\tthis.fragment.dispose();\n\t\t\tthis.fragment = null;\n\t\t}\n\t\tthis.fragment = new S3GLShader(this.sys, shader_code);\n\t\tthis.is_error = false;\n\t\treturn true;\n\t}\n\n\t/**\n\t * このプログラムをGLでuseProgram（アクティブ化）します。\n\t * @returns {boolean} 成功時true\n\t */\n\tuseProgram() {\n\t\tif (!this.isLinked()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst program = this.getProgram();\n\t\tif (program && this.sys.getGL()) {\n\t\t\tthis.sys.getGL().useProgram(program);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * このプログラムの有効化状態を解除します（バッファ属性解放など）。\n\t * @returns {boolean} 成功時true\n\t */\n\tdisuseProgram() {\n\t\tif (!this.isLinked()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst gl = this.sys.getGL();\n\t\tif (gl) {\n\t\t\t// enable化したデータを解放する\n\t\t\tfor (const key in this.enable_vertex_number) {\n\t\t\t\tif (typeof key === \"number\") {\n\t\t\t\t\tgl.disableVertexAttribArray(key);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.enable_vertex_number = {};\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * プログラムのGLオブジェクト（WebGLProgram）を取得・生成します。\n\t * シェーダー・GLの準備やリンク状況など全て検証し、問題なければ生成・返却します。\n\t * @returns {?WebGLProgram} GLプログラムオブジェクト（未生成・エラー時はnull）\n\t */\n\tgetProgram() {\n\t\tconst gl = this.sys.getGL();\n\t\t// 1度でもエラーが発生したか、glキャンバスの設定をしていない場合\n\t\tif (gl === null || this.is_error) {\n\t\t\treturn null;\n\t\t}\n\t\t// ダウンロード中なら無視する\n\t\tif (this.isDLVertex || this.isDLFragment) {\n\t\t\treturn null;\n\t\t}\n\t\t// すでにリンク済みのがあれば返す\n\t\tif (this.isLinked()) {\n\t\t\treturn this.program;\n\t\t}\n\t\t// シェーダーを取得する\n\t\tif (this.vertex === null) {\n\t\t\tconsole.log(\"do not set VERTEX_SHADER\");\n\t\t\tthis.is_error = true;\n\t\t\treturn null;\n\t\t}\n\t\tif (this.fragment === null) {\n\t\t\tconsole.log(\"do not set FRAGMENT_SHADER\");\n\t\t\tthis.is_error = true;\n\t\t\treturn null;\n\t\t}\n\t\tconst is_error_vertex = this.vertex.isError();\n\t\tconst is_error_fragment = this.fragment.isError();\n\t\tif (is_error_vertex || is_error_fragment) {\n\t\t\tconsole.log(\"shader compile error\");\n\t\t\tthis.is_error = true;\n\t\t\treturn null;\n\t\t}\n\t\tconst shader_vertex = this.vertex.getShader();\n\t\tconst shader_fragment = this.fragment.getShader();\n\t\tif (shader_vertex === null || shader_fragment === null) {\n\t\t\t// まだロードが終わってない可能性あり\n\t\t\treturn null;\n\t\t}\n\t\tif (this.vertex.getShaderType() !== gl.VERTEX_SHADER) {\n\t\t\tconsole.log(\"VERTEX_SHADER is not VERTEX_SHADER\");\n\t\t\tthis.is_error = true;\n\t\t\treturn null;\n\t\t}\n\t\tif (this.fragment.getShaderType() !== gl.FRAGMENT_SHADER) {\n\t\t\tconsole.log(\"FRAGMENT_SHADER is not FRAGMENT_SHADER\");\n\t\t\tthis.is_error = true;\n\t\t\treturn null;\n\t\t}\n\t\t// 取得したシェーダーを用いてプログラムをリンクする\n\t\tconst data = this.sys.glfunc.createProgram(shader_vertex, shader_fragment);\n\t\tif (data.is_error) {\n\t\t\tthis.is_error = true;\n\t\t\treturn null;\n\t\t}\n\t\t// リンクが成功したらプログラムの解析しておく\n\t\tthis.is_linked = true;\n\t\tthis.program = data.program;\n\t\tthis.analysisShader(this.vertex.getCode(), this.variable);\n\t\tthis.analysisShader(this.fragment.getCode(), this.variable);\n\t\treturn this.program;\n\t}\n\n\t/**\n\t * attribute/uniform変数にデータをバインドします。\n\t * シェーダー内で使用されている変数名に対し、値・バッファ・テクスチャ等を型に応じて結びつけます。\n\t * @param {string} name 変数名（シェーダー内で宣言された名前）\n\t * @param {S3GLProgramBindInputData} data バインドしたい値やバッファ、テクスチャなど\n\t * @returns {boolean} 正常にバインドできればtrue\n\t */\n\tbindData(name, data) {\n\t\tif (!this.isLinked()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst gl = this.sys.getGL();\n\t\tconst prg = this.getProgram();\n\t\tconst variable = this.variable[name];\n\n\t\t// ---- check Location ----\n\t\tif (variable === undefined) {\n\t\t\t// シェーダーでは利用していないものをbindしようとした。\n\t\t\treturn false;\n\t\t}\n\t\t// 長さが0なら位置が未調査なので調査する\n\t\tif (variable.location.length === 0) {\n\t\t\tif (variable.modifiers === \"attribute\") {\n\t\t\t\tvariable.location[0] = gl.getAttribLocation(prg, name);\n\t\t\t} else {\n\t\t\t\tif (!variable.is_array) {\n\t\t\t\t\tvariable.location[0] = gl.getUniformLocation(prg, name);\n\t\t\t\t} else {\n\t\t\t\t\tif (Array.isArray(data)) {\n\t\t\t\t\t\t// 配列の場合は、配列の数だけlocationを調査する\n\t\t\t\t\t\t// 予め、シェーダー内の配列数と一致させておくこと\n\t\t\t\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\t\t\t\tvariable.location[i] = gl.getUniformLocation(prg, name + \"[\" + i + \"]\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (variable.location[0] === -1) {\n\t\t\t// 変数は宣言されているが、関数の中で使用していないと -1 がかえる\n\t\t\treturn false;\n\t\t}\n\t\t// data が bind できる形になっているか調査する\n\n\t\t// ---- check Type ----\n\t\t// glslの型をチェックして自動型変換する\n\n\t\t/**\n\t\t * @typedef {Int32Array|Float32Array|WebGLBuffer|WebGLTexture} S3GLProgramBindData\n\t\t */\n\n\t\t/**\n\t\t * WebGL用のuniform/attributeバインド値として、データ型を自動変換する補助関数。\n\t\t * シェーダー変数の型（glsltype）に応じて、渡された値を適切なTypedArrayや配列に整形します。\n\t\t * 型不一致や未対応型は例外となります。\n\t\t *\n\t\t * @param {Int32Array|Float32Array|WebGLBuffer|WebGLTexture|S3GLArray|S3Matrix|number} data\n\t\t * @returns {S3GLProgramBindData}\n\t\t */\n\t\tconst toArraydata = function (data) {\n\t\t\tif (data instanceof WebGLBuffer) {\n\t\t\t\t// VBO型は、無視する\n\t\t\t\tif (variable.modifiers === \"attribute\") {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (data instanceof WebGLTexture) {\n\t\t\t\t// テクスチャ型なら無視する\n\t\t\t\tif (variable.glsltype === \"sampler2D\") {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (data instanceof variable.instance) {\n\t\t\t\t// 型と同じインスタンスであるため問題なし\n\t\t\t\treturn data;\n\t\t\t}\n\t\t\t// GL用の型\n\t\t\tif (data instanceof S3GLArray) {\n\t\t\t\tif (variable.glsltype === data.glsltype) {\n\t\t\t\t\treturn data.data;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// 入力型とGLSLが数値系であれば\n\t\t\tif (variable.instance === Float32Array || variable.instance === Int32Array) {\n\t\t\t\t// 入力型が行列型で\n\t\t\t\tif (data instanceof S3Matrix) {\n\t\t\t\t\tif (variable.glsltype === \"mat2\" || variable.glsltype === \"mat3\" || variable.glsltype === \"mat4\") {\n\t\t\t\t\t\treturn data.toInstanceArray(variable.instance, variable.size);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 入力型がベクトル型\n\t\t\t\tif (data instanceof S3Vector) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tvariable.glsltype === \"vec2\" ||\n\t\t\t\t\t\tvariable.glsltype === \"vec3\" ||\n\t\t\t\t\t\tvariable.glsltype === \"vec4\" ||\n\t\t\t\t\t\tvariable.glsltype === \"ivec2\" ||\n\t\t\t\t\t\tvariable.glsltype === \"ivec3\" ||\n\t\t\t\t\t\tvariable.glsltype === \"ivec4\" ||\n\t\t\t\t\t\tvariable.glsltype === \"bvec2\" ||\n\t\t\t\t\t\tvariable.glsltype === \"bvec3\" ||\n\t\t\t\t\t\tvariable.glsltype === \"bvec4\"\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn data.toInstanceArray(variable.instance, variable.size);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 入力型が数値型\n\t\t\t\tif (typeof data === \"number\") {\n\t\t\t\t\tif (variable.glsltype === \"int\" || variable.glsltype === \"float\" || variable.glsltype === \"bool\") {\n\t\t\t\t\t\treturn new variable.instance([data]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(data);\n\t\t\tthrow \"not toArraydata\";\n\t\t};\n\n\t\t// 引数の値をArray型に統一化する\n\t\tif (!variable.is_array) {\n\t\t\tdata = toArraydata(data);\n\t\t} else {\n\t\t\tif (Array.isArray(data)) {\n\t\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\t\tif (variable.location[i] !== -1) {\n\t\t\t\t\t\t// 配列の値が NULL になっているものは調査しない\n\t\t\t\t\t\tif (data[i] !== null) {\n\t\t\t\t\t\t\tdata[i] = toArraydata(data[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// ---- bind Data ----\n\t\t// 装飾子によって bind する方法を変更する\n\t\tif (variable.modifiers === \"attribute\") {\n\t\t\tif (typeof variable.location[0] === \"number\") {\n\t\t\t\t// bindしたいデータ\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, data);\n\t\t\t\t// 有効化していない場合は有効化する\n\t\t\t\tif (!this.enable_vertex_number[variable.location[0]]) {\n\t\t\t\t\tgl.enableVertexAttribArray(variable.location[0]);\n\t\t\t\t\tthis.enable_vertex_number[variable.location[0]] = true;\n\t\t\t\t}\n\t\t\t\t// bind。型は適当に設定\n\t\t\t\tgl.vertexAttribPointer(\n\t\t\t\t\tvariable.location[0],\n\t\t\t\t\tvariable.size,\n\t\t\t\t\tvariable.btype === \"FLOAT\" ? gl.FLOAT : gl.SHORT,\n\t\t\t\t\tfalse,\n\t\t\t\t\t0,\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthrow \"error location is not number\";\n\t\t\t}\n\t\t} else {\n\t\t\t// uniform の設定\n\t\t\tif (!variable.is_array) {\n\t\t\t\tvariable.bind(variable.location[0], data);\n\t\t\t} else {\n\t\t\t\t// 配列の場合は、配列の数だけbindする\n\t\t\t\tif (Array.isArray(data)) {\n\t\t\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\t\t\tif (variable.location[i] !== -1) {\n\t\t\t\t\t\t\t// 配列の値が NULL になっているものはbindしない\n\t\t\t\t\t\t\tif (data[i] !== null) {\n\t\t\t\t\t\t\t\tvariable.bind(variable.location[i], data[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow \"error data is not Array\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * メッシュ（S3GLMesh）全体をこのプログラムにバインドします。\n\t * 内部でattribute変数とVBO/IBOなどを結び付け、必要なバッファ設定も行います。\n\t * @param {S3GLMesh} s3mesh S3GLMesh インスタンス\n\t * @returns {number} IBOのインデックス数（drawElements用）\n\t */\n\tbindMesh(s3mesh) {\n\t\tif (!this.isLinked()) {\n\t\t\t// programが未作成\n\t\t\treturn 0;\n\t\t}\n\t\tconst gl = this.sys.getGL();\n\t\tif (gl === null) {\n\t\t\t// glが用意されていない\n\t\t\treturn 0;\n\t\t}\n\t\tconst gldata = s3mesh.getGLData();\n\t\tif (gldata === null) {\n\t\t\t// 入力値が用意されていない\n\t\t\treturn 0;\n\t\t}\n\t\t// インデックスをセット\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gldata.ibo.data);\n\t\tconst index_length = gldata.ibo.array_length;\n\t\t// 頂点をセット(あらかじめコードから解析した attribute について埋める)\n\t\tfor (const key in this.variable) {\n\t\t\tif (this.variable[key].modifiers === \"uniform\") {\n\t\t\t\t// uniform は共通設定なので省略\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// 例えば、vboのリストにあるが、gldata内に情報をもっていない場合がある\n\t\t\t// それは、カメラ用の行列などがあげられる。\n\t\t\t// 逆に、gldata内に情報をもっているが、vbo内に定義されていないのであれば、\n\t\t\t// 使用しない。\n\t\t\tif (gldata.vbo[key] === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.bindData(key, gldata.vbo[key].data);\n\t\t}\n\t\t// 戻り値でインデックスの長さを返す\n\t\t// この長さは、drawElementsで必要のため\n\t\treturn index_length;\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/gl/S3GLProgram.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 399,
    "kind": "typedef",
    "name": "S3GLProgramBindInputDataSingle",
    "memberof": "src/gl/S3GLProgram.js",
    "static": true,
    "longname": "src/gl/S3GLProgram.js~S3GLProgramBindInputDataSingle",
    "access": "public",
    "description": "",
    "type": {
      "types": [
        "Int32Array",
        "Float32Array",
        "WebGLBuffer",
        "WebGLTexture",
        "S3GLArray",
        "S3Matrix",
        "S3Vector",
        "number"
      ],
      "optional": false,
      "name": "S3GLProgramBindInputDataSingle"
    }
  },
  {
    "__docId__": 400,
    "kind": "typedef",
    "name": "S3GLProgramBindInputData",
    "memberof": "src/gl/S3GLProgram.js",
    "static": true,
    "longname": "src/gl/S3GLProgram.js~S3GLProgramBindInputData",
    "access": "public",
    "description": "",
    "type": {
      "types": [
        "S3GLProgramBindInputDataSingle",
        "Array<S3GLProgramBindInputDataSingle>"
      ],
      "optional": false,
      "name": "S3GLProgramBindInputData"
    }
  },
  {
    "__docId__": 401,
    "kind": "typedef",
    "name": "S3GLProgramBindInputDataTable",
    "memberof": "src/gl/S3GLProgram.js",
    "static": true,
    "longname": "src/gl/S3GLProgram.js~S3GLProgramBindInputDataTable",
    "access": "public",
    "description": "",
    "type": {
      "types": [
        "Object.<string, S3GLProgramBindInputData>"
      ],
      "optional": false,
      "name": "S3GLProgramBindInputDataTable"
    }
  },
  {
    "__docId__": 402,
    "kind": "typedef",
    "name": "S3GLProgramUniforms",
    "memberof": "src/gl/S3GLProgram.js",
    "static": true,
    "longname": "src/gl/S3GLProgram.js~S3GLProgramUniforms",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "S3GLProgramBindInputDataTable"
        ],
        "spread": false,
        "optional": false,
        "name": "uniforms",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3GLProgramUniforms"
    }
  },
  {
    "__docId__": 403,
    "kind": "class",
    "name": "S3GLProgram",
    "memberof": "src/gl/S3GLProgram.js",
    "static": true,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/gl/S3GLProgram.js",
    "importStyle": "S3GLProgram",
    "description": "WebGLのプログラム（Program）管理クラス。\n頂点・フラグメント2つのシェーダーと、それらをリンクしたGLプログラムオブジェクトを保持し、\n各種attribute/uniform変数とのバインドや、プログラム切替・破棄などの管理を担います。\nS3GLSystem経由でのWebGL描画制御のコアとなります。",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 404,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#constructor",
    "access": "public",
    "description": "WebGLプログラムを初期化します。",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3GLSystem"
        ],
        "spread": false,
        "optional": false,
        "name": "sys",
        "description": "GLシステムインスタンス"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "プログラム一意識別ID"
      }
    ]
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "_init",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#_init",
    "access": "private",
    "description": "プログラムの内部初期化。\n変数情報・シェーダー状態・リンク済みフラグ等をリセットします。",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3GLSystem"
        ],
        "spread": false,
        "optional": false,
        "name": "sys",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 406,
    "kind": "member",
    "name": "id",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#id",
    "access": "public",
    "description": "プログラム一意ID",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 407,
    "kind": "member",
    "name": "sys",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#sys",
    "access": "public",
    "description": "GLシステムインスタンス",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "S3GLSystem"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 408,
    "kind": "member",
    "name": "vertex",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#vertex",
    "access": "public",
    "description": "頂点シェーダインスタンス",
    "lineNumber": 68,
    "type": {
      "nullable": true,
      "types": [
        "S3GLShader"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "fragment",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#fragment",
    "access": "public",
    "description": "フラグメントシェーダインスタンス",
    "lineNumber": 74,
    "type": {
      "nullable": true,
      "types": [
        "S3GLShader"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "isDLVertex",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#isDLVertex",
    "access": "public",
    "description": "頂点シェーダがダウンロード中かどうか",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 411,
    "kind": "member",
    "name": "isDLFragment",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#isDLFragment",
    "access": "public",
    "description": "フラグメントシェーダがダウンロード中かどうか",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 412,
    "kind": "member",
    "name": "program",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#program",
    "access": "public",
    "description": "リンク済みGLプログラム",
    "lineNumber": 92,
    "type": {
      "nullable": true,
      "types": [
        "WebGLProgram"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "is_linked",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#is_linked",
    "access": "public",
    "description": "GL上でリンク済みかどうか",
    "lineNumber": 98,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 414,
    "kind": "member",
    "name": "is_error",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#is_error",
    "access": "public",
    "description": "エラー発生済みかどうか",
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "enable_vertex_number",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#enable_vertex_number",
    "access": "public",
    "description": "有効化済みのattributeロケーション番号管理",
    "lineNumber": 110,
    "type": {
      "nullable": null,
      "types": [
        "Object<number, boolean>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 416,
    "kind": "member",
    "name": "variable",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#variable",
    "access": "public",
    "description": "シェーダ変数管理構造体",
    "lineNumber": 116,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, S3GLShaderData>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 417,
    "kind": "member",
    "name": "activeTextureId",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#activeTextureId",
    "access": "public",
    "description": "次にバインド予定のアクティブテクスチャ番号",
    "lineNumber": 124,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 418,
    "kind": "typedef",
    "name": "S3GLUniformBindFunctions",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "static": true,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram.S3GLUniformBindFunctions",
    "access": "public",
    "description": "WebGLのuniform変数バインド用関数群。\n各関数はGLSLの型に応じて正しいuniform関数（uniform1iv/uniformMatrix4fv等）でデータを送る役割を持ちます。",
    "properties": [
      {
        "nullable": null,
        "types": [
          "function(WebGLUniformLocation, Int32Array):void"
        ],
        "spread": false,
        "optional": false,
        "name": "uniform1iv",
        "description": "1次元整数配列を送信"
      },
      {
        "nullable": null,
        "types": [
          "function(WebGLUniformLocation, Int32Array):void"
        ],
        "spread": false,
        "optional": false,
        "name": "uniform2iv",
        "description": "2次元整数配列を送信"
      },
      {
        "nullable": null,
        "types": [
          "function(WebGLUniformLocation, Int32Array):void"
        ],
        "spread": false,
        "optional": false,
        "name": "uniform3iv",
        "description": "3次元整数配列を送信"
      },
      {
        "nullable": null,
        "types": [
          "function(WebGLUniformLocation, Int32Array):void"
        ],
        "spread": false,
        "optional": false,
        "name": "uniform4iv",
        "description": "4次元整数配列を送信"
      },
      {
        "nullable": null,
        "types": [
          "function(WebGLUniformLocation, Float32Array):void"
        ],
        "spread": false,
        "optional": false,
        "name": "uniform1fv",
        "description": "1次元浮動小数点配列を送信"
      },
      {
        "nullable": null,
        "types": [
          "function(WebGLUniformLocation, Float32Array):void"
        ],
        "spread": false,
        "optional": false,
        "name": "uniform2fv",
        "description": "2次元浮動小数点配列を送信"
      },
      {
        "nullable": null,
        "types": [
          "function(WebGLUniformLocation, Float32Array):void"
        ],
        "spread": false,
        "optional": false,
        "name": "uniform3fv",
        "description": "3次元浮動小数点配列を送信"
      },
      {
        "nullable": null,
        "types": [
          "function(WebGLUniformLocation, Float32Array):void"
        ],
        "spread": false,
        "optional": false,
        "name": "uniform4fv",
        "description": "4次元浮動小数点配列を送信"
      },
      {
        "nullable": null,
        "types": [
          "function(WebGLUniformLocation, Float32Array):void"
        ],
        "spread": false,
        "optional": false,
        "name": "uniformMatrix2fv",
        "description": "2x2行列を送信"
      },
      {
        "nullable": null,
        "types": [
          "function(WebGLUniformLocation, Float32Array):void"
        ],
        "spread": false,
        "optional": false,
        "name": "uniformMatrix3fv",
        "description": "3x3行列を送信"
      },
      {
        "nullable": null,
        "types": [
          "function(WebGLUniformLocation, Float32Array):void"
        ],
        "spread": false,
        "optional": false,
        "name": "uniformMatrix4fv",
        "description": "4x4行列を送信"
      },
      {
        "nullable": null,
        "types": [
          "function(WebGLUniformLocation, WebGLTexture):void"
        ],
        "spread": false,
        "optional": false,
        "name": "uniformSampler2D",
        "description": "2Dテクスチャ（sampler2D）を送信"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3GLUniformBindFunctions"
    }
  },
  {
    "__docId__": 419,
    "kind": "typedef",
    "name": "S3GLProgramGLSLTypeInfo",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "static": true,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram.S3GLProgramGLSLTypeInfo",
    "access": "public",
    "description": "GLSL型名ごとのWebGLバインド情報テーブル。\n各GLSL型（int, float, mat4, vec3, sampler2D等）に対し、\n- glsltype: GLSL型名（\"vec3\" など）\n- instance: 対応するTypedArray型またはImage（サンプラーの場合）\n- size: 必要な要素数（配列長）\n- btype: 内部的なデータ型種別（\"FLOAT\", \"INT\", \"TEXTURE\" など）\n- bind: WebGLのuniformバインド関数（g内の該当関数を使用）\nなどの情報を保持します。",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "glsltype",
        "description": "GLSL型名（例：\"vec3\"）"
      },
      {
        "nullable": null,
        "types": [
          "typeof Float32Array ",
          " typeof Int32Array ",
          " Image"
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": "対応TypedArrayコンストラクタまたはImage"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "要素数（floatなら1, mat4なら16など）"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "btype",
        "description": "内部データ型区分（\"FLOAT\", \"INT\", \"TEXTURE\"等）"
      },
      {
        "nullable": null,
        "types": [
          "function(WebGLUniformLocation, *):void"
        ],
        "spread": false,
        "optional": false,
        "name": "bind",
        "description": "uniform変数へバインドするための関数"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3GLProgramGLSLTypeInfo"
    }
  },
  {
    "__docId__": 420,
    "kind": "typedef",
    "name": "S3GLShaderData",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "static": true,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram.S3GLShaderData",
    "access": "public",
    "description": "ソースコードから解析した変数のデータ\n\n- info オブジェクトのキー（\"int\", \"float\", \"vec3\"など）を使用して、いくつかのデータはコピーされる",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "glsltype",
        "description": "GLSL型名（例：\"vec3\"）"
      },
      {
        "nullable": null,
        "types": [
          "typeof Float32Array ",
          " typeof Int32Array ",
          " Image"
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": "対応TypedArrayコンストラクタまたはImage"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "要素数（floatなら1, mat4なら16など）"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "btype",
        "description": "内部データ型区分（\"FLOAT\", \"INT\", \"TEXTURE\"等）"
      },
      {
        "nullable": null,
        "types": [
          "function(WebGLUniformLocation, *):void"
        ],
        "spread": false,
        "optional": false,
        "name": "bind",
        "description": "uniform変数へバインドするための関数"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "変数名（例：\"M\"）"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "modifiers",
        "description": "宣言修飾子（例：\"uniform\"）"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "is_array",
        "description": "配列かどうか（例：`true`なら配列型）"
      },
      {
        "nullable": null,
        "types": [
          "Array<GLint|WebGLUniformLocation>"
        ],
        "spread": false,
        "optional": false,
        "name": "location",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3GLShaderData"
    }
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "resetActiveTextureId",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#resetActiveTextureId",
    "access": "public",
    "description": "使用するアクティブテクスチャ番号をリセットします。\nテクスチャbind前に毎回呼び出し、TEXTUREユニットIDを初期化します。",
    "lineNumber": 420,
    "params": [],
    "return": null
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "isLinked",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#isLinked",
    "access": "public",
    "description": "プログラムがすでにGL上でリンク済みかどうか判定します。",
    "lineNumber": 428,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} リンク済みならtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "リンク済みならtrue"
    },
    "params": []
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "dispose",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#dispose",
    "access": "public",
    "description": "プログラム・シェーダーを全て解放し、GLリソースも破棄します。\n以後このインスタンスは再利用できません。",
    "lineNumber": 437,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 正常終了時true、GL未設定時false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "正常終了時true、GL未設定時false"
    },
    "params": []
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "setVertexShader",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#setVertexShader",
    "access": "public",
    "description": "頂点シェーダを設定します。既存のリンク状態なら設定不可。",
    "lineNumber": 465,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 成功時true、リンク済みまたはDL中はfalse"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "shader_code",
        "description": "GLSLソースコードまたはURL"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "成功時true、リンク済みまたはDL中はfalse"
    }
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "setFragmentShader",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#setFragmentShader",
    "access": "public",
    "description": "フラグメントシェーダを設定します。既存のリンク状態なら設定不可。",
    "lineNumber": 483,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 成功時true、リンク済みまたはDL中はfalse"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "shader_code",
        "description": "GLSLソースコードまたはURL"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "成功時true、リンク済みまたはDL中はfalse"
    }
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "useProgram",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#useProgram",
    "access": "public",
    "description": "このプログラムをGLでuseProgram（アクティブ化）します。",
    "lineNumber": 500,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 成功時true"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "成功時true"
    },
    "params": []
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "disuseProgram",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#disuseProgram",
    "access": "public",
    "description": "このプログラムの有効化状態を解除します（バッファ属性解放など）。",
    "lineNumber": 515,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 成功時true"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "成功時true"
    },
    "params": []
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "getProgram",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#getProgram",
    "access": "public",
    "description": "プログラムのGLオブジェクト（WebGLProgram）を取得・生成します。\nシェーダー・GLの準備やリンク状況など全て検証し、問題なければ生成・返却します。",
    "lineNumber": 537,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{?WebGLProgram} GLプログラムオブジェクト（未生成・エラー時はnull）"
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "WebGLProgram"
      ],
      "spread": false,
      "description": "GLプログラムオブジェクト（未生成・エラー時はnull）"
    },
    "params": []
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "bindData",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#bindData",
    "access": "public",
    "description": "attribute/uniform変数にデータをバインドします。\nシェーダー内で使用されている変数名に対し、値・バッファ・テクスチャ等を型に応じて結びつけます。",
    "lineNumber": 606,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 正常にバインドできればtrue"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "変数名（シェーダー内で宣言された名前）"
      },
      {
        "nullable": null,
        "types": [
          "S3GLProgramBindInputData"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "バインドしたい値やバッファ、テクスチャなど"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "正常にバインドできればtrue"
    }
  },
  {
    "__docId__": 450,
    "kind": "typedef",
    "name": "S3GLProgramBindData",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "static": true,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram.S3GLProgramBindData",
    "access": "public",
    "description": "",
    "type": {
      "types": [
        "Int32Array",
        "Float32Array",
        "WebGLBuffer",
        "WebGLTexture"
      ],
      "optional": false,
      "name": "S3GLProgramBindData"
    }
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "bindMesh",
    "memberof": "src/gl/S3GLProgram.js~S3GLProgram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLProgram.js~S3GLProgram#bindMesh",
    "access": "public",
    "description": "メッシュ（S3GLMesh）全体をこのプログラムにバインドします。\n内部でattribute変数とVBO/IBOなどを結び付け、必要なバッファ設定も行います。",
    "lineNumber": 785,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} IBOのインデックス数（drawElements用）"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3GLMesh"
        ],
        "spread": false,
        "optional": false,
        "name": "s3mesh",
        "description": "S3GLMesh インスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "IBOのインデックス数（drawElements用）"
    }
  },
  {
    "__docId__": 452,
    "kind": "file",
    "name": "src/gl/S3GLScene.js",
    "content": "﻿import S3Scene from \"../basic/S3Scene.js\";\nimport S3Camera from \"../basic/S3Camera.js\";\nimport S3GLLight from \"./S3GLLight.js\";\nimport S3GLArray from \"./S3GLArray.js\";\nimport S3GLModel from \"./S3GLModel.js\";\nimport S3Vector from \"../math/S3Vector.js\";\n\n/**\n * WebGL描画用のシーン（Scene）クラス。\n * 基本のS3Sceneを拡張し、WebGL用のuniformデータ生成（getUniforms）などの機能を追加します。\n * カメラやライト情報をGLSLシェーダ向けにuniform変数としてまとめて提供します。\n *\n * @class\n * @extends S3Scene\n * @module S3\n */\nexport default class S3GLScene extends S3Scene {\n\t/**\n\t * シーンを初期化します。\n\t * モデル・カメラ・ライトの配列等はS3Sceneに準拠します。\n\t */\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * シーン構成要素を初期化します。\n\t * カメラは新規作成、モデル・ライトは空配列となります。\n\t */\n\t_init() {\n\t\t/**\n\t\t * シーン全体のカメラ\n\t\t * @type {S3Camera}\n\t\t */\n\t\tthis.camera = null;\n\t\t/**\n\t\t * シーン内の3Dモデル配列\n\t\t * @type {Array<S3GLModel>}\n\t\t */\n\t\tthis.model = [];\n\t\t/**\n\t\t * シーン内のライト配列\n\t\t * @type {Array<S3GLLight>}\n\t\t */\n\t\tthis.light = [];\n\t}\n\n\t/**\n\t * シーンにモデルを追加します。\n\t * @param {S3GLModel} model 追加する3Dモデル（型はS3Model等を想定）\n\t */\n\taddModel(model) {\n\t\tthis.model[this.model.length] = model;\n\t}\n\n\t/**\n\t * シーンにライトを追加します。\n\t * @param {S3GLLight} light 追加するライト（型はS3Light等を想定）\n\t */\n\taddLight(light) {\n\t\tthis.light[this.light.length] = light;\n\t}\n\n\t/**\n\t * シーン内の全モデルを取得します。\n\t * @returns {Array<S3GLModel>} モデル配列\n\t */\n\tgetModels() {\n\t\treturn /** @type {Array<S3GLModel>} */ (this.model);\n\t}\n\n\t/**\n\t * シーン内の全ライトを取得します。\n\t * @returns {Array<S3GLLight>} ライト配列\n\t */\n\tgetLights() {\n\t\treturn /** @type {Array<S3GLLight>} */ (this.light);\n\t}\n\n\t/**\n\t * @typedef {Object} S3GLSceneUniform\n\t * @property {S3Vector} eyeWorldDirection カメラ情報\n\t * @property {S3GLArray} lightsLength ライトの数\n\t * @property {S3GLArray[]} lightsData1 モード・レンジ・方向or位置 (vec4)\n\t * @property {S3GLArray[]} lightsData2 方向or位置Z成分＋カラー情報 (vec4)\n\t */\n\n\t/**\n\t * @typedef {Object} S3GLProgramUniforms\n\t * @property {S3GLSceneUniform} uniforms\n\t */\n\n\t/**\n\t * シーン全体のWebGL向けuniformデータを生成して返します。\n\t * カメラの視線ベクトルや、最大4つまでのライト情報をuniform用データにまとめます。\n\t * 各値はS3GLArrayやGLSLと連携しやすい形式で返されます。\n\t *\n\t * - uniforms: uniform変数名→データ（カメラ方向ベクトル、ライト属性配列など）\n\t * @returns {S3GLProgramUniforms}\n\t */\n\tgetUniforms() {\n\t\tconst LIGHTS_MAX = 4;\n\t\t/**\n\t\t * @type {Array<S3GLLight>}\n\t\t */\n\t\tconst light_array = /** @type {Array<S3GLLight>} */ (this.getLights());\n\t\tconst lightsLength = Math.min(light_array.length, LIGHTS_MAX);\n\n\t\t/**\n\t\t * @type {S3GLSceneUniform}\n\t\t */\n\t\tconst uniforms = {\n\t\t\teyeWorldDirection: this.getCamera().getDirection(),\n\t\t\tlightsLength: new S3GLArray(lightsLength, 1, S3GLArray.datatype.Int32Array),\n\t\t\tlightsData1: [],\n\t\t\tlightsData2: []\n\t\t};\n\n\t\tfor (let i = 0; i < lightsLength; i++) {\n\t\t\tconst data = light_array[i].getGLData();\n\t\t\tuniforms.lightsData1.push(data.lightsData1);\n\t\t\tuniforms.lightsData2.push(data.lightsData2);\n\t\t}\n\n\t\tconst ret = { uniforms: uniforms };\n\t\treturn ret;\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/gl/S3GLScene.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 453,
    "kind": "class",
    "name": "S3GLScene",
    "memberof": "src/gl/S3GLScene.js",
    "static": true,
    "longname": "src/gl/S3GLScene.js~S3GLScene",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/gl/S3GLScene.js",
    "importStyle": "S3GLScene",
    "description": "WebGL描画用のシーン（Scene）クラス。\n基本のS3Sceneを拡張し、WebGL用のuniformデータ生成（getUniforms）などの機能を追加します。\nカメラやライト情報をGLSLシェーダ向けにuniform変数としてまとめて提供します。",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 454,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/gl/S3GLScene.js~S3GLScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLScene.js~S3GLScene#constructor",
    "access": "public",
    "description": "シーンを初期化します。\nモデル・カメラ・ライトの配列等はS3Sceneに準拠します。",
    "lineNumber": 22
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "_init",
    "memberof": "src/gl/S3GLScene.js~S3GLScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLScene.js~S3GLScene#_init",
    "access": "private",
    "description": "シーン構成要素を初期化します。\nカメラは新規作成、モデル・ライトは空配列となります。",
    "lineNumber": 30,
    "params": [],
    "return": null
  },
  {
    "__docId__": 456,
    "kind": "member",
    "name": "camera",
    "memberof": "src/gl/S3GLScene.js~S3GLScene",
    "static": false,
    "longname": "src/gl/S3GLScene.js~S3GLScene#camera",
    "access": "public",
    "description": "シーン全体のカメラ",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "S3Camera"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 457,
    "kind": "member",
    "name": "model",
    "memberof": "src/gl/S3GLScene.js~S3GLScene",
    "static": false,
    "longname": "src/gl/S3GLScene.js~S3GLScene#model",
    "access": "public",
    "description": "シーン内の3Dモデル配列",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Array<S3GLModel>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 458,
    "kind": "member",
    "name": "light",
    "memberof": "src/gl/S3GLScene.js~S3GLScene",
    "static": false,
    "longname": "src/gl/S3GLScene.js~S3GLScene#light",
    "access": "public",
    "description": "シーン内のライト配列",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Array<S3GLLight>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "addModel",
    "memberof": "src/gl/S3GLScene.js~S3GLScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLScene.js~S3GLScene#addModel",
    "access": "public",
    "description": "シーンにモデルを追加します。",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3GLModel"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": "追加する3Dモデル（型はS3Model等を想定）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 460,
    "kind": "method",
    "name": "addLight",
    "memberof": "src/gl/S3GLScene.js~S3GLScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLScene.js~S3GLScene#addLight",
    "access": "public",
    "description": "シーンにライトを追加します。",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3GLLight"
        ],
        "spread": false,
        "optional": false,
        "name": "light",
        "description": "追加するライト（型はS3Light等を想定）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "getModels",
    "memberof": "src/gl/S3GLScene.js~S3GLScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLScene.js~S3GLScene#getModels",
    "access": "public",
    "description": "シーン内の全モデルを取得します。",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<S3GLModel>} モデル配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<S3GLModel>"
      ],
      "spread": false,
      "description": "モデル配列"
    },
    "params": []
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "getLights",
    "memberof": "src/gl/S3GLScene.js~S3GLScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLScene.js~S3GLScene#getLights",
    "access": "public",
    "description": "シーン内の全ライトを取得します。",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<S3GLLight>} ライト配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<S3GLLight>"
      ],
      "spread": false,
      "description": "ライト配列"
    },
    "params": []
  },
  {
    "__docId__": 463,
    "kind": "typedef",
    "name": "S3GLSceneUniform",
    "memberof": "src/gl/S3GLScene.js~S3GLScene",
    "static": true,
    "longname": "src/gl/S3GLScene.js~S3GLScene.S3GLSceneUniform",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "eyeWorldDirection",
        "description": "カメラ情報"
      },
      {
        "nullable": null,
        "types": [
          "S3GLArray"
        ],
        "spread": false,
        "optional": false,
        "name": "lightsLength",
        "description": "ライトの数"
      },
      {
        "nullable": null,
        "types": [
          "S3GLArray[]"
        ],
        "spread": false,
        "optional": false,
        "name": "lightsData1",
        "description": "モード・レンジ・方向or位置 (vec4)"
      },
      {
        "nullable": null,
        "types": [
          "S3GLArray[]"
        ],
        "spread": false,
        "optional": false,
        "name": "lightsData2",
        "description": "方向or位置Z成分＋カラー情報 (vec4)"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3GLSceneUniform"
    }
  },
  {
    "__docId__": 464,
    "kind": "typedef",
    "name": "S3GLProgramUniforms",
    "memberof": "src/gl/S3GLScene.js~S3GLScene",
    "static": true,
    "longname": "src/gl/S3GLScene.js~S3GLScene.S3GLProgramUniforms",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "S3GLSceneUniform"
        ],
        "spread": false,
        "optional": false,
        "name": "uniforms",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3GLProgramUniforms"
    }
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "getUniforms",
    "memberof": "src/gl/S3GLScene.js~S3GLScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLScene.js~S3GLScene#getUniforms",
    "access": "public",
    "description": "シーン全体のWebGL向けuniformデータを生成して返します。\nカメラの視線ベクトルや、最大4つまでのライト情報をuniform用データにまとめます。\n各値はS3GLArrayやGLSLと連携しやすい形式で返されます。\n\n- uniforms: uniform変数名→データ（カメラ方向ベクトル、ライト属性配列など）",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLProgramUniforms}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLProgramUniforms"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 466,
    "kind": "file",
    "name": "src/gl/S3GLShader.js",
    "content": "﻿import S3GLSystem from \"./S3GLSystem.js\";\n\n/**\n * WebGLのシェーダー管理クラス。\n * 頂点シェーダ／フラグメントシェーダのソースコード・型・GLオブジェクトを保持し、コンパイルや破棄、状態取得などの機能を提供します。\n * S3GLProgram 内部で利用され、単体では直接使わないことが多い設計です。\n *\n * @class\n * @module S3\n */\nexport default class S3GLShader {\n\t/**\n\t * WebGLシェーダーを初期化します。\n\t * @param {S3GLSystem} sys GLシステムインスタンス（GLコンテキスト・コンパイル補助などに必要）\n\t * @param {string} code シェーダーのGLSLソースコード、またはGLSLファイルのURL（1行の場合は自動判別）\n\t */\n\tconstructor(sys, code) {\n\t\tthis._init(sys, code);\n\t}\n\n\t/**\n\t * 内部初期化処理。\n\t * シェーダーソースの格納、コードの取得（URLならダウンロード）、GLオブジェクト初期化などを行います。\n\t * @private\n\t * @param {S3GLSystem} sys GLシステムインスタンス（GLコンテキスト・コンパイル補助などに必要）\n\t * @param {string} code シェーダーのGLSLソースコード、またはGLSLファイルのURL（1行の場合は自動判別）\n\t */\n\t_init(sys, code) {\n\t\t/**\n\t\t * GLシステムインスタンス\n\t\t * @type {S3GLSystem}\n\t\t */\n\t\tthis.sys = sys;\n\n\t\t/**\n\t\t * シェーダーのGLSLソースコード。GLSLコード文字列、または未ロード時はnull。\n\t\t * @type {string|null}\n\t\t */\n\t\tthis.code = null;\n\n\t\t/**\n\t\t * コンパイル済みWebGLShaderオブジェクト。未生成またはエラー時はnull。\n\t\t * @type {?WebGLShader}\n\t\t */\n\t\tthis.shader = null;\n\n\t\t/**\n\t\t * シェーダーの型。gl.VERTEX_SHADER（35633）かgl.FRAGMENT_SHADER（35632）、未設定時は-1。\n\t\t * @type {number}\n\t\t */\n\t\tthis.sharder_type = -1;\n\n\t\t/**\n\t\t * コンパイルや生成エラーが発生した場合にtrue。\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.is_error = false;\n\t\tconst that = this;\n\n\t\t/**\n\t\t * コードダウンロード時のコールバック関数型。\n\t\t * @callback DownloadCallback\n\t\t * @param {string} code ダウンロードしたGLSLコード\n\t\t */\n\n\t\t/** @type {DownloadCallback} */\n\t\tconst downloadCallback = function (code) {\n\t\t\tthat.code = code;\n\t\t};\n\t\tif (code.indexOf(\"\\n\") === -1) {\n\t\t\t// 1行の場合はURLとみなす（雑）\n\t\t\tthis.sys._download(code, downloadCallback);\n\t\t} else {\n\t\t\tthis.code = code;\n\t\t}\n\t}\n\n\t/**\n\t * このシェーダーでエラーが発生しているか判定します。\n\t * @returns {boolean} エラー発生時はtrue\n\t */\n\tisError() {\n\t\treturn this.is_error;\n\t}\n\n\t/**\n\t * シェーダーのソースコードを取得します（GLSL文字列）。\n\t * @returns {string|null} シェーダーソース。まだ取得できていない場合はnull\n\t */\n\tgetCode() {\n\t\treturn this.code;\n\t}\n\n\t/**\n\t * シェーダーオブジェクト（GLShader）を取得します。\n\t * 初回はGLSLの内容から自動でタイプ（頂点/フラグメント）判定とコンパイルを行います。\n\t * コンパイルエラー時や準備未完了時はnullを返します。\n\t * @returns {?WebGLShader} コンパイル済みGLシェーダーオブジェクト、またはnull\n\t */\n\tgetShader() {\n\t\tconst gl = this.sys.getGL();\n\t\tif (gl === null || this.is_error || this.code === null) {\n\t\t\t// まだ準備ができていないのでエラーを発生させない\n\t\t\treturn null;\n\t\t}\n\t\tif (this.shader !== null) {\n\t\t\t// すでにコンパイル済みであれば返す\n\t\t\treturn this.shader;\n\t\t}\n\t\tlet code = this.code;\n\t\t// コメントを除去する\n\t\tcode = code.replace(/\\/\\/.*/g, \"\");\n\t\tcode = code.replace(/\\/\\*([^*]|\\*[^/])*\\*\\//g, \"\");\n\t\t// コード内を判定して種別を自動判断する（雑）\n\t\tlet sharder_type = 0;\n\t\tif (code.indexOf(\"gl_FragColor\") !== -1) {\n\t\t\t// フラグメントシェーダである\n\t\t\tsharder_type = gl.FRAGMENT_SHADER;\n\t\t} else {\n\t\t\t// バーテックスシェーダである\n\t\t\tsharder_type = gl.VERTEX_SHADER;\n\t\t}\n\t\tconst data = this.sys.glfunc.createShader(sharder_type, code);\n\t\tif (data.is_error) {\n\t\t\tthis.is_error = true;\n\t\t\treturn null;\n\t\t}\n\t\tthis.shader = data.shader;\n\t\tthis.sharder_type = sharder_type;\n\t\treturn this.shader;\n\t}\n\n\t/**\n\t * このシェーダーのタイプ（頂点orフラグメント）を返します。\n\t * 準備ができていない場合やエラー時はnullになります。\n\t * @returns {number|null} gl.VERTEX_SHADER または gl.FRAGMENT_SHADER、未定義時は null\n\t */\n\tgetShaderType() {\n\t\tif (this.sharder_type !== -1) {\n\t\t\treturn this.sharder_type;\n\t\t}\n\t\tif (this.getShader() !== null) {\n\t\t\treturn this.sharder_type;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * シェーダーリソースを解放し、GLオブジェクトを破棄します。\n\t * 以後このシェーダーは再利用できません。\n\t * @returns {boolean|null} 正常終了:true、GL未設定時:null\n\t */\n\tdispose() {\n\t\tconst gl = this.sys.getGL();\n\t\tif (gl === null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (this.shader === null) {\n\t\t\treturn true;\n\t\t}\n\t\tthis.sys.glfunc.deleteShader(this.shader);\n\t\tthis.shader = null;\n\t\tthis.sharder_type = -1;\n\t\treturn true;\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/gl/S3GLShader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 467,
    "kind": "class",
    "name": "S3GLShader",
    "memberof": "src/gl/S3GLShader.js",
    "static": true,
    "longname": "src/gl/S3GLShader.js~S3GLShader",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/gl/S3GLShader.js",
    "importStyle": "S3GLShader",
    "description": "WebGLのシェーダー管理クラス。\n頂点シェーダ／フラグメントシェーダのソースコード・型・GLオブジェクトを保持し、コンパイルや破棄、状態取得などの機能を提供します。\nS3GLProgram 内部で利用され、単体では直接使わないことが多い設計です。",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 468,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/gl/S3GLShader.js~S3GLShader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLShader.js~S3GLShader#constructor",
    "access": "public",
    "description": "WebGLシェーダーを初期化します。",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3GLSystem"
        ],
        "spread": false,
        "optional": false,
        "name": "sys",
        "description": "GLシステムインスタンス（GLコンテキスト・コンパイル補助などに必要）"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "シェーダーのGLSLソースコード、またはGLSLファイルのURL（1行の場合は自動判別）"
      }
    ]
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "_init",
    "memberof": "src/gl/S3GLShader.js~S3GLShader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLShader.js~S3GLShader#_init",
    "access": "private",
    "description": "内部初期化処理。\nシェーダーソースの格納、コードの取得（URLならダウンロード）、GLオブジェクト初期化などを行います。",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3GLSystem"
        ],
        "spread": false,
        "optional": false,
        "name": "sys",
        "description": "GLシステムインスタンス（GLコンテキスト・コンパイル補助などに必要）"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "シェーダーのGLSLソースコード、またはGLSLファイルのURL（1行の場合は自動判別）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 470,
    "kind": "member",
    "name": "sys",
    "memberof": "src/gl/S3GLShader.js~S3GLShader",
    "static": false,
    "longname": "src/gl/S3GLShader.js~S3GLShader#sys",
    "access": "public",
    "description": "GLシステムインスタンス",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "S3GLSystem"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 471,
    "kind": "member",
    "name": "code",
    "memberof": "src/gl/S3GLShader.js~S3GLShader",
    "static": false,
    "longname": "src/gl/S3GLShader.js~S3GLShader#code",
    "access": "public",
    "description": "シェーダーのGLSLソースコード。GLSLコード文字列、または未ロード時はnull。",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "string",
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 472,
    "kind": "member",
    "name": "shader",
    "memberof": "src/gl/S3GLShader.js~S3GLShader",
    "static": false,
    "longname": "src/gl/S3GLShader.js~S3GLShader#shader",
    "access": "public",
    "description": "コンパイル済みWebGLShaderオブジェクト。未生成またはエラー時はnull。",
    "lineNumber": 45,
    "type": {
      "nullable": true,
      "types": [
        "WebGLShader"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 473,
    "kind": "member",
    "name": "sharder_type",
    "memberof": "src/gl/S3GLShader.js~S3GLShader",
    "static": false,
    "longname": "src/gl/S3GLShader.js~S3GLShader#sharder_type",
    "access": "public",
    "description": "シェーダーの型。gl.VERTEX_SHADER（35633）かgl.FRAGMENT_SHADER（35632）、未設定時は-1。",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 474,
    "kind": "member",
    "name": "is_error",
    "memberof": "src/gl/S3GLShader.js~S3GLShader",
    "static": false,
    "longname": "src/gl/S3GLShader.js~S3GLShader#is_error",
    "access": "public",
    "description": "コンパイルや生成エラーが発生した場合にtrue。",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "isError",
    "memberof": "src/gl/S3GLShader.js~S3GLShader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLShader.js~S3GLShader#isError",
    "access": "public",
    "description": "このシェーダーでエラーが発生しているか判定します。",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} エラー発生時はtrue"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "エラー発生時はtrue"
    },
    "params": []
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "getCode",
    "memberof": "src/gl/S3GLShader.js~S3GLShader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLShader.js~S3GLShader#getCode",
    "access": "public",
    "description": "シェーダーのソースコードを取得します（GLSL文字列）。",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string|null} シェーダーソース。まだ取得できていない場合はnull"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "null"
      ],
      "spread": false,
      "description": "シェーダーソース。まだ取得できていない場合はnull"
    },
    "params": []
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "getShader",
    "memberof": "src/gl/S3GLShader.js~S3GLShader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLShader.js~S3GLShader#getShader",
    "access": "public",
    "description": "シェーダーオブジェクト（GLShader）を取得します。\n初回はGLSLの内容から自動でタイプ（頂点/フラグメント）判定とコンパイルを行います。\nコンパイルエラー時や準備未完了時はnullを返します。",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{?WebGLShader} コンパイル済みGLシェーダーオブジェクト、またはnull"
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "WebGLShader"
      ],
      "spread": false,
      "description": "コンパイル済みGLシェーダーオブジェクト、またはnull"
    },
    "params": []
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "getShaderType",
    "memberof": "src/gl/S3GLShader.js~S3GLShader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLShader.js~S3GLShader#getShaderType",
    "access": "public",
    "description": "このシェーダーのタイプ（頂点orフラグメント）を返します。\n準備ができていない場合やエラー時はnullになります。",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number|null} gl.VERTEX_SHADER または gl.FRAGMENT_SHADER、未定義時は null"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "null"
      ],
      "spread": false,
      "description": "gl.VERTEX_SHADER または gl.FRAGMENT_SHADER、未定義時は null"
    },
    "params": []
  },
  {
    "__docId__": 483,
    "kind": "method",
    "name": "dispose",
    "memberof": "src/gl/S3GLShader.js~S3GLShader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLShader.js~S3GLShader#dispose",
    "access": "public",
    "description": "シェーダーリソースを解放し、GLオブジェクトを破棄します。\n以後このシェーダーは再利用できません。",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean|null} 正常終了:true、GL未設定時:null"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "null"
      ],
      "spread": false,
      "description": "正常終了:true、GL未設定時:null"
    },
    "params": []
  },
  {
    "__docId__": 486,
    "kind": "file",
    "name": "src/gl/S3GLSystem.js",
    "content": "﻿import S3System from \"../basic/S3System.js\";\nimport S3Camera from \"../basic/S3Camera.js\";\nimport S3Vector from \"../math/S3Vector.js\";\n\nimport S3GLProgram from \"./S3GLProgram.js\";\n\nimport S3GLLight from \"./S3GLLight.js\";\nimport S3GLMaterial from \"./S3GLMaterial.js\";\nimport S3GLMesh from \"./S3GLMesh.js\";\nimport S3GLShader from \"./S3GLShader.js\";\nimport S3GLModel from \"./S3GLModel.js\";\nimport S3GLScene from \"./S3GLScene.js\";\nimport S3GLTexture from \"./S3GLTexture.js\";\nimport S3GLTriangleIndex from \"./S3GLTriangleIndex.js\";\nimport S3GLVertex from \"./S3GLVertex.js\";\n\n/**\n * WebGLレンダリングシステムを管理するクラス。\n * シェーダー、テクスチャ、バッファオブジェクトの生成・管理、および描画制御を担当。\n * WebGLの初期化やプログラムのセットアップ、シーンの描画などの処理を含む。\n *\n * @class\n * @extends S3System\n * @module S3\n */\nexport default class S3GLSystem extends S3System {\n\t/**\n\t * S3GLSystemインスタンスを生成します。\n\t * WebGLコンテキストやプログラムの初期設定を行います。\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/** @type {?S3GLProgram} 現在使用中のプログラム */\n\t\tthis.program = null;\n\n\t\t/** @type {?WebGLRenderingContext} WebGLレンダリングコンテキスト */\n\t\tthis.gl = null;\n\n\t\t/** @type {boolean} プログラムがセット済みかどうか */\n\t\tthis.is_set = false;\n\n\t\t/** @type {Array<S3GLProgram>} 登録されているプログラムのリスト */\n\t\tthis.program_list = [];\n\n\t\t/** @type {number} プログラムリストの識別ID */\n\t\tthis.program_listId = 0;\n\n\t\t/** @type {HTMLCanvasElement} 描画に使うcanvas要素 */\n\t\tthis.canvas = null;\n\n\t\t/** @type {?string} ダミーテクスチャのID文字列 */\n\t\tthis._textureDummyId = undefined;\n\n\t\t/** @type {?WebGLTexture} ダミーテクスチャのWebGLTextureオブジェクト */\n\t\tthis._textureDummyData = undefined;\n\n\t\tconst that = this;\n\n\t\t/**\n\t\t * @typedef {Object} S3GLFuncTextureCashEntry\n\t\t * @property {WebGLTexture} texture WebGLテクスチャオブジェクト\n\t\t * @property {number} count このテクスチャの参照カウント\n\t\t */\n\n\t\t/**\n\t\t * テクスチャキャッシュ全体の型定義。\n\t\t * キーがテクスチャID（string）で、値がGLFuncTextureCashEntry型になります。\n\t\t * @typedef {Object.<string, S3GLFuncTextureCashEntry>} S3GLFuncTextureCashTable\n\t\t */\n\n\t\t/**\n\t\t * テクスチャキャッシュ情報を管理するオブジェクトです。\n\t\t * キーにテクスチャID（string）を持ち、値は\n\t\t * { texture: WebGLTexture, count: number } のオブジェクト構造で、\n\t\t * 生成済みWebGLTextureの使い回しや参照カウント管理に利用します。\n\t\t *\n\t\t * @type {S3GLFuncTextureCashTable}\n\t\t */\n\t\tconst glfunc_texture_cash = {};\n\n\t\t/**\n\t\t * WebGLバッファ、テクスチャ、シェーダを作成・削除するユーティリティ関数群。\n\t\t */\n\t\tthis.glfunc = {\n\t\t\t/**\n\t\t\t * 頂点バッファオブジェクト(VBO)を作成します。\n\t\t\t * @param {Float32Array|Int32Array} data バッファデータ\n\t\t\t * @returns {?WebGLBuffer} 作成したバッファオブジェクト\n\t\t\t */\n\t\t\tcreateBufferVBO: function (data) {\n\t\t\t\tconst gl = that.getGL();\n\t\t\t\tif (gl === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tconst vbo = gl.createBuffer();\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n\t\t\t\tgl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, null);\n\t\t\t\treturn vbo;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * インデックスバッファオブジェクト(IBO)を作成します。\n\t\t\t * @param {Int16Array|Uint16Array} data インデックスバッファデータ\n\t\t\t * @returns {?WebGLBuffer} 作成したインデックスバッファオブジェクト\n\t\t\t */\n\t\t\tcreateBufferIBO: function (data) {\n\t\t\t\tconst gl = that.getGL();\n\t\t\t\tif (gl === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tconst ibo = gl.createBuffer();\n\t\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);\n\t\t\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW);\n\t\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n\t\t\t\treturn ibo;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * 指定されたバッファを削除します。\n\t\t\t * @param {WebGLBuffer} data 削除するバッファオブジェクト\n\t\t\t * @returns {boolean} 成功時true\n\t\t\t */\n\t\t\tdeleteBuffer: function (data) {\n\t\t\t\tconst gl = that.getGL();\n\t\t\t\tif (gl !== null) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tgl.deleteBuffer(data);\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * テクスチャオブジェクトを作成します。\n\t\t\t * @param {string} id テクスチャの識別ID\n\t\t\t * @param {ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image テクスチャ画像\n\t\t\t * @returns {?WebGLTexture} 作成したテクスチャオブジェクト\n\t\t\t */\n\t\t\tcreateTexture: function (id, image) {\n\t\t\t\tif (\n\t\t\t\t\t!(image instanceof ImageData) &&\n\t\t\t\t\t!(image instanceof HTMLImageElement) &&\n\t\t\t\t\t!(image instanceof HTMLCanvasElement) &&\n\t\t\t\t\t!(image instanceof HTMLVideoElement)\n\t\t\t\t) {\n\t\t\t\t\tthrow \"createBufferTexture\";\n\t\t\t\t}\n\t\t\t\tconst gl = that.getGL();\n\t\t\t\tif (gl === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tlet texture = null;\n\t\t\t\tif (!glfunc_texture_cash[id]) {\n\t\t\t\t\ttexture = gl.createTexture();\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n\t\t\t\t\tgl.generateMipmap(gl.TEXTURE_2D);\n\t\t\t\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n\t\t\t\t\tconst cash = {\n\t\t\t\t\t\ttexture: texture,\n\t\t\t\t\t\tcount: 0\n\t\t\t\t\t};\n\t\t\t\t\tglfunc_texture_cash[id] = cash;\n\t\t\t\t}\n\t\t\t\ttexture = glfunc_texture_cash[id].texture;\n\t\t\t\tglfunc_texture_cash[id].count++;\n\t\t\t\treturn texture;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * 指定されたテクスチャを削除します。\n\t\t\t * @param {string} id テクスチャの識別ID\n\t\t\t */\n\t\t\tdeleteTexture: function (id) {\n\t\t\t\tconst gl = that.getGL();\n\t\t\t\tif (gl !== null) {\n\t\t\t\t\tif (glfunc_texture_cash[id]) {\n\t\t\t\t\t\tglfunc_texture_cash[id].count--;\n\t\t\t\t\t\tif (glfunc_texture_cash[id].count === 0) {\n\t\t\t\t\t\t\tgl.deleteTexture(glfunc_texture_cash[id].texture);\n\t\t\t\t\t\t\tdelete glfunc_texture_cash[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * シェーダープログラムを作成します。\n\t\t\t * @param {WebGLShader} shader_vertex 頂点シェーダ\n\t\t\t * @param {WebGLShader} shader_fragment フラグメントシェーダ\n\t\t\t * @returns {{program: WebGLProgram, is_error: boolean}} 作成結果\n\t\t\t */\n\t\t\tcreateProgram: function (shader_vertex, shader_fragment) {\n\t\t\t\tconst gl = that.getGL();\n\t\t\t\tif (gl === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tlet program = gl.createProgram();\n\t\t\t\tlet is_error = false;\n\t\t\t\tgl.attachShader(program, shader_vertex);\n\t\t\t\tgl.attachShader(program, shader_fragment);\n\t\t\t\tgl.linkProgram(program);\n\t\t\t\tif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n\t\t\t\t\tconsole.log(\"link error \" + gl.getProgramInfoLog(program));\n\t\t\t\t\tgl.detachShader(program, shader_vertex);\n\t\t\t\t\tgl.detachShader(program, shader_fragment);\n\t\t\t\t\tgl.deleteProgram(program);\n\t\t\t\t\tprogram = null;\n\t\t\t\t\tis_error = true;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tprogram: program,\n\t\t\t\t\tis_error: is_error\n\t\t\t\t};\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * シェーダープログラムを削除します。\n\t\t\t * @param {WebGLProgram} program 削除するプログラム\n\t\t\t * @param {WebGLShader} shader_vertex 頂点シェーダ\n\t\t\t * @param {WebGLShader} shader_fragment フラグメントシェーダ\n\t\t\t * @returns {boolean} 成功時true\n\t\t\t */\n\t\t\tdeleteProgram: function (program, shader_vertex, shader_fragment) {\n\t\t\t\tconst gl = that.getGL();\n\t\t\t\tif (gl === null) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tgl.detachShader(program, shader_vertex);\n\t\t\t\tgl.detachShader(program, shader_fragment);\n\t\t\t\tgl.deleteProgram(program);\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * シェーダーを作成します。\n\t\t\t * @param {number} sharder_type シェーダタイプ(gl.VERTEX_SHADER|gl.FRAGMENT_SHADER)\n\t\t\t * @param {string} code シェーダのGLSLソースコード\n\t\t\t * @returns {{shader: WebGLShader, is_error: boolean}} 作成結果\n\t\t\t */\n\t\t\tcreateShader: function (sharder_type, code) {\n\t\t\t\tconst gl = that.getGL();\n\t\t\t\tif (gl === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tlet shader = gl.createShader(sharder_type);\n\t\t\t\tlet is_error = false;\n\t\t\t\tgl.shaderSource(shader, code);\n\t\t\t\tgl.compileShader(shader);\n\t\t\t\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n\t\t\t\t\tconsole.log(\"compile error \" + gl.getShaderInfoLog(shader));\n\t\t\t\t\tgl.deleteShader(shader);\n\t\t\t\t\tshader = null;\n\t\t\t\t\tis_error = true;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tshader: shader,\n\t\t\t\t\tis_error: is_error\n\t\t\t\t};\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * 指定されたシェーダを削除します。\n\t\t\t * @param {WebGLShader} shader 削除するシェーダ\n\t\t\t * @returns {boolean} 成功時true\n\t\t\t */\n\t\t\tdeleteShader: function (shader) {\n\t\t\t\tconst gl = that.getGL();\n\t\t\t\tif (gl === null) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tgl.deleteShader(shader);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * WebGLコンテキストを取得します。\n\t * @returns {WebGLRenderingContext} WebGLコンテキスト\n\t */\n\tgetGL() {\n\t\treturn this.gl;\n\t}\n\n\t/**\n\t * WebGLコンテキストが設定されているかを確認します。\n\t * @returns {boolean} 設定済みの場合true\n\t */\n\tisSetGL() {\n\t\treturn this.gl !== null;\n\t}\n\n\t/**\n\t * 描画対象となるCanvasを設定します。\n\t * @param {HTMLCanvasElement} canvas 描画対象のCanvas要素\n\t */\n\tsetCanvas(canvas) {\n\t\t// 初期化色\n\t\tconst gl = /** @type {WebGLRenderingContext} */ (\n\t\t\tcanvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\")\n\t\t);\n\n\t\tthis.canvas = canvas;\n\t\tthis.gl = gl;\n\t}\n\n\t/**\n\t * 新しいシェーダープログラムを生成し取得します。\n\t * @returns {S3GLProgram} 新規生成されたシェーダープログラム\n\t */\n\tcreateProgram() {\n\t\tconst program = new S3GLProgram(this, this.program_listId);\n\t\tthis.program_list[this.program_listId] = program;\n\t\tthis.program_listId++;\n\t\treturn program;\n\t}\n\n\t/**\n\t * 登録されている全てのシェーダープログラムを破棄します。\n\t */\n\tdisposeProgram() {\n\t\tfor (const key in this.program_list) {\n\t\t\tthis.program_list[key].dispose();\n\t\t\tdelete this.program_list[key];\n\t\t}\n\t}\n\n\t/**\n\t * シェーダープログラムをアクティブにします。\n\t * @param {S3GLProgram} glprogram アクティブに設定するシェーダープログラム\n\t * @returns {boolean} 設定が成功した場合true\n\t */\n\tsetProgram(glprogram) {\n\t\t// nullの場合はエラーも無視\n\t\tif (glprogram === null) {\n\t\t\treturn false;\n\t\t}\n\t\t// 明確な入力の誤り\n\t\tif (!(glprogram instanceof S3GLProgram)) {\n\t\t\tthrow new Error(\"引数がS3GLProgramのインスタンスではありません。\");\n\t\t}\n\t\t// 新規のプログラムなら保持しておく\n\t\tif (this.program === null) {\n\t\t\tthis.program = glprogram;\n\t\t}\n\t\t// プログラムが取得できない場合は、ダウンロード中の可能性あり無視する\n\t\tconst new_program = glprogram.getProgram();\n\t\tif (null === new_program) {\n\t\t\treturn false;\n\t\t}\n\t\t// すでに動作中で、設定されているものと同一なら無視する\n\t\tif (this.program === glprogram && this.is_set) {\n\t\t\treturn true;\n\t\t}\n\t\t// 新しいプログラムなのでセットする\n\t\tif (this.program !== null) {\n\t\t\tthis.program.disuseProgram();\n\t\t}\n\t\tthis.program = glprogram;\n\t\tthis.program.useProgram();\n\t\tthis.is_set = true;\n\t}\n\n\t/**\n\t * 描画クリア処理を行います（背景色・深度バッファのリセット）。\n\t * @returns {boolean} 成功時true\n\t */\n\tclear() {\n\t\tif (this.gl === null) {\n\t\t\treturn false;\n\t\t}\n\t\tconst color = this.getBackgroundColor();\n\t\tthis.gl.clearColor(color.x, color.y, color.z, color.w);\n\t\tthis.gl.clearDepth(1.0);\n\t\tthis.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n\t\treturn true;\n\t}\n\n\t/**\n\t * 指定されたインデックスサイズに基づいて要素を描画します。\n\t * @param {number} indexsize インデックスバッファのサイズ\n\t * @returns {boolean} 成功時true\n\t */\n\tdrawElements(indexsize) {\n\t\tif (!this.is_set) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.gl.drawElements(this.gl.TRIANGLES, indexsize, this.gl.UNSIGNED_SHORT, 0);\n\t\tthis.gl.flush();\n\t\treturn true;\n\t}\n\n\t/**\n\t * 指定したWebGLバッファを削除します。\n\t * @param {WebGLBuffer} data 削除するバッファオブジェクト\n\t * @returns {boolean} 成功時true\n\t */\n\tdeleteBuffer(data) {\n\t\tif (this.gl === null) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.gl.deleteBuffer(data);\n\t\treturn true;\n\t}\n\n\t/**\n\t * 1x1ピクセルのダミーテクスチャ（WebGLTexture）を取得します。\n\t * まだ生成されていない場合は新規作成します。テクスチャ未指定時の代替として利用されます。\n\t * @returns {WebGLTexture} ダミーテクスチャのWebGLTextureオブジェクト\n\t */\n\t_getDummyTexture() {\n\t\tif (this._textureDummyData === undefined) {\n\t\t\tconst canvas = document.createElement(\"canvas\");\n\t\t\tcanvas.width = 1;\n\t\t\tcanvas.height = 1;\n\t\t\tconst context = canvas.getContext(\"2d\");\n\t\t\tconst imagedata = context.getImageData(0, 0, canvas.width, canvas.height);\n\t\t\tthis._textureDummyId = this._createID();\n\t\t\tthis._textureDummyData = this.glfunc.createTexture(this._textureDummyId, imagedata);\n\t\t}\n\t\treturn this._textureDummyData;\n\t}\n\n\t/**\n\t * 深度バッファのテストモードをWebGLで有効化します。\n\t * 通常は自動的に呼ばれます。\n\t * @returns {boolean} 成功時true\n\t */\n\t_setDepthMode() {\n\t\tif (this.gl === null) {\n\t\t\treturn false;\n\t\t}\n\t\tconst gl = this.gl;\n\t\tgl.enable(gl.DEPTH_TEST);\n\t\tgl.depthFunc(gl.LEQUAL);\n\t\treturn true;\n\t}\n\n\t/**\n\t * WebGLのカリングモード（描画面の制御）を設定します。\n\t * カリングの有無・前面/背面/両面の設定も行います。\n\t * @returns {boolean} 成功時true\n\t */\n\t_setCullMode() {\n\t\tif (this.gl === null) {\n\t\t\treturn false;\n\t\t}\n\t\tconst gl = this.gl;\n\t\tif (this.cullmode === S3System.CULL_MODE.NONE) {\n\t\t\tgl.disable(gl.CULL_FACE);\n\t\t\treturn true;\n\t\t} else {\n\t\t\tgl.enable(gl.CULL_FACE);\n\t\t}\n\t\tif (this.frontface === S3System.FRONT_FACE.CLOCKWISE) {\n\t\t\tgl.frontFace(gl.CW);\n\t\t} else {\n\t\t\tgl.frontFace(gl.CCW);\n\t\t}\n\t\tif (this.cullmode === S3System.CULL_MODE.FRONT_AND_BACK) {\n\t\t\tgl.cullFace(gl.FRONT_AND_BACK);\n\t\t} else if (this.cullmode === S3System.CULL_MODE.BACK) {\n\t\t\tgl.cullFace(gl.BACK);\n\t\t} else if (this.cullmode === S3System.CULL_MODE.FRONT) {\n\t\t\tgl.cullFace(gl.FRONT);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * 描画前処理として、アクティブなテクスチャIDをリセットします。\n\t * 通常は内部的に呼ばれます。\n\t */\n\t_bindStart() {\n\t\tthis.program.resetActiveTextureId();\n\t}\n\n\t/**\n\t * 描画後処理として、バインド状態の解放やクリーンアップを行います。\n\t * （本実装では何もしていません。拡張用）\n\t */\n\t_bindEnd() {}\n\n\t/**\n\t * モデル・uniforms・名前と値を与えた場合のデータバインド処理を実行します。\n\t * - 2引数: シェーダ変数名とデータをバインド\n\t * - 1引数: S3GLModelならメッシュ情報をバインド\n\t * - 1引数: uniforms情報ならすべてのuniformsをバインド\n\t *\n\t * @param {...any} args バインド対象\n\t * @returns {number} 0以上は成功、モデルの場合はIBOインデックス数（モデルの場合）\n\t */\n\t_bind() {\n\t\tif (!this.is_set) {\n\t\t\treturn -1;\n\t\t}\n\t\tconst prg = this.program;\n\t\tlet index_lenght = 0;\n\t\t// p1が文字列、p2がデータの場合、データとして結びつける\n\t\tif (arguments.length === 2 && typeof arguments[0] === \"string\") {\n\t\t\tif (!prg.bindData(arguments[0], arguments[1])) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\t// 引数がモデルであれば、モデルとして紐づける\n\t\telse if (arguments.length === 1 && arguments[0] instanceof S3GLModel) {\n\t\t\tconst mesh = arguments[0].getMesh();\n\t\t\tif (mesh instanceof S3GLMesh) {\n\t\t\t\tindex_lenght = prg.bindMesh(mesh);\n\t\t\t}\n\t\t}\n\t\t// uniformsデータであれば、内部のデータを全て割り当てる\n\t\telse if (arguments.length === 1 && arguments[0].uniforms) {\n\t\t\tconst uniforms = arguments[0].uniforms;\n\t\t\tfor (const key in uniforms) {\n\t\t\t\tif (!prg.bindData(key, uniforms[key])) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn index_lenght;\n\t}\n\n\t/**\n\t * シーン全体を描画します。\n\t * プログラム設定や深度・カリングモードの設定、各種Uniformやモデルバインド・描画を自動実行します。\n\t * @param {S3GLScene} scene 描画対象のシーン\n\t * @returns {void}\n\t */\n\tdrawScene(scene) {\n\t\t// プログラムを再設定\n\t\tthis.setProgram(this.program);\n\n\t\t// まだ設定できていない場合は、この先へいかせない\n\t\tif (!this.is_set) {\n\t\t\treturn;\n\t\t}\n\n\t\t// 画面の初期化\n\t\tthis._setDepthMode();\n\t\tthis._setCullMode();\n\n\t\t// 描写開始\n\t\tthis._bindStart();\n\n\t\t// Sceneに関するUniform設定（カメラやライト設定など）\n\t\tthis._bind(scene.getUniforms());\n\n\t\t// カメラの行列を取得する\n\t\tconst VPS = scene.getCamera().getVPSMatrix(this.canvas);\n\n\t\t// モデル描写\n\t\tconst models = scene.getModels();\n\t\tfor (let i = 0; i < models.length; i++) {\n\t\t\tconst model = models[i];\n\t\t\tconst mesh = model.getMesh();\n\t\t\tif (mesh.isComplete() === false) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// モデルに関するUniform設定（材質の設定など）\n\t\t\tthis._bind(model.getUniforms());\n\n\t\t\t// モデル用のBIND\n\t\t\tconst M = this.getMatrixWorldTransform(model);\n\t\t\tconst MV = this.mulMatrix(M, VPS.LookAt);\n\t\t\tconst MVP = this.mulMatrix(MV, VPS.PerspectiveFov);\n\t\t\tthis._bind(\"matrixWorldToLocal4\", M.inverse4());\n\t\t\tthis._bind(\"matrixLocalToWorld4\", M);\n\t\t\tthis._bind(\"matrixLocalToWorld3\", M);\n\t\t\tthis._bind(\"matrixLocalToPerspective4\", MVP);\n\n\t\t\tconst indexsize = this._bind(model);\n\t\t\tif (indexsize) {\n\t\t\t\tthis.drawElements(indexsize);\n\t\t\t}\n\t\t}\n\n\t\t// 描写終了\n\t\tthis._bindEnd();\n\t}\n\n\t/**\n\t * 不要になったリソースを解放します（未実装）。\n\t * @param {Object} obj 解放対象のオブジェクト\n\t * @returns {void}\n\t */\n\t_disposeObject(obj) {}\n\n\t/**\n\t * GL用の頂点インスタンス（S3GLVertex）を生成します。\n\t * @param {S3Vector} position 頂点座標\n\t * @returns {S3GLVertex} 生成されたGL用頂点\n\t */\n\tcreateVertex(position) {\n\t\treturn new S3GLVertex(position);\n\t}\n\n\t/**\n\t * GL用の三角形インデックスインスタンスを生成します。\n\t * @param {number} i1 頂点1のインデックス\n\t * @param {number} i2 頂点2のインデックス\n\t * @param {number} i3 頂点3のインデックス\n\t * @param {Array<number>} indexlist 頂点インデックス配列\n\t * @param {number} [materialIndex] マテリアルインデックス\n\t * @param {Array<S3Vector>} [uvlist] UV座標配列\n\t * @returns {S3GLTriangleIndex} 生成されたGL用三角形インデックス\n\t */\n\tcreateTriangleIndex(i1, i2, i3, indexlist, materialIndex, uvlist) {\n\t\treturn new S3GLTriangleIndex(i1, i2, i3, indexlist, materialIndex, uvlist);\n\t}\n\n\t/**\n\t * GL用のテクスチャインスタンスを生成します。\n\t * @param {string|ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [name] テクスチャ名や画像データ\n\t * @returns {S3GLTexture} 生成されたGL用テクスチャ\n\t */\n\tcreateTexture(name) {\n\t\treturn new S3GLTexture(this, name);\n\t}\n\n\t/**\n\t * GL用のシーンインスタンスを生成します。\n\t * @returns {S3GLScene} 生成されたGL用シーン\n\t */\n\tcreateScene() {\n\t\treturn new S3GLScene();\n\t}\n\n\t/**\n\t * GL用のモデルインスタンスを生成します。\n\t * @returns {S3GLModel} 生成されたGL用モデル\n\t */\n\tcreateModel() {\n\t\treturn new S3GLModel();\n\t}\n\n\t/**\n\t * GL用のメッシュインスタンスを生成します。\n\t * @returns {S3GLMesh} 生成されたGL用メッシュ\n\t */\n\tcreateMesh() {\n\t\treturn new S3GLMesh(this);\n\t}\n\n\t/**\n\t * GL用のマテリアルインスタンスを生成します。\n\t * @param {string} [name] マテリアル名\n\t * @returns {S3GLMaterial} 生成されたGL用マテリアル\n\t */\n\tcreateMaterial(name) {\n\t\treturn new S3GLMaterial(this, name);\n\t}\n\n\t/**\n\t * GL用のライトインスタンスを生成します。\n\t * @returns {S3GLLight} 生成されたGL用ライト\n\t */\n\tcreateLight() {\n\t\treturn new S3GLLight();\n\t}\n\n\t/**\n\t * GL用のカメラインスタンスを生成します。\n\t * @returns {S3Camera} 生成されたGL用カメラ\n\t */\n\tcreateCamera() {\n\t\tconst camera = new S3Camera(/** @type {S3System} */ (/** @type {unknown} */ (this)));\n\t\treturn camera;\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/gl/S3GLSystem.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 487,
    "kind": "class",
    "name": "S3GLSystem",
    "memberof": "src/gl/S3GLSystem.js",
    "static": true,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/gl/S3GLSystem.js",
    "importStyle": "S3GLSystem",
    "description": "WebGLレンダリングシステムを管理するクラス。\nシェーダー、テクスチャ、バッファオブジェクトの生成・管理、および描画制御を担当。\nWebGLの初期化やプログラムのセットアップ、シーンの描画などの処理を含む。",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 488,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#constructor",
    "access": "public",
    "description": "S3GLSystemインスタンスを生成します。\nWebGLコンテキストやプログラムの初期設定を行います。",
    "lineNumber": 31
  },
  {
    "__docId__": 489,
    "kind": "member",
    "name": "program",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#program",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "type": {
      "nullable": true,
      "types": [
        "S3GLProgram"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 490,
    "kind": "member",
    "name": "gl",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#gl",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "type": {
      "nullable": true,
      "types": [
        "WebGLRenderingContext"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 491,
    "kind": "member",
    "name": "is_set",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#is_set",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 492,
    "kind": "member",
    "name": "program_list",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#program_list",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Array<S3GLProgram>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 493,
    "kind": "member",
    "name": "program_listId",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#program_listId",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 494,
    "kind": "member",
    "name": "canvas",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#canvas",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "HTMLCanvasElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 495,
    "kind": "member",
    "name": "_textureDummyId",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#_textureDummyId",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "type": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 496,
    "kind": "member",
    "name": "_textureDummyData",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#_textureDummyData",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "type": {
      "nullable": true,
      "types": [
        "WebGLTexture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 497,
    "kind": "typedef",
    "name": "S3GLFuncTextureCashEntry",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "static": true,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem.S3GLFuncTextureCashEntry",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "WebGLTexture"
        ],
        "spread": false,
        "optional": false,
        "name": "texture",
        "description": "WebGLテクスチャオブジェクト"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "このテクスチャの参照カウント"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3GLFuncTextureCashEntry"
    }
  },
  {
    "__docId__": 498,
    "kind": "typedef",
    "name": "S3GLFuncTextureCashTable",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "static": true,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem.S3GLFuncTextureCashTable",
    "access": "public",
    "description": "テクスチャキャッシュ全体の型定義。\nキーがテクスチャID（string）で、値がGLFuncTextureCashEntry型になります。",
    "type": {
      "types": [
        "Object.<string, S3GLFuncTextureCashEntry>"
      ],
      "optional": false,
      "name": "S3GLFuncTextureCashTable"
    }
  },
  {
    "__docId__": 499,
    "kind": "member",
    "name": "glfunc",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#glfunc",
    "access": "public",
    "description": "WebGLバッファ、テクスチャ、シェーダを作成・削除するユーティリティ関数群。",
    "lineNumber": 85,
    "type": {
      "types": [
        "{\"createBufferVBO\": *, \"createBufferIBO\": *, \"deleteBuffer\": *, \"createTexture\": *, \"deleteTexture\": *, \"createProgram\": *, \"deleteProgram\": *, \"createShader\": *, \"deleteShader\": *}"
      ]
    }
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "getGL",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#getGL",
    "access": "public",
    "description": "WebGLコンテキストを取得します。",
    "lineNumber": 283,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{WebGLRenderingContext} WebGLコンテキスト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WebGLRenderingContext"
      ],
      "spread": false,
      "description": "WebGLコンテキスト"
    },
    "params": []
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "isSetGL",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#isSetGL",
    "access": "public",
    "description": "WebGLコンテキストが設定されているかを確認します。",
    "lineNumber": 291,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 設定済みの場合true"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "設定済みの場合true"
    },
    "params": []
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "setCanvas",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#setCanvas",
    "access": "public",
    "description": "描画対象となるCanvasを設定します。",
    "lineNumber": 299,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLCanvasElement"
        ],
        "spread": false,
        "optional": false,
        "name": "canvas",
        "description": "描画対象のCanvas要素"
      }
    ],
    "return": null
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "createProgram",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#createProgram",
    "access": "public",
    "description": "新しいシェーダープログラムを生成し取得します。",
    "lineNumber": 313,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLProgram} 新規生成されたシェーダープログラム"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLProgram"
      ],
      "spread": false,
      "description": "新規生成されたシェーダープログラム"
    },
    "params": []
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "disposeProgram",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#disposeProgram",
    "access": "public",
    "description": "登録されている全てのシェーダープログラムを破棄します。",
    "lineNumber": 323,
    "params": [],
    "return": null
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "setProgram",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#setProgram",
    "access": "public",
    "description": "シェーダープログラムをアクティブにします。",
    "lineNumber": 335,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 設定が成功した場合true"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3GLProgram"
        ],
        "spread": false,
        "optional": false,
        "name": "glprogram",
        "description": "アクティブに設定するシェーダープログラム"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "設定が成功した場合true"
    }
  },
  {
    "__docId__": 511,
    "kind": "method",
    "name": "clear",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#clear",
    "access": "public",
    "description": "描画クリア処理を行います（背景色・深度バッファのリセット）。",
    "lineNumber": 370,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 成功時true"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "成功時true"
    },
    "params": []
  },
  {
    "__docId__": 512,
    "kind": "method",
    "name": "drawElements",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#drawElements",
    "access": "public",
    "description": "指定されたインデックスサイズに基づいて要素を描画します。",
    "lineNumber": 386,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 成功時true"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "indexsize",
        "description": "インデックスバッファのサイズ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "成功時true"
    }
  },
  {
    "__docId__": 513,
    "kind": "method",
    "name": "deleteBuffer",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#deleteBuffer",
    "access": "public",
    "description": "指定したWebGLバッファを削除します。",
    "lineNumber": 400,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 成功時true"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "WebGLBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "削除するバッファオブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "成功時true"
    }
  },
  {
    "__docId__": 514,
    "kind": "method",
    "name": "_getDummyTexture",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#_getDummyTexture",
    "access": "private",
    "description": "1x1ピクセルのダミーテクスチャ（WebGLTexture）を取得します。\nまだ生成されていない場合は新規作成します。テクスチャ未指定時の代替として利用されます。",
    "lineNumber": 413,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{WebGLTexture} ダミーテクスチャのWebGLTextureオブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WebGLTexture"
      ],
      "spread": false,
      "description": "ダミーテクスチャのWebGLTextureオブジェクト"
    },
    "params": []
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "_setDepthMode",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#_setDepthMode",
    "access": "private",
    "description": "深度バッファのテストモードをWebGLで有効化します。\n通常は自動的に呼ばれます。",
    "lineNumber": 431,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 成功時true"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "成功時true"
    },
    "params": []
  },
  {
    "__docId__": 518,
    "kind": "method",
    "name": "_setCullMode",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#_setCullMode",
    "access": "private",
    "description": "WebGLのカリングモード（描画面の制御）を設定します。\nカリングの有無・前面/背面/両面の設定も行います。",
    "lineNumber": 446,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 成功時true"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "成功時true"
    },
    "params": []
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "_bindStart",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#_bindStart",
    "access": "private",
    "description": "描画前処理として、アクティブなテクスチャIDをリセットします。\n通常は内部的に呼ばれます。",
    "lineNumber": 476,
    "params": [],
    "return": null
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "_bindEnd",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#_bindEnd",
    "access": "private",
    "description": "描画後処理として、バインド状態の解放やクリーンアップを行います。\n（本実装では何もしていません。拡張用）",
    "lineNumber": 484,
    "params": [],
    "return": null
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "_bind",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#_bind",
    "access": "private",
    "description": "モデル・uniforms・名前と値を与えた場合のデータバインド処理を実行します。\n- 2引数: シェーダ変数名とデータをバインド\n- 1引数: S3GLModelならメッシュ情報をバインド\n- 1引数: uniforms情報ならすべてのuniformsをバインド",
    "lineNumber": 495,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 0以上は成功、モデルの場合はIBOインデックス数（モデルの場合）"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "バインド対象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "0以上は成功、モデルの場合はIBOインデックス数（モデルの場合）"
    }
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "drawScene",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#drawScene",
    "access": "public",
    "description": "シーン全体を描画します。\nプログラム設定や深度・カリングモードの設定、各種Uniformやモデルバインド・描画を自動実行します。",
    "lineNumber": 532,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3GLScene"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": "描画対象のシーン"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "_disposeObject",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#_disposeObject",
    "access": "private",
    "description": "不要になったリソースを解放します（未実装）。",
    "lineNumber": 590,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "解放対象のオブジェクト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "createVertex",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#createVertex",
    "access": "public",
    "description": "GL用の頂点インスタンス（S3GLVertex）を生成します。",
    "lineNumber": 597,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLVertex} 生成されたGL用頂点"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "頂点座標"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLVertex"
      ],
      "spread": false,
      "description": "生成されたGL用頂点"
    }
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "createTriangleIndex",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#createTriangleIndex",
    "access": "public",
    "description": "GL用の三角形インデックスインスタンスを生成します。",
    "lineNumber": 611,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLTriangleIndex} 生成されたGL用三角形インデックス"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i1",
        "description": "頂点1のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i2",
        "description": "頂点2のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i3",
        "description": "頂点3のインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "indexlist",
        "description": "頂点インデックス配列"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "materialIndex",
        "description": "マテリアルインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Array<S3Vector>"
        ],
        "spread": false,
        "optional": true,
        "name": "uvlist",
        "description": "UV座標配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLTriangleIndex"
      ],
      "spread": false,
      "description": "生成されたGL用三角形インデックス"
    }
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "createTexture",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#createTexture",
    "access": "public",
    "description": "GL用のテクスチャインスタンスを生成します。",
    "lineNumber": 620,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLTexture} 生成されたGL用テクスチャ"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "ImageData",
          "HTMLImageElement",
          "HTMLCanvasElement",
          "HTMLVideoElement"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "テクスチャ名や画像データ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLTexture"
      ],
      "spread": false,
      "description": "生成されたGL用テクスチャ"
    }
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "createScene",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#createScene",
    "access": "public",
    "description": "GL用のシーンインスタンスを生成します。",
    "lineNumber": 628,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLScene} 生成されたGL用シーン"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLScene"
      ],
      "spread": false,
      "description": "生成されたGL用シーン"
    },
    "params": []
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "createModel",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#createModel",
    "access": "public",
    "description": "GL用のモデルインスタンスを生成します。",
    "lineNumber": 636,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLModel} 生成されたGL用モデル"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLModel"
      ],
      "spread": false,
      "description": "生成されたGL用モデル"
    },
    "params": []
  },
  {
    "__docId__": 529,
    "kind": "method",
    "name": "createMesh",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#createMesh",
    "access": "public",
    "description": "GL用のメッシュインスタンスを生成します。",
    "lineNumber": 644,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLMesh} 生成されたGL用メッシュ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLMesh"
      ],
      "spread": false,
      "description": "生成されたGL用メッシュ"
    },
    "params": []
  },
  {
    "__docId__": 530,
    "kind": "method",
    "name": "createMaterial",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#createMaterial",
    "access": "public",
    "description": "GL用のマテリアルインスタンスを生成します。",
    "lineNumber": 653,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLMaterial} 生成されたGL用マテリアル"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": "マテリアル名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLMaterial"
      ],
      "spread": false,
      "description": "生成されたGL用マテリアル"
    }
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "createLight",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#createLight",
    "access": "public",
    "description": "GL用のライトインスタンスを生成します。",
    "lineNumber": 661,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLLight} 生成されたGL用ライト"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLLight"
      ],
      "spread": false,
      "description": "生成されたGL用ライト"
    },
    "params": []
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "createCamera",
    "memberof": "src/gl/S3GLSystem.js~S3GLSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLSystem.js~S3GLSystem#createCamera",
    "access": "public",
    "description": "GL用のカメラインスタンスを生成します。",
    "lineNumber": 669,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Camera} 生成されたGL用カメラ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Camera"
      ],
      "spread": false,
      "description": "生成されたGL用カメラ"
    },
    "params": []
  },
  {
    "__docId__": 533,
    "kind": "file",
    "name": "src/gl/S3GLTexture.js",
    "content": "﻿import S3Texture from \"../basic/S3Texture.js\";\nimport S3GLSystem from \"./S3GLSystem.js\";\n\n/**\n * WebGL描画用のテクスチャクラス。\n * S3Textureを拡張し、WebGL用のGLTexture管理、GL用データ取得（getGLData）、破棄などを担います。\n * 画像データをGPUのテクスチャへ変換し、GLSLシェーダへのuniformバインドなどに利用します。\n *\n * @class\n * @extends S3Texture\n * @module S3\n */\nexport default class S3GLTexture extends S3Texture {\n\t/**\n\t * テクスチャを初期化します。\n\t * @param {S3GLSystem} s3glsystem GL用システムインスタンス（テクスチャ生成・削除などに必要）\n\t * @param {string|ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [data]\n\t *   初期化時に与える画像・動画・URLなど（省略可）\n\t */\n\tconstructor(s3glsystem, data) {\n\t\t// @ts-ignore\n\t\tsuper(s3glsystem, data);\n\n\t\t/**\n\t\t * S3GLSystem アクセス用\n\t\t * @type {S3GLSystem}\n\t\t */\n\t\tthis._s3gl = s3glsystem;\n\n\t\t/**\n\t\t * GL上のテクスチャオブジェクト\n\t\t * @type {?WebGLTexture}\n\t\t */\n\t\tthis.gldata = null;\n\t}\n\n\t/**\n\t * テクスチャ情報を初期化します。ロード状況やGLオブジェクトもリセットします。\n\t * 通常は内部用（再初期化や継承先での利用目的）。\n\t * @protect\n\t */\n\t_init() {\n\t\tsuper._init();\n\t\tthis.gldata = null;\n\t}\n\n\t/**\n\t * このテクスチャを破棄し、GLリソースも解放します。\n\t * dispose後は再利用できません。\n\t */\n\tdispose() {\n\t\tif (!this.is_dispose) {\n\t\t\t/**\n\t\t\t * テクスチャが破棄されたかどうか\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tthis.is_dispose = true;\n\t\t\tif (this.gldata !== null) {\n\t\t\t\tthis._s3gl.glfunc.deleteTexture(this.url);\n\t\t\t\tthis.gldata = null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * WebGL用テクスチャオブジェクト（GLTexture）を取得します。\n\t * 画像データがロード済みならGLテクスチャとして生成し、以後はキャッシュされます。\n\t * dispose済み、もしくは未ロードならnullを返します。\n\t * @returns {?WebGLTexture} WebGLテクスチャ（未生成・dispose時はnull）\n\t */\n\tgetGLData() {\n\t\tif (this.is_dispose) {\n\t\t\treturn null;\n\t\t}\n\t\tif (this.gldata !== null) {\n\t\t\treturn this.gldata;\n\t\t}\n\t\tif (this.is_loadimage) {\n\t\t\tthis.gldata = this._s3gl.glfunc.createTexture(this.url, this.image);\n\t\t\treturn this.gldata;\n\t\t}\n\t\treturn null;\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/gl/S3GLTexture.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 534,
    "kind": "class",
    "name": "S3GLTexture",
    "memberof": "src/gl/S3GLTexture.js",
    "static": true,
    "longname": "src/gl/S3GLTexture.js~S3GLTexture",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/gl/S3GLTexture.js",
    "importStyle": "S3GLTexture",
    "description": "WebGL描画用のテクスチャクラス。\nS3Textureを拡張し、WebGL用のGLTexture管理、GL用データ取得（getGLData）、破棄などを担います。\n画像データをGPUのテクスチャへ変換し、GLSLシェーダへのuniformバインドなどに利用します。",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 535,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/gl/S3GLTexture.js~S3GLTexture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLTexture.js~S3GLTexture#constructor",
    "access": "public",
    "description": "テクスチャを初期化します。",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3GLSystem"
        ],
        "spread": false,
        "optional": false,
        "name": "s3glsystem",
        "description": "GL用システムインスタンス（テクスチャ生成・削除などに必要）"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "ImageData",
          "HTMLImageElement",
          "HTMLCanvasElement",
          "HTMLVideoElement"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "初期化時に与える画像・動画・URLなど（省略可）"
      }
    ]
  },
  {
    "__docId__": 536,
    "kind": "member",
    "name": "_s3gl",
    "memberof": "src/gl/S3GLTexture.js~S3GLTexture",
    "static": false,
    "longname": "src/gl/S3GLTexture.js~S3GLTexture#_s3gl",
    "access": "private",
    "description": "S3GLSystem アクセス用",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "S3GLSystem"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 537,
    "kind": "member",
    "name": "gldata",
    "memberof": "src/gl/S3GLTexture.js~S3GLTexture",
    "static": false,
    "longname": "src/gl/S3GLTexture.js~S3GLTexture#gldata",
    "access": "public",
    "description": "GL上のテクスチャオブジェクト",
    "lineNumber": 34,
    "type": {
      "nullable": true,
      "types": [
        "WebGLTexture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 538,
    "kind": "method",
    "name": "_init",
    "memberof": "src/gl/S3GLTexture.js~S3GLTexture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLTexture.js~S3GLTexture#_init",
    "access": "private",
    "description": "テクスチャ情報を初期化します。ロード状況やGLオブジェクトもリセットします。\n通常は内部用（再初期化や継承先での利用目的）。",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@protect",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 540,
    "kind": "method",
    "name": "dispose",
    "memberof": "src/gl/S3GLTexture.js~S3GLTexture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLTexture.js~S3GLTexture#dispose",
    "access": "public",
    "description": "このテクスチャを破棄し、GLリソースも解放します。\ndispose後は再利用できません。",
    "lineNumber": 51,
    "params": [],
    "return": null
  },
  {
    "__docId__": 541,
    "kind": "member",
    "name": "is_dispose",
    "memberof": "src/gl/S3GLTexture.js~S3GLTexture",
    "static": false,
    "longname": "src/gl/S3GLTexture.js~S3GLTexture#is_dispose",
    "access": "public",
    "description": "テクスチャが破棄されたかどうか",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 543,
    "kind": "method",
    "name": "getGLData",
    "memberof": "src/gl/S3GLTexture.js~S3GLTexture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLTexture.js~S3GLTexture#getGLData",
    "access": "public",
    "description": "WebGL用テクスチャオブジェクト（GLTexture）を取得します。\n画像データがロード済みならGLテクスチャとして生成し、以後はキャッシュされます。\ndispose済み、もしくは未ロードならnullを返します。",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{?WebGLTexture} WebGLテクスチャ（未生成・dispose時はnull）"
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "WebGLTexture"
      ],
      "spread": false,
      "description": "WebGLテクスチャ（未生成・dispose時はnull）"
    },
    "params": []
  },
  {
    "__docId__": 545,
    "kind": "file",
    "name": "src/gl/S3GLTriangleIndex.js",
    "content": "﻿import S3TriangleIndex from \"../basic/S3TriangleIndex.js\";\nimport S3GLTriangleIndexData from \"./S3GLTriangleIndexData.js\";\nimport S3Vector from \"../math/S3Vector.js\";\n\n/**\n * WebGL描画用の三角形インデックスクラス。\n * 基本のS3TriangleIndexを拡張し、GL用属性データ生成（S3GLTriangleIndexData化）などを追加しています。\n * 頂点インデックス・マテリアル番号・UV座標などの情報を持ち、WebGL向け処理の土台となります。\n *\n * @class\n * @extends S3TriangleIndex\n * @module S3\n */\nexport default class S3GLTriangleIndex extends S3TriangleIndex {\n\t/**\n\t * ABCの頂点を囲む三角形ポリゴンを作成します。\n\t * @param {number} i1 配列内の頂点Aのインデックス\n\t * @param {number} i2 配列内の頂点Bのインデックス\n\t * @param {number} i3 配列内の頂点Cのインデックス\n\t * @param {Array<number>} indexlist 頂点インデックス配列\n\t * @param {number} [materialIndex] 使用するマテリアルのインデックス（省略時や負値の場合は0）\n\t * @param {Array<S3Vector>} [uvlist] UV座標配列（S3Vector配列、なくても可）\n\t */\n\tconstructor(i1, i2, i3, indexlist, materialIndex, uvlist) {\n\t\tsuper(i1, i2, i3, indexlist, materialIndex, uvlist);\n\t}\n\n\t/**\n\t * この三角形インデックスのクローン（複製）を作成します。\n\t * @returns {S3GLTriangleIndex} 複製されたS3GLTriangleIndexインスタンス\n\t */\n\tclone() {\n\t\t// @ts-ignore\n\t\treturn super.clone(S3GLTriangleIndex);\n\t}\n\n\t/**\n\t * 三角形の頂点順序を反転した新しいインスタンスを作成します。\n\t * モデルの表裏を逆転したい場合などに利用します。\n\t * @returns {S3GLTriangleIndex} 頂点順序を逆にした新しい三角形インデックス\n\t */\n\tinverseTriangle() {\n\t\t// @ts-ignore\n\t\treturn super.inverseTriangle(S3GLTriangleIndex);\n\t}\n\t/**\n\t * この三角形の情報をWebGL用属性データ（S3GLTriangleIndexData）として生成します。\n\t * 法線・UV・接線等も含めた拡張情報付きで返します。\n\t * @returns {S3GLTriangleIndexData} WebGL向け属性データ\n\t */\n\tcreateGLTriangleIndexData() {\n\t\treturn new S3GLTriangleIndexData(this);\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/gl/S3GLTriangleIndex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 546,
    "kind": "class",
    "name": "S3GLTriangleIndex",
    "memberof": "src/gl/S3GLTriangleIndex.js",
    "static": true,
    "longname": "src/gl/S3GLTriangleIndex.js~S3GLTriangleIndex",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/gl/S3GLTriangleIndex.js",
    "importStyle": "S3GLTriangleIndex",
    "description": "WebGL描画用の三角形インデックスクラス。\n基本のS3TriangleIndexを拡張し、GL用属性データ生成（S3GLTriangleIndexData化）などを追加しています。\n頂点インデックス・マテリアル番号・UV座標などの情報を持ち、WebGL向け処理の土台となります。",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 547,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/gl/S3GLTriangleIndex.js~S3GLTriangleIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLTriangleIndex.js~S3GLTriangleIndex#constructor",
    "access": "public",
    "description": "ABCの頂点を囲む三角形ポリゴンを作成します。",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i1",
        "description": "配列内の頂点Aのインデックス"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i2",
        "description": "配列内の頂点Bのインデックス"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i3",
        "description": "配列内の頂点Cのインデックス"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "indexlist",
        "description": "頂点インデックス配列"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "materialIndex",
        "description": "使用するマテリアルのインデックス（省略時や負値の場合は0）"
      },
      {
        "nullable": null,
        "types": [
          "Array<S3Vector>"
        ],
        "spread": false,
        "optional": true,
        "name": "uvlist",
        "description": "UV座標配列（S3Vector配列、なくても可）"
      }
    ]
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "clone",
    "memberof": "src/gl/S3GLTriangleIndex.js~S3GLTriangleIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLTriangleIndex.js~S3GLTriangleIndex#clone",
    "access": "public",
    "description": "この三角形インデックスのクローン（複製）を作成します。",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLTriangleIndex} 複製されたS3GLTriangleIndexインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLTriangleIndex"
      ],
      "spread": false,
      "description": "複製されたS3GLTriangleIndexインスタンス"
    },
    "params": []
  },
  {
    "__docId__": 549,
    "kind": "method",
    "name": "inverseTriangle",
    "memberof": "src/gl/S3GLTriangleIndex.js~S3GLTriangleIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLTriangleIndex.js~S3GLTriangleIndex#inverseTriangle",
    "access": "public",
    "description": "三角形の頂点順序を反転した新しいインスタンスを作成します。\nモデルの表裏を逆転したい場合などに利用します。",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLTriangleIndex} 頂点順序を逆にした新しい三角形インデックス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLTriangleIndex"
      ],
      "spread": false,
      "description": "頂点順序を逆にした新しい三角形インデックス"
    },
    "params": []
  },
  {
    "__docId__": 550,
    "kind": "method",
    "name": "createGLTriangleIndexData",
    "memberof": "src/gl/S3GLTriangleIndex.js~S3GLTriangleIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLTriangleIndex.js~S3GLTriangleIndex#createGLTriangleIndexData",
    "access": "public",
    "description": "この三角形の情報をWebGL用属性データ（S3GLTriangleIndexData）として生成します。\n法線・UV・接線等も含めた拡張情報付きで返します。",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLTriangleIndexData} WebGL向け属性データ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLTriangleIndexData"
      ],
      "spread": false,
      "description": "WebGL向け属性データ"
    },
    "params": []
  },
  {
    "__docId__": 551,
    "kind": "file",
    "name": "src/gl/S3GLTriangleIndexData.js",
    "content": "﻿import S3Vector from \"../math/S3Vector.js\";\nimport S3GLTriangleIndex from \"./S3GLTriangleIndex.js\";\nimport S3GLArray from \"./S3GLArray.js\";\nimport S3GLVertex from \"./S3GLVertex.js\";\n\n/**\n * WebGL描画用の三角形インデックス・属性データ格納クラス。\n * 三角形ごとの頂点インデックス・UV・法線・接線・従法線などを保持し、\n * WebGL（GLSL）用に最適化されたデータ生成やハッシュ作成も担います。\n *\n * @class\n * @module S3\n */\nexport default class S3GLTriangleIndexData {\n\t/**\n\t * 三角形インデックス情報からGL用データ構造を生成します。\n\t * @param {S3GLTriangleIndex} triangle_index S3GLTriangleIndexなどの三角形インデックス情報\n\t */\n\tconstructor(triangle_index) {\n\t\t/**\n\t\t * 各頂点を示すインデックス配列\n\t\t * @type {number[]}\n\t\t */\n\t\tthis.index = triangle_index.index;\n\n\t\t/**\n\t\t * 面が使用するマテリアル番号\n\t\t * @type {number}\n\t\t */\n\t\tthis.materialIndex = triangle_index.materialIndex;\n\n\t\t/**\n\t\t * 各頂点のUV座標（S3Vectorの配列）\n\t\t * @type {Array<S3Vector>}\n\t\t */\n\t\tthis.uv = triangle_index.uv;\n\n\t\t/**\n\t\t * UV情報が有効かどうか\n\t\t * @type {boolean}\n\t\t */\n\t\tthis._isEnabledTexture = triangle_index.uv[0] !== null;\n\n\t\t/**\n\t\t * 面（フェース）単位の属性情報型。\n\t\t * S3Vector.getTangentVector で計算された面の法線・接線・従法線（すべてS3Vector型またはnull）。\n\t\t *\n\t\t * @typedef {Object} S3GLFaceAttribute\n\t\t * @property {?S3Vector} normal   面の法線ベクトル\n\t\t * @property {?S3Vector} tangent  面の接線ベクトル\n\t\t * @property {?S3Vector} binormal 面の従法線ベクトル\n\t\t */\n\n\t\t/**\n\t\t * 頂点単位の属性情報型。\n\t\t * 各頂点（3つ）の法線・接線・従法線（いずれもS3Vector型またはnull）の配列。\n\t\t *\n\t\t * @typedef {Object} S3GLVertexAttribute\n\t\t * @property {Array<?S3Vector>} normal   各頂点の法線ベクトル [0], [1], [2]\n\t\t * @property {Array<?S3Vector>} tangent  各頂点の接線ベクトル [0], [1], [2]\n\t\t * @property {Array<?S3Vector>} binormal 各頂点の従法線ベクトル [0], [1], [2]\n\t\t */\n\n\t\t/**\n\t\t * 面の法線・接線・従法線\n\t\t * @type {S3GLFaceAttribute}\n\t\t */\n\t\tthis.face = {\n\t\t\tnormal: null,\n\t\t\ttangent: null,\n\t\t\tbinormal: null\n\t\t};\n\n\t\t/**\n\t\t * 各頂点（3つ）の法線・接線・従法線の配列\n\t\t * @type {S3GLVertexAttribute}\n\t\t */\n\t\tthis.vertex = {\n\t\t\tnormal: [null, null, null],\n\t\t\ttangent: [null, null, null],\n\t\t\tbinormal: [null, null, null]\n\t\t};\n\t}\n\n\t/**\n\t * この三角形の、指定頂点（number番目）についてWebGL用一意ハッシュ値を生成します。\n\t * 頂点情報・UV・法線などを元にGLバッファのキャッシュや識別に使えます。\n\t * @param {number} number 三角形の頂点番号（0, 1, 2）\n\t * @param {Array<S3GLVertex>} vertexList 全頂点配列\n\t * @returns {string} 頂点＋属性を加味したハッシュ文字列\n\t */\n\tgetGLHash(number, vertexList) {\n\t\tconst uvdata = this._isEnabledTexture\n\t\t\t? this.uv[number].toString(2) + this.face.binormal.toString(2) + this.face.tangent.toString(2)\n\t\t\t: \"\";\n\t\tconst vertex = vertexList[this.index[number]].getGLHash();\n\t\treturn vertex + this.materialIndex + uvdata + this.vertex.normal[number].toString(3);\n\t}\n\n\t/**\n\t * 指定頂点のWebGL向け頂点属性データ（GLSL用attribute名に合わせたデータ群）を返します。\n\t * 位置・マテリアル番号・UV・法線・接線・従法線などがGLArray形式で格納されます。\n\t *\n\t * - vertexPosition: 頂点位置(vec3)\n\t * - vertexTextureCoord: UV座標(vec2)\n\t * - vertexMaterialFloat: マテリアル番号(float)\n\t * - vertexNormal: 法線ベクトル(vec3)\n\t * - vertexBinormal: 従法線ベクトル(vec3)\n\t * - vertexTangent: 接線ベクトル(vec3)\n\t *\n\t * @param {number} number 三角形内の何番目の頂点データを取得するか（0, 1, 2）\n\t * @param {Array<S3GLVertex>} vertexList 頂点の配列\n\t * @returns {{[key: string]: S3GLArray}}\n\t */\n\tgetGLData(number, vertexList) {\n\t\t/**\n\t\t * @type {{[key: string]: S3GLArray}}\n\t\t */\n\t\tconst vertex = {};\n\t\tconst vertexdata_list = vertexList[this.index[number]].getGLData();\n\t\tfor (const key in vertexdata_list) {\n\t\t\tvertex[key] = vertexdata_list[key];\n\t\t}\n\t\tconst uvdata = this._isEnabledTexture ? this.uv[number] : new S3Vector(0.0, 0.0);\n\t\tvertex.vertexTextureCoord = new S3GLArray(uvdata, 2, S3GLArray.datatype.Float32Array);\n\t\tvertex.vertexMaterialFloat = new S3GLArray(this.materialIndex, 1, S3GLArray.datatype.Float32Array);\n\t\tvertex.vertexNormal = new S3GLArray(this.vertex.normal[number], 3, S3GLArray.datatype.Float32Array);\n\t\tvertex.vertexBinormal = new S3GLArray(this.vertex.binormal[number], 3, S3GLArray.datatype.Float32Array);\n\t\tvertex.vertexTangent = new S3GLArray(this.vertex.tangent[number], 3, S3GLArray.datatype.Float32Array);\n\t\treturn vertex;\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/gl/S3GLTriangleIndexData.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 552,
    "kind": "class",
    "name": "S3GLTriangleIndexData",
    "memberof": "src/gl/S3GLTriangleIndexData.js",
    "static": true,
    "longname": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/gl/S3GLTriangleIndexData.js",
    "importStyle": "S3GLTriangleIndexData",
    "description": "WebGL描画用の三角形インデックス・属性データ格納クラス。\n三角形ごとの頂点インデックス・UV・法線・接線・従法線などを保持し、\nWebGL（GLSL）用に最適化されたデータ生成やハッシュ作成も担います。",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 553,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData#constructor",
    "access": "public",
    "description": "三角形インデックス情報からGL用データ構造を生成します。",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3GLTriangleIndex"
        ],
        "spread": false,
        "optional": false,
        "name": "triangle_index",
        "description": "S3GLTriangleIndexなどの三角形インデックス情報"
      }
    ]
  },
  {
    "__docId__": 554,
    "kind": "member",
    "name": "index",
    "memberof": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData",
    "static": false,
    "longname": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData#index",
    "access": "public",
    "description": "各頂点を示すインデックス配列",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 555,
    "kind": "member",
    "name": "materialIndex",
    "memberof": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData",
    "static": false,
    "longname": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData#materialIndex",
    "access": "public",
    "description": "面が使用するマテリアル番号",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 556,
    "kind": "member",
    "name": "uv",
    "memberof": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData",
    "static": false,
    "longname": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData#uv",
    "access": "public",
    "description": "各頂点のUV座標（S3Vectorの配列）",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "Array<S3Vector>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 557,
    "kind": "member",
    "name": "_isEnabledTexture",
    "memberof": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData",
    "static": false,
    "longname": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData#_isEnabledTexture",
    "access": "private",
    "description": "UV情報が有効かどうか",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 558,
    "kind": "typedef",
    "name": "S3GLFaceAttribute",
    "memberof": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData",
    "static": true,
    "longname": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData.S3GLFaceAttribute",
    "access": "public",
    "description": "面（フェース）単位の属性情報型。\nS3Vector.getTangentVector で計算された面の法線・接線・従法線（すべてS3Vector型またはnull）。",
    "properties": [
      {
        "nullable": true,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "normal",
        "description": "面の法線ベクトル"
      },
      {
        "nullable": true,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "tangent",
        "description": "面の接線ベクトル"
      },
      {
        "nullable": true,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "binormal",
        "description": "面の従法線ベクトル"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3GLFaceAttribute"
    }
  },
  {
    "__docId__": 559,
    "kind": "typedef",
    "name": "S3GLVertexAttribute",
    "memberof": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData",
    "static": true,
    "longname": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData.S3GLVertexAttribute",
    "access": "public",
    "description": "頂点単位の属性情報型。\n各頂点（3つ）の法線・接線・従法線（いずれもS3Vector型またはnull）の配列。",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array<?S3Vector>"
        ],
        "spread": false,
        "optional": false,
        "name": "normal",
        "description": "各頂点の法線ベクトル [0], [1], [2]"
      },
      {
        "nullable": null,
        "types": [
          "Array<?S3Vector>"
        ],
        "spread": false,
        "optional": false,
        "name": "tangent",
        "description": "各頂点の接線ベクトル [0], [1], [2]"
      },
      {
        "nullable": null,
        "types": [
          "Array<?S3Vector>"
        ],
        "spread": false,
        "optional": false,
        "name": "binormal",
        "description": "各頂点の従法線ベクトル [0], [1], [2]"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3GLVertexAttribute"
    }
  },
  {
    "__docId__": 560,
    "kind": "member",
    "name": "face",
    "memberof": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData",
    "static": false,
    "longname": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData#face",
    "access": "public",
    "description": "面の法線・接線・従法線",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "S3GLFaceAttribute"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 561,
    "kind": "member",
    "name": "vertex",
    "memberof": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData",
    "static": false,
    "longname": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData#vertex",
    "access": "public",
    "description": "各頂点（3つ）の法線・接線・従法線の配列",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "S3GLVertexAttribute"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "getGLHash",
    "memberof": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData#getGLHash",
    "access": "public",
    "description": "この三角形の、指定頂点（number番目）についてWebGL用一意ハッシュ値を生成します。\n頂点情報・UV・法線などを元にGLバッファのキャッシュや識別に使えます。",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 頂点＋属性を加味したハッシュ文字列"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "三角形の頂点番号（0, 1, 2）"
      },
      {
        "nullable": null,
        "types": [
          "Array<S3GLVertex>"
        ],
        "spread": false,
        "optional": false,
        "name": "vertexList",
        "description": "全頂点配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "頂点＋属性を加味したハッシュ文字列"
    }
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "getGLData",
    "memberof": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLTriangleIndexData.js~S3GLTriangleIndexData#getGLData",
    "access": "public",
    "description": "指定頂点のWebGL向け頂点属性データ（GLSL用attribute名に合わせたデータ群）を返します。\n位置・マテリアル番号・UV・法線・接線・従法線などがGLArray形式で格納されます。\n\n- vertexPosition: 頂点位置(vec3)\n- vertexTextureCoord: UV座標(vec2)\n- vertexMaterialFloat: マテリアル番号(float)\n- vertexNormal: 法線ベクトル(vec3)\n- vertexBinormal: 従法線ベクトル(vec3)\n- vertexTangent: 接線ベクトル(vec3)",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{[key: string]: S3GLArray}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "三角形内の何番目の頂点データを取得するか（0, 1, 2）"
      },
      {
        "nullable": null,
        "types": [
          "Array<S3GLVertex>"
        ],
        "spread": false,
        "optional": false,
        "name": "vertexList",
        "description": "頂点の配列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{[key: string]: S3GLArray}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 564,
    "kind": "file",
    "name": "src/gl/S3GLVertex.js",
    "content": "﻿import S3Vertex from \"../basic/S3Vertex.js\";\nimport S3Vector from \"../math/S3Vector.js\";\nimport S3GLArray from \"./S3GLArray.js\";\n\n/**\n * WebGL描画用の頂点（バーテックス）クラス。\n * S3Vertexを拡張し、GL用データ生成やハッシュ化などを提供します。\n * 頂点情報（位置）をGL向け形式に変換し、バーテックスシェーダのattributeと連携できます。\n *\n * @class\n * @extends S3Vertex\n * @module S3\n */\nexport default class S3GLVertex extends S3Vertex {\n\t/**\n\t * S3GLVertexのインスタンスを生成します。\n\t * @param {S3Vector} position 頂点の3次元位置ベクトル\n\t */\n\tconstructor(position) {\n\t\tsuper(position);\n\t}\n\n\t/**\n\t * この頂点のクローン（複製）を作成します。\n\t * @returns {S3GLVertex} 複製されたS3GLVertexインスタンス\n\t */\n\tclone() {\n\t\t// @ts-ignore\n\t\treturn super.clone(S3GLVertex);\n\t}\n\n\t/**\n\t * WebGL用の一意なハッシュ値を返します。\n\t * 頂点座標情報から3進数文字列で算出されます。\n\t * 頂点共有やVBO再利用の判定等で用います。\n\t * @returns {string} 頂点を識別するハッシュ文字列\n\t */\n\tgetGLHash() {\n\t\treturn this.position.toString(3);\n\t}\n\n\t/**\n\t * 頂点情報をWebGL用データ形式（attribute変数用）で返します。\n\t * GLSLバーテックスシェーダの「vertexPosition」属性と対応します。\n\t *\n\t * - vertexPosition: 頂点の位置情報（vec3/Float32ArrayとしてGLに渡す）\n\t * @returns {{[key: string]: S3GLArray}}\n\t */\n\tgetGLData() {\n\t\treturn {\n\t\t\tvertexPosition: new S3GLArray(this.position, 3, S3GLArray.datatype.Float32Array)\n\t\t};\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/gl/S3GLVertex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 565,
    "kind": "class",
    "name": "S3GLVertex",
    "memberof": "src/gl/S3GLVertex.js",
    "static": true,
    "longname": "src/gl/S3GLVertex.js~S3GLVertex",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/gl/S3GLVertex.js",
    "importStyle": "S3GLVertex",
    "description": "WebGL描画用の頂点（バーテックス）クラス。\nS3Vertexを拡張し、GL用データ生成やハッシュ化などを提供します。\n頂点情報（位置）をGL向け形式に変換し、バーテックスシェーダのattributeと連携できます。",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 566,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/gl/S3GLVertex.js~S3GLVertex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLVertex.js~S3GLVertex#constructor",
    "access": "public",
    "description": "S3GLVertexのインスタンスを生成します。",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "頂点の3次元位置ベクトル"
      }
    ]
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "clone",
    "memberof": "src/gl/S3GLVertex.js~S3GLVertex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLVertex.js~S3GLVertex#clone",
    "access": "public",
    "description": "この頂点のクローン（複製）を作成します。",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3GLVertex} 複製されたS3GLVertexインスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3GLVertex"
      ],
      "spread": false,
      "description": "複製されたS3GLVertexインスタンス"
    },
    "params": []
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "getGLHash",
    "memberof": "src/gl/S3GLVertex.js~S3GLVertex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLVertex.js~S3GLVertex#getGLHash",
    "access": "public",
    "description": "WebGL用の一意なハッシュ値を返します。\n頂点座標情報から3進数文字列で算出されます。\n頂点共有やVBO再利用の判定等で用います。",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 頂点を識別するハッシュ文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "頂点を識別するハッシュ文字列"
    },
    "params": []
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "getGLData",
    "memberof": "src/gl/S3GLVertex.js~S3GLVertex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/gl/S3GLVertex.js~S3GLVertex#getGLData",
    "access": "public",
    "description": "頂点情報をWebGL用データ形式（attribute変数用）で返します。\nGLSLバーテックスシェーダの「vertexPosition」属性と対応します。\n\n- vertexPosition: 頂点の位置情報（vec3/Float32ArrayとしてGLに渡す）",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{[key: string]: S3GLArray}}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{[key: string]: S3GLArray}"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 570,
    "kind": "file",
    "name": "src/loader/S3MeshLoader.js",
    "content": "﻿import S3System from \"../basic/S3System.js\";\nimport S3Mesh from \"../basic/S3Mesh.js\";\nimport S3MeshLoaderJSON from \"./S3MeshLoaderJSON.js\";\nimport S3MeshLoaderMQO from \"./S3MeshLoaderMQO.js\";\nimport S3MeshLoaderOBJ from \"./S3MeshLoaderOBJ.js\";\n\n/**\n * メッシュデータの入出力用関数定義\n * @typedef {Object} S3MeshLoaderDataIOFunvction\n * @property {string} name 入出力形式の名前（\"JSON\", \"MQO\", \"OBJ\"など）\n * @property {function(S3System, S3Mesh, string, string=): boolean} input テキストをインスタンスへ変換する\n * @property {function(S3Mesh): string} [output] インスタンスをテキストへ出力する\n */\n\n/**\n * @type {Array<S3MeshLoaderDataIOFunvction>}\n */\nconst DATA_IO_FUNCTION = [S3MeshLoaderJSON, S3MeshLoaderMQO, S3MeshLoaderOBJ];\n\n/**\n * 3DCGメッシュデータの入出力を管理するローダー\n *\n * MQO/OBJ/JSONなど、各種3DフォーマットからS3Meshインスタンスへの変換（インポート）、\n * およびS3Meshから各形式へのエクスポート（出力）をまとめて扱うユーティリティオブジェクトです。\n *\n * 利用例:\n *   - ファイルの拡張子や種類ごとにパースしてS3Meshを構築\n *   - S3Meshを指定形式でテキスト化\n *   - 各形式への入出力用コールバックを内部で管理\n *\n * @class\n * @module S3\n */\nconst S3MeshLoader = {\n\t/**\n\t * 任意の3Dデータを指定形式でS3Meshに変換（インポート）します。\n\t *\n\t * - 文字列（URL）の場合はダウンロードして自動的にインポート\n\t * - テキスト／データ本体の場合は直接パース\n\t * - コールバックを指定すると非同期処理後に呼ばれます\n\t *\n\t * @param {S3System} s3system S3Systemインスタンス（S3Mesh生成等に必要）\n\t * @param {string|Object} data 3Dデータ本体またはデータ取得用URL\n\t * @param {string} [type] データの拡張子（\"JSON\", \"MQO\", \"OBJ\"）, data がURLの場合は自動判別されます。\n\t * @param {function(S3Mesh):void} [callback] データインポート後に呼ばれるコールバック（省略時は即時同期）\n\t * @returns {S3Mesh} 生成されたS3Meshインスタンス（非同期時も仮のインスタンスを返す）\n\t */\n\tinputData: function (s3system, data, type, callback) {\n\t\tconst s3mesh = s3system.createMesh();\n\t\tlet this_type = type ? type.toUpperCase() : \"\";\n\n\t\t/**\n\t\t * データ本体を指定フォーマットでS3Meshに変換し、必要ならコールバックを呼び出します。\n\t\t *\n\t\t * @param {string|any} ldata 3Dデータ本体（テキストまたはJSONなど）\n\t\t * @param {string} url データ取得元URL（直接データの場合は空文字列）\n\t\t */\n\t\tconst load = function (ldata, url) {\n\t\t\ts3mesh._init();\n\t\t\tfor (let i = 0; i < DATA_IO_FUNCTION.length; i++) {\n\t\t\t\tif (DATA_IO_FUNCTION[i].name === this_type) {\n\t\t\t\t\tconst isLoad = DATA_IO_FUNCTION[i].input(s3system, s3mesh, ldata, url);\n\t\t\t\t\ts3mesh.setComplete(isLoad);\n\t\t\t\t\tif (callback) {\n\t\t\t\t\t\tcallback(s3mesh);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t * データのダウンロード完了時に呼ばれるコールバック関数。\n\t\t * ダウンロードしたテキストデータを `load` 関数へ渡し、メッシュへのインポート処理を行います。\n\t\t * @param {string} text 取得した3Dデータ本体（テキストデータ）\n\t\t */\n\t\tconst downloadCallback = function (text) {\n\t\t\tload(text, typeof data === \"string\" ? data : undefined);\n\t\t};\n\t\t// 文字列がある場合\n\t\tif (typeof data === \"string\" && data.indexOf(\"\\n\") === -1) {\n\t\t\t// 拡張子が設定されている場合\n\t\t\tif (data.indexOf(\".\") !== -1) {\n\t\t\t\tconst ext = data.split(\".\").pop();\n\t\t\t\tfor (let i = 0; i < DATA_IO_FUNCTION.length; i++) {\n\t\t\t\t\tif (DATA_IO_FUNCTION[i].name === ext.toUpperCase()) {\n\t\t\t\t\t\tthis_type = ext.toUpperCase();\n\t\t\t\t\t\ts3system._download(data, downloadCallback);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tload(data, \"\");\n\t\treturn s3mesh;\n\t},\n\n\t/**\n\t * S3Meshインスタンスを指定フォーマットでエクスポート（テキスト化）します。\n\t *\n\t * @param {S3Mesh} s3mesh 出力対象のメッシュ\n\t * @param {string} type 出力の形式（\"JSON\"、\"MQO\"、\"OBJ\" など）\n\t * @returns {string} 指定フォーマットのテキストデータ\n\t */\n\toutputData: function (s3mesh, type) {\n\t\tfor (let i = 0; i < DATA_IO_FUNCTION.length; i++) {\n\t\t\tif (DATA_IO_FUNCTION[i].name === type.toUpperCase()) {\n\t\t\t\tif (DATA_IO_FUNCTION[i].output) {\n\t\t\t\t\treturn DATA_IO_FUNCTION[i].output(s3mesh);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n};\n\nexport default S3MeshLoader;\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/loader/S3MeshLoader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 571,
    "kind": "typedef",
    "name": "S3MeshLoaderDataIOFunvction",
    "memberof": "src/loader/S3MeshLoader.js",
    "static": true,
    "longname": "src/loader/S3MeshLoader.js~S3MeshLoaderDataIOFunvction",
    "access": "public",
    "description": "メッシュデータの入出力用関数定義",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "入出力形式の名前（\"JSON\", \"MQO\", \"OBJ\"など）"
      },
      {
        "nullable": null,
        "types": [
          "function(S3System, S3Mesh, string, string=): boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "テキストをインスタンスへ変換する"
      },
      {
        "nullable": null,
        "types": [
          "function(S3Mesh): string"
        ],
        "spread": false,
        "optional": true,
        "name": "output",
        "description": "インスタンスをテキストへ出力する"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3MeshLoaderDataIOFunvction"
    }
  },
  {
    "__docId__": 572,
    "kind": "variable",
    "name": "DATA_IO_FUNCTION",
    "memberof": "src/loader/S3MeshLoader.js",
    "static": true,
    "longname": "src/loader/S3MeshLoader.js~DATA_IO_FUNCTION",
    "access": "public",
    "export": false,
    "importPath": "s3js/src/loader/S3MeshLoader.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Array<S3MeshLoaderDataIOFunvction>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 573,
    "kind": "variable",
    "name": "S3MeshLoader",
    "memberof": "src/loader/S3MeshLoader.js",
    "static": true,
    "longname": "src/loader/S3MeshLoader.js~S3MeshLoader",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/loader/S3MeshLoader.js",
    "importStyle": "S3MeshLoader",
    "description": "3DCGメッシュデータの入出力を管理するローダー\n\nMQO/OBJ/JSONなど、各種3DフォーマットからS3Meshインスタンスへの変換（インポート）、\nおよびS3Meshから各形式へのエクスポート（出力）をまとめて扱うユーティリティオブジェクトです。\n\n利用例:\n  - ファイルの拡張子や種類ごとにパースしてS3Meshを構築\n  - S3Meshを指定形式でテキスト化\n  - 各形式への入出力用コールバックを内部で管理",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "type": {
      "types": [
        "{\"inputData\": *, \"outputData\": *}"
      ]
    }
  },
  {
    "__docId__": 574,
    "kind": "file",
    "name": "src/loader/S3MeshLoaderJSON.js",
    "content": "﻿import S3System from \"../basic/S3System.js\";\nimport S3Mesh from \"../basic/S3Mesh.js\";\nimport S3Material from \"../basic/S3Material.js\";\nimport S3Vector from \"../math/S3Vector.js\";\n\n/*\n\t次のようなデータを入出力できます。\n\tconst sample = {\n\t\tIndexes:{\n\t\t\tbody:[\n\t\t\t\t[ 0, 1, 2],\n\t\t\t\t[ 3, 1, 0],\n\t\t\t\t[ 3, 0, 2],\n\t\t\t\t[ 3, 2, 1]\n\t\t\t]\n\t\t},\n\t\tVertices:[\n\t\t\t[  0,  0,  -5],\n\t\t\t[  0, 20,  -5],\n\t\t\t[ 10,  0,  -5],\n\t\t\t[  0,  0, -20]\n\t\t]\n\t};\n*/\n\n/**\n * JSON形式による3DCGメッシュデータの入出力ユーティリティ\n *\n * - 頂点配列（Vertices）や面インデックス配列（Indexes）を持つJSONデータを\n *   S3Meshインスタンスへ変換（インポート）、またはS3MeshからJSON形式で出力（エクスポート）します。\n * - 三角形・四角形など複数頂点数の面、マテリアル名ごとの管理に対応。\n * - テキスト文字列またはオブジェクト形式の両方をサポート。\n * - メッシュローダ本体（S3MeshLoader）経由でも利用されます。\n *\n * @namespace S3MeshLoaderJSON\n * @property {string} name - メッシュデータの入出力形式名（\"JSON\"）\n * @property {function(S3System, S3Mesh, string|Object):boolean} input - JSONデータからS3Meshへ変換（インポート）\n * @property {function(S3Mesh):string} output - S3MeshからJSON形式へ変換（エクスポート）\n *\n * @example\n * // インポート\n * S3MeshLoaderJSON.input(sys, mesh, '{\"Vertices\":[[0,0,0]],\"Indexes\":{\"mat1\":[[0,0,0]]}}');\n * // エクスポート\n * const json = S3MeshLoaderJSON.output(mesh);\n */\nconst S3MeshLoaderJSON = {\n\t/**\n\t * メッシュデータの入出力形式名\n\t * @type {string}\n\t */\n\tname: \"JSON\",\n\n\t/**\n\t * JSONデータをS3Meshへ変換（インポート）します。\n\t *\n\t * - 頂点配列（Vertices）、面インデックス配列（Indexes）を含むJSONデータを解析し\n\t *   S3Meshオブジェクトへ詰め替えます。\n\t * - 文字列型なら自動的にJSON.parseします。\n\t *\n\t * @param {S3System} sys S3Systemインスタンス\n\t * @param {S3Mesh} mesh メッシュインスタンス（初期化済み/空状態で渡される）\n\t * @param {string|Object} json JSON文字列またはそのオブジェクト\n\t * @returns {boolean} パースが成功した場合はtrue\n\t *\n\t * @example\n\t * // 文字列からの直接インポート\n\t * S3MeshLoaderJSON.input(sys, mesh, '{\"Vertices\":[[0,0,0]],\"Indexes\":{\"mat1\":[[0,0,0]]}}');\n\t */\n\tinput: function (sys, mesh, json) {\n\t\tlet meshdata;\n\t\tif (typeof json === \"string\") {\n\t\t\tmeshdata = JSON.parse(json);\n\t\t} else {\n\t\t\tmeshdata = json;\n\t\t}\n\t\tlet material = 0;\n\t\t// 材質名とインデックスを取得\n\t\tfor (const materialname in meshdata.Indexes) {\n\t\t\tmesh.addMaterial(sys.createMaterial(materialname));\n\t\t\tconst materialindexlist = meshdata.Indexes[materialname];\n\t\t\tfor (let i = 0; i < materialindexlist.length; i++) {\n\t\t\t\tconst list = materialindexlist[i];\n\t\t\t\tfor (let j = 0; j < list.length - 2; j++) {\n\t\t\t\t\t// 3角形と4角形に対応\n\t\t\t\t\tconst ti =\n\t\t\t\t\t\tj % 2 === 0\n\t\t\t\t\t\t\t? sys.createTriangleIndex(j, j + 1, j + 2, list, material)\n\t\t\t\t\t\t\t: sys.createTriangleIndex(j - 1, j + 1, j + 2, list, material);\n\t\t\t\t\tmesh.addTriangleIndex(ti);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmaterial++;\n\t\t}\n\t\t// 頂点座標を取得\n\t\tfor (let i = 0; i < meshdata.Vertices.length; i++) {\n\t\t\tconst vector = new S3Vector(meshdata.Vertices[i][0], meshdata.Vertices[i][1], meshdata.Vertices[i][2]);\n\t\t\tconst vertex = sys.createVertex(vector);\n\t\t\tmesh.addVertex(vertex);\n\t\t}\n\t\treturn true;\n\t},\n\n\t/**\n\t * S3MeshインスタンスをシンプルなJSONオブジェクトに変換（エクスポート）します。\n\t *\n\t * - 頂点配列・面インデックス配列・マテリアル名などを全てJSONオブジェクト形式で返します。\n\t * - マテリアルごとのインデックスリストも整理されます。\n\t *\n\t * @param {S3Mesh} mesh 出力対象のメッシュ\n\t * @returns {string} JSON形式のテキストデータ\n\t *\n\t * @example\n\t * const json = S3MeshLoaderJSON.output(mesh);\n\t * // → ファイル保存やエディタ表示などに活用できます\n\t */\n\toutput: function (mesh) {\n\t\tconst vertex = mesh.getVertexArray();\n\t\tconst triangleindex = mesh.getTriangleIndexArray();\n\t\tconst material = mesh.getMaterialArray();\n\n\t\t/**\n\t\t * デフォルトのマテリアル情報（必要時に参照される）\n\t\t *\n\t\t * @typedef {Object} S3MeshLoaderMaterial\n\t\t * @property {string} name 名前\n\t\t * @property {S3Vector} color 拡散反射色\n\t\t * @property {number} diffuse 拡散係数\n\t\t * @property {S3Vector} emission 自己照明色\n\t\t * @property {S3Vector} specular 鏡面反射色\n\t\t * @property {number} power 鏡面反射強度\n\t\t * @property {S3Vector} ambient 環境光色\n\t\t * @property {number} reflect 環境マッピング反射率\n\t\t * @property {null} textureColor 拡散テクスチャ\n\t\t * @property {null} textureNormal 法線マップ\n\t\t */\n\n\t\t/**\n\t\t * @typedef {Object} S3MeshLoaderMaterialListEntry\n\t\t * @property {S3MeshLoaderMaterial|S3Material} material マテリアル情報（S3Material型またはDefaultMaterialオブジェクト）\n\t\t * @property {Array<Array<number>>} list そのマテリアルに属する三角形インデックス配列\n\t\t */\n\n\t\t/**\n\t\t * @type {S3MeshLoaderMaterial}\n\t\t */\n\t\tconst DefaultMaterial = {\n\t\t\tname: \"s3default\",\n\t\t\tcolor: new S3Vector(1.0, 1.0, 1.0, 1.0),\n\t\t\tdiffuse: 0.8,\n\t\t\temission: new S3Vector(0.0, 0.0, 0.0),\n\t\t\tspecular: new S3Vector(0.0, 0.0, 0.0),\n\t\t\tpower: 5.0,\n\t\t\tambient: new S3Vector(0.6, 0.6, 0.6),\n\t\t\treflect: 0.0,\n\t\t\ttextureColor: null,\n\t\t\ttextureNormal: null\n\t\t};\n\n\t\t/**\n\t\t * @type {Array<S3MeshLoaderMaterialListEntry>}\n\t\t */\n\t\tconst material_vertexlist = [];\n\t\tconst material_length = material.length !== 0 ? material.length : 1;\n\t\tconst default_material = DefaultMaterial;\n\t\t// 材質リストを取得\n\t\tfor (let i = 0; i < material_length; i++) {\n\t\t\tmaterial_vertexlist[i] = {\n\t\t\t\tmaterial: material[i] ? material[i] : default_material,\n\t\t\t\tlist: []\n\t\t\t};\n\t\t}\n\t\t// 材質名に合わせて、インデックスリストを取得\n\t\tfor (let i = 0; i < triangleindex.length; i++) {\n\t\t\tconst ti = triangleindex[i];\n\t\t\tmaterial_vertexlist[ti.materialIndex].list.push(ti.index);\n\t\t}\n\t\tconst output = [];\n\t\toutput.push(\"{\");\n\t\toutput.push(\"\\tIndexes:{\");\n\t\tfor (let i = 0; i < material_vertexlist.length; i++) {\n\t\t\tconst mv = material_vertexlist[i];\n\t\t\toutput.push(\"\\t\\t\" + mv.material.name + \":[\");\n\t\t\tfor (let j = 0; j < mv.list.length; j++) {\n\t\t\t\tconst vi = mv.list[j];\n\t\t\t\toutput.push(\n\t\t\t\t\t\"\\t\\t\\t[\" + vi[0] + \" \" + vi[1] + \" \" + vi[2] + \"]\" + (j === mv.list.length - 1 ? \"\" : \",\")\n\t\t\t\t);\n\t\t\t}\n\t\t\toutput.push(\"\\t\\t]\" + (i === material_vertexlist.length - 1 ? \"\" : \",\"));\n\t\t}\n\t\toutput.push(\"\\t},\");\n\t\toutput.push(\"\\tVertices:[\");\n\t\tfor (let i = 0; i < vertex.length; i++) {\n\t\t\tconst vp = vertex[i].position;\n\t\t\toutput.push(\"\\t\\t[\" + vp.x + \" \" + vp.y + \" \" + vp.z + \"]\" + (i === vertex.length - 1 ? \"\" : \",\"));\n\t\t}\n\t\toutput.push(\"\\t]\");\n\t\toutput.push(\"}\");\n\t\treturn output.join(\"\\n\");\n\t}\n};\n\nexport default S3MeshLoaderJSON;\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/loader/S3MeshLoaderJSON.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 575,
    "kind": "variable",
    "name": "S3MeshLoaderJSON",
    "memberof": "src/loader/S3MeshLoaderJSON.js",
    "static": true,
    "longname": "src/loader/S3MeshLoaderJSON.js~S3MeshLoaderJSON",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/loader/S3MeshLoaderJSON.js",
    "importStyle": "S3MeshLoaderJSON",
    "description": "JSON形式による3DCGメッシュデータの入出力ユーティリティ\n\n- 頂点配列（Vertices）や面インデックス配列（Indexes）を持つJSONデータを\n  S3Meshインスタンスへ変換（インポート）、またはS3MeshからJSON形式で出力（エクスポート）します。\n- 三角形・四角形など複数頂点数の面、マテリアル名ごとの管理に対応。\n- テキスト文字列またはオブジェクト形式の両方をサポート。\n- メッシュローダ本体（S3MeshLoader）経由でも利用されます。",
    "examples": [
      "// インポート\nS3MeshLoaderJSON.input(sys, mesh, '{\"Vertices\":[[0,0,0]],\"Indexes\":{\"mat1\":[[0,0,0]]}}');\n// エクスポート\nconst json = S3MeshLoaderJSON.output(mesh);"
    ],
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@namespace",
        "tagValue": "S3MeshLoaderJSON"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "メッシュデータの入出力形式名（\"JSON\"）"
      },
      {
        "nullable": null,
        "types": [
          "function(S3System, S3Mesh, string",
          "Object):boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "JSONデータからS3Meshへ変換（インポート）"
      },
      {
        "nullable": null,
        "types": [
          "function(S3Mesh):string"
        ],
        "spread": false,
        "optional": false,
        "name": "output",
        "description": "S3MeshからJSON形式へ変換（エクスポート）"
      }
    ],
    "type": {
      "types": [
        "{\"name\": string, \"input\": *, \"output\": *}"
      ]
    }
  },
  {
    "__docId__": 576,
    "kind": "typedef",
    "name": "S3MeshLoaderMaterial",
    "memberof": "src/loader/S3MeshLoaderJSON.js",
    "static": true,
    "longname": "src/loader/S3MeshLoaderJSON.js~S3MeshLoaderMaterial",
    "access": "public",
    "description": "デフォルトのマテリアル情報（必要時に参照される）",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "名前"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "拡散反射色"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "diffuse",
        "description": "拡散係数"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "emission",
        "description": "自己照明色"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "specular",
        "description": "鏡面反射色"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "power",
        "description": "鏡面反射強度"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "ambient",
        "description": "環境光色"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "reflect",
        "description": "環境マッピング反射率"
      },
      {
        "nullable": null,
        "types": [
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "textureColor",
        "description": "拡散テクスチャ"
      },
      {
        "nullable": null,
        "types": [
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "textureNormal",
        "description": "法線マップ"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3MeshLoaderMaterial"
    }
  },
  {
    "__docId__": 577,
    "kind": "typedef",
    "name": "S3MeshLoaderMaterialListEntry",
    "memberof": "src/loader/S3MeshLoaderJSON.js",
    "static": true,
    "longname": "src/loader/S3MeshLoaderJSON.js~S3MeshLoaderMaterialListEntry",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "S3MeshLoaderMaterial",
          "S3Material"
        ],
        "spread": false,
        "optional": false,
        "name": "material",
        "description": "マテリアル情報（S3Material型またはDefaultMaterialオブジェクト）"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "そのマテリアルに属する三角形インデックス配列"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3MeshLoaderMaterialListEntry"
    }
  },
  {
    "__docId__": 578,
    "kind": "file",
    "name": "src/loader/S3MeshLoaderMQO.js",
    "content": "﻿import S3System from \"../basic/S3System.js\";\nimport S3Mesh from \"../basic/S3Mesh.js\";\nimport S3Vector from \"../math/S3Vector.js\";\n\n/**\n * パス名操作・ファイルパスの解決用ヘルパークラス\n *\n * - MQOファイル内や外部ファイルへの参照（テクスチャパス等）を絶対パスに変換するために利用されます。\n * - `getAbsolutePath()` でファイルの絶対パスを計算し、`getParent()` で親ディレクトリのパスも取得できます。\n * - 内部的にパスの区切りを正規化（バックスラッシュ→スラッシュ）します。\n */\nclass File {\n\t/**\n\t * ファイルインスタンスを生成します。\n\t * @param {string} pathname ファイルパスやURL\n\t */\n\tconstructor(pathname) {\n\t\t/**\n\t\t * 正規化済みパス\n\t\t * @type {string}\n\t\t */\n\t\tthis.pathname = pathname.replace(/\\\\/g, \"/\");\n\t}\n\n\t/**\n\t * ファイルの絶対パスを取得します。\n\t * - http(s)の場合はそのまま\n\t * - 相対パスの場合は現在のURLから解決\n\t *\n\t * @returns {string} 絶対パス（URL形式）\n\t */\n\tgetAbsolutePath() {\n\t\tif (/$http/.test(this.pathname)) {\n\t\t\treturn this.pathname;\n\t\t}\n\t\tlet name = window.location.toString();\n\t\tif (!/\\/$/.test(name)) {\n\t\t\tname = name.match(/.*\\//)[0];\n\t\t}\n\t\tconst namelist = this.pathname.split(\"/\");\n\t\tfor (let i = 0; i < namelist.length; i++) {\n\t\t\tif (namelist[i] === \"\" || namelist[i] === \".\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (namelist[i] === \"..\") {\n\t\t\t\tname = name.substring(0, name.length - 1).match(/.*\\//)[0];\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tname += namelist[i];\n\t\t\tif (i !== namelist.length - 1) {\n\t\t\t\tname += \"/\";\n\t\t\t}\n\t\t}\n\t\treturn name;\n\t}\n\n\t/**\n\t * 親ディレクトリのパスを取得します。\n\t * @returns {string} 親ディレクトリの絶対パス\n\t */\n\tgetParent() {\n\t\tconst x = this.getAbsolutePath().match(/.*\\//)[0];\n\t\treturn x.substring(0, x.length - 1);\n\t}\n}\n\n/**\n * Metasequoia（MQO）形式による3DCGメッシュデータの入出力ユーティリティ\n *\n * - S3MeshLoader.TYPE.MQO として S3MeshLoader から利用されます。\n * - メタセコイア（*.mqo）フォーマットのテキストをS3Meshに変換（インポート）、またはS3Meshからテキスト出力（エクスポート）します。\n * - 標準的なMQOの構文に加え、一部簡易パース（手動修正を要する場合もあり）。\n *\n * ※ テクスチャやUV、マテリアルの色・強度なども一部対応しています。\n */\nconst S3MeshLoaderMQO = {\n\t/**\n\t * メッシュデータの入出力形式名\n\t * @type {string}\n\t */\n\tname: \"MQO\",\n\n\t/**\n\t * Metasequoia（MQO）形式のテキストをS3Meshインスタンスに変換します（インポート）。\n\t * ただしある程度手動で修正しないといけません。\n\t *\n\t * - MQO形式のテキスト（またはURL経由でダウンロード済みのテキスト）を解析し、\n\t *   頂点・三角形面・マテリアル等をS3Meshに格納します。\n\t * - テクスチャ名・UV座標・マテリアル強度・色・発光・反射等にも部分的に対応しています。\n\t * - ファイル内の階層（オブジェクトブロック）・面（face）・材質（Material）を検出してパースします。\n\t *\n\t * @param {S3System} sys S3Systemインスタンス\n\t * @param {S3Mesh} mesh メッシュインスタンス（空の状態で渡される）\n\t * @param {string} text MQOファイル内容（テキスト）\n\t * @param {string} [url] オプション: ファイルURLやパス\n\t * @returns {boolean} パース成功時はtrue\n\t *\n\t * @example\n\t * S3MeshLoaderMQO.input(sys, mesh, mqotext);\n\t */\n\tinput: function (sys, mesh, text, url) {\n\t\tlet mqofile = null;\n\t\tlet parent_dir = \"./\";\n\t\tif (url) {\n\t\t\tmqofile = new File(url);\n\t\t\tparent_dir = mqofile.getParent() + \"/\";\n\t\t}\n\n\t\tconst lines = text.split(\"\\n\");\n\t\tconst block_stack = [];\n\t\tlet block_type = \"none\";\n\t\tlet block_level = 0;\n\t\tlet vertex_offset = 0;\n\t\tlet vertex_point = 0;\n\t\tlet face_offset = 0;\n\t\tlet face_point = 0;\n\t\t/**\n\t\t * 半角スペース区切りの文字列数値を数値型配列に変換します。\n\t\t *\n\t\t * @param {string} text 変換対象の文字列（例：\"1.0 2.5 3.14\"）\n\t\t * @returns {Array<number>} 数値型の配列\n\t\t */\n\t\tconst toNumberArray = function (text) {\n\t\t\tconst x = text.split(\" \"),\n\t\t\t\tout = [];\n\t\t\tfor (let i = 0; i < x.length; i++) {\n\t\t\t\tout[i] = parseFloat(x[i]);\n\t\t\t}\n\t\t\treturn out;\n\t\t};\n\n\t\t/**\n\t\t * \"func(XXX)\" の形式から、指定パラメータ名 parameter の括弧内の値を抜き出します。\n\t\t *\n\t\t * @param {string} text 対象となる1行分のテキスト\n\t\t * @param {string} parameter 抜き出したいパラメータ名\n\t\t * @returns {string} パラメータの中身\n\t\t */\n\t\tconst getValueFromPrm = function (text, parameter) {\n\t\t\tconst x = text.split(\" \" + parameter + \"(\");\n\t\t\tif (x.length === 1) {\n\t\t\t\treturn null; // パラメータが見つからない場合はnullを返す\n\t\t\t}\n\t\t\treturn x[1].split(\")\")[0];\n\t\t};\n\n\t\t/**\n\t\t * \"func(XXX)\" の形式から、数値パラメータを配列として取得します。\n\t\t *\n\t\t * @param {string} text 対象となる1行分のテキスト\n\t\t * @param {string} parameter 抜き出したいパラメータ名\n\t\t * @returns {Array<number>} 数値型配列（見つからなければ空配列）\n\t\t */\n\t\tconst getNumberFromPrm = function (text, parameter) {\n\t\t\tconst value = getValueFromPrm(text, parameter);\n\t\t\tif (value === null) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\treturn toNumberArray(value);\n\t\t};\n\n\t\t/**\n\t\t * \"func(XXX)\" の形式から、ダブルクォート囲みのURLやファイル名を抽出します。\n\t\t *\n\t\t * @param {string} text 対象となる1行分のテキスト\n\t\t * @param {string} parameter 抜き出したいパラメータ名\n\t\t * @returns {string|null} 抜き出したURL文字列、またはnull（見つからなければ）\n\t\t */\n\t\tconst getURLFromPrm = function (text, parameter) {\n\t\t\tconst value = getValueFromPrm(text, parameter);\n\t\t\tif (value === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst x = value.split('\"');\n\t\t\tif (x.length !== 3) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn x[1];\n\t\t};\n\t\t// メインのパース処理\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\tconst trim_line = lines[i].replace(/^\\s+|\\s+$/g, \"\");\n\t\t\tconst first = trim_line.split(\" \")[0];\n\t\t\tif (trim_line.indexOf(\"{\") !== -1) {\n\t\t\t\tif (first === \"Object\") {\n\t\t\t\t\tvertex_offset += vertex_point;\n\t\t\t\t\tface_offset += face_point;\n\t\t\t\t\tvertex_point = 0;\n\t\t\t\t\tface_point = 0;\n\t\t\t\t}\n\t\t\t\t// 階層に入る前の位置を保存\n\t\t\t\tblock_stack.push(block_type);\n\t\t\t\tblock_type = first;\n\t\t\t\tblock_level++;\n\t\t\t\tcontinue;\n\t\t\t} else if (trim_line.indexOf(\"}\") !== -1) {\n\t\t\t\tblock_type = block_stack.pop();\n\t\t\t\tblock_level--;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (block_type === \"Thumbnail\" || block_type === \"none\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (block_type === \"Material\") {\n\t\t\t\tconst material_name = first.replace(/\"/g, \"\");\n\t\t\t\tconst material = sys.createMaterial();\n\t\t\t\tmaterial.setName(material_name);\n\t\t\t\tlet val;\n\t\t\t\tval = getNumberFromPrm(trim_line, \"col\");\n\t\t\t\tif (val.length !== 0) {\n\t\t\t\t\tmaterial.setColor(new S3Vector(val[0], val[1], val[2], val[3]));\n\t\t\t\t}\n\t\t\t\tval = getNumberFromPrm(trim_line, \"dif\");\n\t\t\t\tif (val.length !== 0) {\n\t\t\t\t\tmaterial.setDiffuse(val[0]);\n\t\t\t\t}\n\t\t\t\tval = getNumberFromPrm(trim_line, \"amb\");\n\t\t\t\tif (val.length !== 0) {\n\t\t\t\t\tmaterial.setAmbient(new S3Vector(val[0], val[0], val[0]));\n\t\t\t\t}\n\t\t\t\tval = getNumberFromPrm(trim_line, \"amb_col\");\n\t\t\t\tif (val.length !== 0) {\n\t\t\t\t\tmaterial.setAmbient(new S3Vector(val[0], val[1], val[2]));\n\t\t\t\t}\n\t\t\t\tval = getNumberFromPrm(trim_line, \"emi\");\n\t\t\t\tif (val.length !== 0) {\n\t\t\t\t\tmaterial.setEmission(new S3Vector(val[0], val[0], val[0]));\n\t\t\t\t}\n\t\t\t\tval = getNumberFromPrm(trim_line, \"emi_col\");\n\t\t\t\tif (val.length !== 0) {\n\t\t\t\t\tmaterial.setEmission(new S3Vector(val[0], val[1], val[2]));\n\t\t\t\t}\n\t\t\t\tval = getNumberFromPrm(trim_line, \"spc\");\n\t\t\t\tif (val.length !== 0) {\n\t\t\t\t\tmaterial.setSpecular(new S3Vector(val[0], val[0], val[0]));\n\t\t\t\t}\n\t\t\t\tval = getNumberFromPrm(trim_line, \"spc_col\");\n\t\t\t\tif (val.length !== 0) {\n\t\t\t\t\tmaterial.setSpecular(new S3Vector(val[0], val[1], val[2]));\n\t\t\t\t}\n\t\t\t\tval = getNumberFromPrm(trim_line, \"power\");\n\t\t\t\tif (val.length !== 0) {\n\t\t\t\t\tmaterial.setPower(val[0]);\n\t\t\t\t}\n\t\t\t\tval = getNumberFromPrm(trim_line, \"reflect\");\n\t\t\t\tif (val.length !== 0) {\n\t\t\t\t\tmaterial.setReflect(val[0]);\n\t\t\t\t}\n\t\t\t\tval = getURLFromPrm(trim_line, \"tex\");\n\t\t\t\tif (val) {\n\t\t\t\t\tmaterial.setTextureColor(parent_dir + val);\n\t\t\t\t}\n\t\t\t\tval = getURLFromPrm(trim_line, \"bump\");\n\t\t\t\tif (val) {\n\t\t\t\t\tmaterial.setTextureNormal(parent_dir + val);\n\t\t\t\t}\n\t\t\t\tmesh.addMaterial(material);\n\t\t\t} else if (block_type === \"vertex\") {\n\t\t\t\tconst words = toNumberArray(trim_line);\n\t\t\t\tconst vector = new S3Vector(words[0], words[1], words[2]);\n\t\t\t\tconst vertex = sys.createVertex(vector);\n\t\t\t\tmesh.addVertex(vertex);\n\t\t\t\tvertex_point++;\n\t\t\t} else if (block_type === \"face\") {\n\t\t\t\tconst facenum = parseInt(first);\n\t\t\t\tconst v = getNumberFromPrm(trim_line, \"V\");\n\t\t\t\tconst uv_a = getNumberFromPrm(trim_line, \"UV\");\n\t\t\t\tconst uv = [];\n\t\t\t\tconst material_array = getNumberFromPrm(trim_line, \"M\");\n\t\t\t\tconst material = material_array.length === 0 ? 0 : material_array[0];\n\t\t\t\tif (uv_a.length !== 0) {\n\t\t\t\t\tfor (let j = 0; j < facenum; j++) {\n\t\t\t\t\t\tuv[j] = new S3Vector(uv_a[j * 2], uv_a[j * 2 + 1], 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let j = 0; j < facenum - 2; j++) {\n\t\t\t\t\tconst ti =\n\t\t\t\t\t\tj % 2 === 0\n\t\t\t\t\t\t\t? sys.createTriangleIndex(j, j + 1, j + 2, v, material, uv)\n\t\t\t\t\t\t\t: sys.createTriangleIndex(j - 1, j + 1, j + 2, v, material, uv);\n\t\t\t\t\tmesh.addTriangleIndex(ti);\n\t\t\t\t\tface_point++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t},\n\n\t/**\n\t * S3MeshインスタンスをMetasequoia（MQO）形式のテキストに変換します（エクスポート）。\n\t * ただしある程度手動で修正しないといけません。\n\t *\n\t * - MQO形式に従い、頂点座標・面情報・マテリアル情報等を出力します。\n\t * - テクスチャやUV・発光などの追加情報も一部対応。\n\t * - 出力後のテキストは、必要に応じて手動修正で他のソフトへインポート可能です。\n\t *\n\t * @param {S3Mesh} mesh 出力対象のメッシュ\n\t * @returns {string} MQOフォーマットのテキストデータ\n\t *\n\t * @example\n\t * const mqotext = S3MeshLoaderMQO.output(mesh);\n\t */\n\toutput: function (mesh) {\n\t\tconst output = [];\n\t\tconst vertex = mesh.getVertexArray();\n\t\tconst triangleindex = mesh.getTriangleIndexArray();\n\t\tconst material = mesh.getMaterialArray();\n\n\t\t// ヘッダ\n\t\toutput.push(\"Metasequoia Document\");\n\t\toutput.push(\"Format Text Ver 1.0\");\n\t\toutput.push(\"\");\n\t\toutput.push(\"Scene {\");\n\t\toutput.push(\"\tpos 0 0 1500\");\n\t\toutput.push(\"\tlookat 0 0 0\");\n\t\toutput.push(\"\thead -0.5236\");\n\t\toutput.push(\"\tpich 0.5236\");\n\t\toutput.push(\"\tortho 0\");\n\t\toutput.push(\"\tzoom2 5.0000\");\n\t\toutput.push(\"\tamb 0.250 0.250 0.250\");\n\t\toutput.push(\"}\");\n\n\t\t// 材質の出力\n\t\toutput.push(\"Material \" + material.length + \" {\");\n\t\tfor (let i = 0; i < material.length; i++) {\n\t\t\tconst mv = material[i];\n\t\t\t//  こんな感じにする必要がある・・・\n\t\t\t// \"mat\" shader(3) col(1.000 1.000 1.000 0.138) dif(0.213) amb(0.884) emi(0.301) spc(0.141) power(38.75) amb_col(1.000 0.996 0.000) emi_col(1.000 0.000 0.016) spc_col(0.090 0.000 1.000) reflect(0.338) refract(2.450)\n\t\t\toutput.push(\n\t\t\t\t'\\t\"' +\n\t\t\t\t\tmv.name +\n\t\t\t\t\t'\" col(1.000 1.000 1.000 1.000) dif(0.800) amb(0.600) emi(0.000) spc(0.000) power(5.00)'\n\t\t\t);\n\t\t}\n\t\toutput.push(\"}\");\n\n\t\t// オブジェクトの出力\n\t\toutput.push('Object \"obj1\" {');\n\t\t{\n\t\t\t// 頂点の出力\n\t\t\toutput.push(\"\\tvertex \" + vertex.length + \" {\");\n\t\t\tfor (let i = 0; i < vertex.length; i++) {\n\t\t\t\tconst vp = vertex[i].position;\n\t\t\t\toutput.push(\"\\t\\t\" + vp.x + \" \" + vp.y + \" \" + vp.z);\n\t\t\t}\n\t\t\toutput.push(\"}\");\n\n\t\t\t// 面の定義\n\t\t\toutput.push(\"\\tface \" + triangleindex.length + \" {\");\n\t\t\tfor (let i = 0; i < triangleindex.length; i++) {\n\t\t\t\tconst ti = triangleindex[i];\n\t\t\t\tlet line = \"\\t\\t3\";\n\t\t\t\t// 座標と材質は必ずある\n\t\t\t\tline += \" V(\" + ti.index[0] + \" \" + ti.index[1] + \" \" + ti.index[2] + \")\";\n\t\t\t\tline += \" M(\" + ti.materialIndex + \")\";\n\t\t\t\t// UVはないかもしれないので、条件を付ける\n\t\t\t\tif (ti.uv !== undefined && ti.uv[0] !== null) {\n\t\t\t\t\tline +=\n\t\t\t\t\t\t\" UV(\" +\n\t\t\t\t\t\tti.uv[0].x +\n\t\t\t\t\t\t\" \" +\n\t\t\t\t\t\tti.uv[0].y +\n\t\t\t\t\t\t\" \" +\n\t\t\t\t\t\tti.uv[1].x +\n\t\t\t\t\t\t\" \" +\n\t\t\t\t\t\tti.uv[1].y +\n\t\t\t\t\t\t\" \" +\n\t\t\t\t\t\tti.uv[2].x +\n\t\t\t\t\t\t\" \" +\n\t\t\t\t\t\tti.uv[2].y +\n\t\t\t\t\t\t\")\";\n\t\t\t\t}\n\t\t\t\toutput.push(line);\n\t\t\t}\n\t\t}\n\t\toutput.push(\"\\t}\");\n\n\t\toutput.push(\"}\");\n\n\t\t// End\n\t\toutput.push(\"Eof\\n\");\n\t\treturn output.join(\"\\n\");\n\t}\n};\n\nexport default S3MeshLoaderMQO;\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/loader/S3MeshLoaderMQO.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 579,
    "kind": "class",
    "name": "File",
    "memberof": "src/loader/S3MeshLoaderMQO.js",
    "static": true,
    "longname": "src/loader/S3MeshLoaderMQO.js~File",
    "access": "public",
    "export": false,
    "importPath": "s3js/src/loader/S3MeshLoaderMQO.js",
    "importStyle": null,
    "description": "パス名操作・ファイルパスの解決用ヘルパークラス\n\n- MQOファイル内や外部ファイルへの参照（テクスチャパス等）を絶対パスに変換するために利用されます。\n- `getAbsolutePath()` でファイルの絶対パスを計算し、`getParent()` で親ディレクトリのパスも取得できます。\n- 内部的にパスの区切りを正規化（バックスラッシュ→スラッシュ）します。",
    "lineNumber": 12,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 580,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/loader/S3MeshLoaderMQO.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/loader/S3MeshLoaderMQO.js~File#constructor",
    "access": "public",
    "description": "ファイルインスタンスを生成します。",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pathname",
        "description": "ファイルパスやURL"
      }
    ]
  },
  {
    "__docId__": 581,
    "kind": "member",
    "name": "pathname",
    "memberof": "src/loader/S3MeshLoaderMQO.js~File",
    "static": false,
    "longname": "src/loader/S3MeshLoaderMQO.js~File#pathname",
    "access": "public",
    "description": "正規化済みパス",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 582,
    "kind": "method",
    "name": "getAbsolutePath",
    "memberof": "src/loader/S3MeshLoaderMQO.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/loader/S3MeshLoaderMQO.js~File#getAbsolutePath",
    "access": "public",
    "description": "ファイルの絶対パスを取得します。\n- http(s)の場合はそのまま\n- 相対パスの場合は現在のURLから解決",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 絶対パス（URL形式）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "絶対パス（URL形式）"
    },
    "params": []
  },
  {
    "__docId__": 583,
    "kind": "method",
    "name": "getParent",
    "memberof": "src/loader/S3MeshLoaderMQO.js~File",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/loader/S3MeshLoaderMQO.js~File#getParent",
    "access": "public",
    "description": "親ディレクトリのパスを取得します。",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 親ディレクトリの絶対パス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "親ディレクトリの絶対パス"
    },
    "params": []
  },
  {
    "__docId__": 584,
    "kind": "variable",
    "name": "S3MeshLoaderMQO",
    "memberof": "src/loader/S3MeshLoaderMQO.js",
    "static": true,
    "longname": "src/loader/S3MeshLoaderMQO.js~S3MeshLoaderMQO",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/loader/S3MeshLoaderMQO.js",
    "importStyle": "S3MeshLoaderMQO",
    "description": "Metasequoia（MQO）形式による3DCGメッシュデータの入出力ユーティリティ\n\n- S3MeshLoader.TYPE.MQO として S3MeshLoader から利用されます。\n- メタセコイア（*.mqo）フォーマットのテキストをS3Meshに変換（インポート）、またはS3Meshからテキスト出力（エクスポート）します。\n- 標準的なMQOの構文に加え、一部簡易パース（手動修正を要する場合もあり）。\n\n※ テクスチャやUV、マテリアルの色・強度なども一部対応しています。",
    "lineNumber": 76,
    "type": {
      "types": [
        "{\"name\": string, \"input\": *, \"output\": *}"
      ]
    }
  },
  {
    "__docId__": 585,
    "kind": "file",
    "name": "src/loader/S3MeshLoaderOBJ.js",
    "content": "﻿import S3System from \"../basic/S3System.js\";\nimport S3Mesh from \"../basic/S3Mesh.js\";\nimport S3Vector from \"../math/S3Vector.js\";\n\n/**\n * Wavefront OBJ形式による3DCGメッシュデータの入出力ユーティリティ\n *\n * - S3MeshLoader.TYPE.OBJ として S3MeshLoader から利用されます。\n * - OBJ形式のテキストをS3Meshに変換（インポート）、またはS3Meshからテキスト出力（エクスポート）する機能を提供します。\n * - 頂点（v）、テクスチャ座標（vt）、法線（vn）、面（f）などの基本要素をサポート。\n * - 複数マテリアルやUV座標にも対応しています。\n */\nconst S3MeshLoaderOBJ = {\n\t/**\n\t * フォーマット名（定数：\"OBJ\"）\n\t * @type {string}\n\t */\n\tname: \"OBJ\",\n\n\t/**\n\t * Wavefront OBJ形式のテキストをS3Meshインスタンスへ変換します（インポート）。\n\t * v 頂点\n\t * vt テクスチャ\n\t * vn テクスチャ\n\t * f 面\n\t *\n\t * - OBJテキスト（またはダウンロード済みテキスト）を解析し、頂点・三角形面・マテリアル情報等をS3Meshに格納します。\n\t * - \"v\"（頂点）・\"vt\"（テクスチャ座標）・\"vn\"（法線）・\"f\"（面）などの行に対応します。\n\t * - 複数マテリアル、テクスチャ座標付き面、法線情報付き面にも対応。\n\t * - 頂点番号・UVインデックス・マテリアルインデックス等の自動変換を行います。\n\t *\n\t * @param {S3System} sys S3Systemインスタンス\n\t * @param {S3Mesh} mesh メッシュインスタンス（空の状態で渡される）\n\t * @param {string} text OBJファイル内容（テキスト）\n\t * @returns {boolean} パース成功時はtrue\n\t *\n\t * @example\n\t * S3MeshLoaderOBJ.input(sys, mesh, objtext);\n\t */\n\tinput: function (sys, mesh, text) {\n\t\t// 文字列解析\n\t\tconst lines = text.split(\"\\n\");\n\n\t\t/**\n\t\t * 頂点のリスト\n\t\t * @type {Array<S3Vector>}\n\t\t */\n\t\tconst v_list = [];\n\n\t\t/**\n\t\t * テクスチャ座標のリスト\n\t\t * @type {Array<[S3Vector, number]>}\n\t\t */\n\t\tconst vt_list = [];\n\n\t\t/**\n\t\t * 法線のリスト\n\t\t * @type {Array<S3Vector>}\n\t\t */\n\t\tconst vn_list = [];\n\t\tconst face_v_list = [];\n\t\tconst face_vt_list = [];\n\t\tconst face_vn_list = [];\n\t\tlet material_count = 1;\n\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\t// コメントより前の文字を取得\n\t\t\tconst line = lines[i].split(\"#\")[0].trim();\n\n\t\t\tif (line.length === 0) {\n\t\t\t\t// 空白なら何もしない\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @type {Array<string>}\n\t\t\t */\n\t\t\tconst data = line.split(\" \");\n\t\t\tif (data[0] === \"v\") {\n\t\t\t\t// vertex\n\t\t\t\tconst x = parseFloat(data[1]);\n\t\t\t\tconst y = parseFloat(data[2]);\n\t\t\t\tconst z = parseFloat(data[3]);\n\t\t\t\tconst v = new S3Vector(x, y, z);\n\t\t\t\tv_list.push(v);\n\t\t\t} else if (data[0] === \"vt\") {\n\t\t\t\t// texture\n\t\t\t\tconst u = parseFloat(data[1]);\n\t\t\t\tconst v = parseFloat(data[2]);\n\t\t\t\t// 1より大きい場合は素材が違う\n\t\t\t\tconst mat = Math.floor(v);\n\t\t\t\tconst vt = new S3Vector(u, 1.0 - (v - mat)); // Vは反転させる\n\t\t\t\tvt_list.push([vt, mat]);\n\t\t\t\tif (material_count <= mat + 1) {\n\t\t\t\t\tmaterial_count = mat + 1;\n\t\t\t\t}\n\t\t\t} else if (data[0] === \"vn\") {\n\t\t\t\t// normal\n\t\t\t\tconst vn = new S3Vector(parseFloat(data[1]), parseFloat(data[2]), parseFloat(data[3]));\n\t\t\t\tvn_list.push(vn);\n\t\t\t} else if (data[0] === \"f\") {\n\t\t\t\t// face\n\t\t\t\tconst vcount = data.length - 3; // 繰り返す回数\n\t\t\t\tconst f1 = data[1];\n\t\t\t\tconst f2 = data[2];\n\t\t\t\tconst f3 = data[3];\n\t\t\t\tconst f4 = vcount === 2 ? data[4] : \"0\";\n\t\t\t\tfor (let j = 0; j < vcount; j++) {\n\t\t\t\t\t/**\n\t\t\t\t\t * @type {Array<string>}\n\t\t\t\t\t */\n\t\t\t\t\tconst fdata = [];\n\t\t\t\t\tif (j % 2 === 0) {\n\t\t\t\t\t\tfdata[2] = f1;\n\t\t\t\t\t\tfdata[1] = f2;\n\t\t\t\t\t\tfdata[0] = f3;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfdata[2] = f1;\n\t\t\t\t\t\tfdata[1] = f3;\n\t\t\t\t\t\tfdata[0] = f4;\n\t\t\t\t\t}\n\t\t\t\t\tconst face_v = [];\n\t\t\t\t\tconst face_vt = [];\n\t\t\t\t\tconst face_vn = [];\n\t\t\t\t\t// 数字は1から始まるので、1を引く\n\t\t\t\t\tfor (let k = 0; k < 3; k++) {\n\t\t\t\t\t\tconst indexdata = fdata[k].split(\"/\");\n\t\t\t\t\t\tif (indexdata.length === 1) {\n\t\t\t\t\t\t\t// 頂点インデックス\n\t\t\t\t\t\t\tface_v[k] = parseInt(indexdata[0], 10) - 1;\n\t\t\t\t\t\t} else if (indexdata.length === 2) {\n\t\t\t\t\t\t\t// 頂点テクスチャ座標インデックス\n\t\t\t\t\t\t\tface_v[k] = parseInt(indexdata[0], 10) - 1;\n\t\t\t\t\t\t\tface_vt[k] = parseInt(indexdata[1], 10) - 1;\n\t\t\t\t\t\t} else if (indexdata.length === 3) {\n\t\t\t\t\t\t\tif (indexdata[1].length !== 0) {\n\t\t\t\t\t\t\t\t// 頂点法線インデックス\n\t\t\t\t\t\t\t\tface_v[k] = parseInt(indexdata[0], 10) - 1;\n\t\t\t\t\t\t\t\tface_vt[k] = parseInt(indexdata[1], 10) - 1;\n\t\t\t\t\t\t\t\tface_vn[k] = parseInt(indexdata[2], 10) - 1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// テクスチャ座標インデックス無しの頂点法線インデックス\n\t\t\t\t\t\t\t\tface_v[k] = parseInt(indexdata[0], 10) - 1;\n\t\t\t\t\t\t\t\tface_vt[k] = null;\n\t\t\t\t\t\t\t\tface_vn[k] = parseInt(indexdata[2], 10) - 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tface_v_list.push(face_v);\n\t\t\t\t\tface_vt_list.push(face_vt);\n\t\t\t\t\tface_vn_list.push(face_vn);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 変換\n\t\t// マテリアルの保存\n\t\tfor (let i = 0; i < material_count; i++) {\n\t\t\tconst material = sys.createMaterial(\"\" + i);\n\t\t\tmesh.addMaterial(material);\n\t\t}\n\n\t\t// 頂点の保存\n\t\tfor (let i = 0; i < v_list.length; i++) {\n\t\t\tconst vertex = sys.createVertex(v_list[i]);\n\t\t\tmesh.addVertex(vertex);\n\t\t}\n\n\t\t// インデックスの保存\n\t\tfor (let i = 0; i < face_v_list.length; i++) {\n\t\t\t// UV情報から材質などを作成\n\t\t\tconst vt_num = face_vt_list[i];\n\t\t\tlet mat = 0;\n\t\t\tlet uv = undefined;\n\t\t\tif (vt_num) {\n\t\t\t\tconst uvm0 = vt_list[vt_num[0]];\n\t\t\t\tconst uvm1 = vt_list[vt_num[1]];\n\t\t\t\tconst uvm2 = vt_list[vt_num[2]];\n\t\t\t\tmat = uvm0[1];\n\t\t\t\tuv = [uvm0[0], uvm1[0], uvm2[0]];\n\t\t\t}\n\t\t\t// 追加\n\t\t\tconst triangle = sys.createTriangleIndex(0, 1, 2, face_v_list[i], mat, uv);\n\t\t\tmesh.addTriangleIndex(triangle);\n\t\t}\n\n\t\treturn true;\n\t}\n};\n\nexport default S3MeshLoaderOBJ;\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/loader/S3MeshLoaderOBJ.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 586,
    "kind": "variable",
    "name": "S3MeshLoaderOBJ",
    "memberof": "src/loader/S3MeshLoaderOBJ.js",
    "static": true,
    "longname": "src/loader/S3MeshLoaderOBJ.js~S3MeshLoaderOBJ",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/loader/S3MeshLoaderOBJ.js",
    "importStyle": "S3MeshLoaderOBJ",
    "description": "Wavefront OBJ形式による3DCGメッシュデータの入出力ユーティリティ\n\n- S3MeshLoader.TYPE.OBJ として S3MeshLoader から利用されます。\n- OBJ形式のテキストをS3Meshに変換（インポート）、またはS3Meshからテキスト出力（エクスポート）する機能を提供します。\n- 頂点（v）、テクスチャ座標（vt）、法線（vn）、面（f）などの基本要素をサポート。\n- 複数マテリアルやUV座標にも対応しています。",
    "lineNumber": 13,
    "type": {
      "types": [
        "{\"name\": string, \"input\": *}"
      ]
    }
  },
  {
    "__docId__": 587,
    "kind": "file",
    "name": "src/math/S3Angles.js",
    "content": "﻿/**\n * 3DCG用のオイラー角クラス（immutable）\n * Roll（Z軸）、Pitch（X軸）、Yaw（Y軸）の順で角度を保持します。\n * 各値は常に周期的（-180～180度）に管理されます。\n *\n * @class\n * @module S3\n */\nexport default class S3Angles {\n\t/**\n\t * オイラー角（ZXY順）を指定して作成します。\n\t * @param {number} [z] ロール角（Z軸回転）\n\t * @param {number} [x] ピッチ角（X軸回転）\n\t * @param {number} [y] ヨー角（Y軸回転）\n\t */\n\tconstructor(z, x, y) {\n\t\tif (arguments.length === 3) {\n\t\t\tthis.setRotateZXY(z, x, y);\n\t\t} else {\n\t\t\t/**\n\t\t\t * ロール角（Z軸回転）を周期的に正規化した値\n\t\t\t * @type {number}\n\t\t\t */\n\t\t\tthis.roll = 0;\n\n\t\t\t/**\n\t\t\t * ピッチ角（X軸回転）を周期的に正規化した値\n\t\t\t * @type {number}\n\t\t\t */\n\t\t\tthis.pitch = 0;\n\n\t\t\t/**\n\t\t\t * ヨー角（Y軸回転）を周期的に正規化した値\n\t\t\t * @type {number}\n\t\t\t */\n\t\t\tthis.yaw = 0;\n\t\t}\n\t}\n\n\t/**\n\t * 角度を周期的（-PI～PI）に正規化します。内部利用のためprivateです。\n\t * @private\n\t * @param {number} x 任意の角度（度単位）\n\t * @returns {number} 周期内（-180～180）の角度\n\t */\n\tstatic _toPeriodicAngle(x) {\n\t\tif (x > S3Angles.PI) {\n\t\t\treturn x - S3Angles.PI2 * ~~((x + S3Angles.PI) / S3Angles.PI2);\n\t\t} else if (x < -S3Angles.PI) {\n\t\t\treturn x + S3Angles.PI2 * ~~((-x + S3Angles.PI) / S3Angles.PI2);\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * このオブジェクトのクローンを作成します。\n\t * @returns {S3Angles} 複製されたオイラー角インスタンス\n\t */\n\tclone() {\n\t\treturn new S3Angles(this.roll, this.pitch, this.yaw);\n\t}\n\n\t/**\n\t * Roll, Pitch, Yaw の順でオイラー角を再設定します。\n\t * @param {number} z ロール角（Z軸回転）\n\t * @param {number} x ピッチ角（X軸回転）\n\t * @param {number} y ヨー角（Y軸回転）\n\t */\n\tsetRotateZXY(z, x, y) {\n\t\tthis.roll = S3Angles._toPeriodicAngle(isNaN(z) ? 0.0 : z);\n\t\tthis.pitch = S3Angles._toPeriodicAngle(isNaN(x) ? 0.0 : x);\n\t\tthis.yaw = S3Angles._toPeriodicAngle(isNaN(y) ? 0.0 : y);\n\t}\n\n\t/**\n\t * ピッチ角（X軸回転）を加算した新しいオイラー角を返します。\n\t * @param {number} x 追加するピッチ角\n\t * @returns {S3Angles} 新しいオイラー角インスタンス\n\t */\n\taddRotateX(x) {\n\t\treturn new S3Angles(this.roll, this.pitch + x, this.yaw);\n\t}\n\n\t/**\n\t * ヨー角（Y軸回転）を加算した新しいオイラー角を返します。\n\t * @param {number} y 追加するヨー角\n\t * @returns {S3Angles} 新しいオイラー角インスタンス\n\t */\n\taddRotateY(y) {\n\t\treturn new S3Angles(this.roll, this.pitch, this.yaw + y);\n\t}\n\n\t/**\n\t * ロール角（Z軸回転）を加算した新しいオイラー角を返します。\n\t * @param {number} z 追加するロール角\n\t * @returns {S3Angles} 新しいオイラー角インスタンス\n\t */\n\taddRotateZ(z) {\n\t\treturn new S3Angles(this.roll + z, this.pitch, this.yaw);\n\t}\n\n\t/**\n\t * ピッチ角（X軸回転）のみを設定した新しいオイラー角を返します。\n\t * @param {number} x 新しいピッチ角\n\t * @returns {S3Angles} 新しいオイラー角インスタンス\n\t */\n\tsetRotateX(x) {\n\t\treturn new S3Angles(this.roll, x, this.yaw);\n\t}\n\n\t/**\n\t * ヨー角（Y軸回転）のみを設定した新しいオイラー角を返します。\n\t * @param {number} y 新しいヨー角\n\t * @returns {S3Angles} 新しいオイラー角インスタンス\n\t */\n\tsetRotateY(y) {\n\t\treturn new S3Angles(this.roll, this.pitch, y);\n\t}\n\n\t/**\n\t * ロール角（Z軸回転）のみを設定した新しいオイラー角を返します。\n\t * @param {number} z 新しいロール角\n\t * @returns {S3Angles} 新しいオイラー角インスタンス\n\t */\n\tsetRotateZ(z) {\n\t\treturn new S3Angles(z, this.pitch, this.yaw);\n\t}\n\n\t/**\n\t * オイラー角を文字列で返します。\n\t * @returns {string} \"angles[roll,pitch,yaw]\"形式の文字列\n\t */\n\ttoString() {\n\t\treturn \"angles[\" + this.roll + \",\" + this.pitch + \",\" + this.yaw + \"]\";\n\t}\n}\n\n/**\n * 180度（定数）。オイラー角の範囲・変換に利用します。\n * @type {number}\n */\nS3Angles.PI = 180.0;\n\n/**\n * 90度（定数）。\n * @type {number}\n */\nS3Angles.PIOVER2 = S3Angles.PI / 2.0;\n\n/**\n * Gimbal lock防止用の値（90度-微小値）。\n * @type {number}\n */\nS3Angles.PILOCK = S3Angles.PIOVER2 - 0.0001;\n\n/**\n * 360度（定数）。\n * @type {number}\n */\nS3Angles.PI2 = 2.0 * S3Angles.PI;\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/math/S3Angles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 588,
    "kind": "class",
    "name": "S3Angles",
    "memberof": "src/math/S3Angles.js",
    "static": true,
    "longname": "src/math/S3Angles.js~S3Angles",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/math/S3Angles.js",
    "importStyle": "S3Angles",
    "description": "3DCG用のオイラー角クラス（immutable）\nRoll（Z軸）、Pitch（X軸）、Yaw（Y軸）の順で角度を保持します。\n各値は常に周期的（-180～180度）に管理されます。",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 589,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/S3Angles.js~S3Angles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Angles.js~S3Angles#constructor",
    "access": "public",
    "description": "オイラー角（ZXY順）を指定して作成します。",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "z",
        "description": "ロール角（Z軸回転）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "x",
        "description": "ピッチ角（X軸回転）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "y",
        "description": "ヨー角（Y軸回転）"
      }
    ]
  },
  {
    "__docId__": 590,
    "kind": "member",
    "name": "roll",
    "memberof": "src/math/S3Angles.js~S3Angles",
    "static": false,
    "longname": "src/math/S3Angles.js~S3Angles#roll",
    "access": "public",
    "description": "ロール角（Z軸回転）を周期的に正規化した値",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 591,
    "kind": "member",
    "name": "pitch",
    "memberof": "src/math/S3Angles.js~S3Angles",
    "static": false,
    "longname": "src/math/S3Angles.js~S3Angles#pitch",
    "access": "public",
    "description": "ピッチ角（X軸回転）を周期的に正規化した値",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 592,
    "kind": "member",
    "name": "yaw",
    "memberof": "src/math/S3Angles.js~S3Angles",
    "static": false,
    "longname": "src/math/S3Angles.js~S3Angles#yaw",
    "access": "public",
    "description": "ヨー角（Y軸回転）を周期的に正規化した値",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 593,
    "kind": "method",
    "name": "_toPeriodicAngle",
    "memberof": "src/math/S3Angles.js~S3Angles",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/S3Angles.js~S3Angles._toPeriodicAngle",
    "access": "private",
    "description": "角度を周期的（-PI～PI）に正規化します。内部利用のためprivateです。",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 周期内（-180～180）の角度"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "任意の角度（度単位）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "周期内（-180～180）の角度"
    }
  },
  {
    "__docId__": 594,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/S3Angles.js~S3Angles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Angles.js~S3Angles#clone",
    "access": "public",
    "description": "このオブジェクトのクローンを作成します。",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Angles} 複製されたオイラー角インスタンス"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Angles"
      ],
      "spread": false,
      "description": "複製されたオイラー角インスタンス"
    },
    "params": []
  },
  {
    "__docId__": 595,
    "kind": "method",
    "name": "setRotateZXY",
    "memberof": "src/math/S3Angles.js~S3Angles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Angles.js~S3Angles#setRotateZXY",
    "access": "public",
    "description": "Roll, Pitch, Yaw の順でオイラー角を再設定します。",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "ロール角（Z軸回転）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "ピッチ角（X軸回転）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "ヨー角（Y軸回転）"
      }
    ],
    "return": null
  },
  {
    "__docId__": 599,
    "kind": "method",
    "name": "addRotateX",
    "memberof": "src/math/S3Angles.js~S3Angles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Angles.js~S3Angles#addRotateX",
    "access": "public",
    "description": "ピッチ角（X軸回転）を加算した新しいオイラー角を返します。",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Angles} 新しいオイラー角インスタンス"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "追加するピッチ角"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Angles"
      ],
      "spread": false,
      "description": "新しいオイラー角インスタンス"
    }
  },
  {
    "__docId__": 600,
    "kind": "method",
    "name": "addRotateY",
    "memberof": "src/math/S3Angles.js~S3Angles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Angles.js~S3Angles#addRotateY",
    "access": "public",
    "description": "ヨー角（Y軸回転）を加算した新しいオイラー角を返します。",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Angles} 新しいオイラー角インスタンス"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "追加するヨー角"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Angles"
      ],
      "spread": false,
      "description": "新しいオイラー角インスタンス"
    }
  },
  {
    "__docId__": 601,
    "kind": "method",
    "name": "addRotateZ",
    "memberof": "src/math/S3Angles.js~S3Angles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Angles.js~S3Angles#addRotateZ",
    "access": "public",
    "description": "ロール角（Z軸回転）を加算した新しいオイラー角を返します。",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Angles} 新しいオイラー角インスタンス"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "追加するロール角"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Angles"
      ],
      "spread": false,
      "description": "新しいオイラー角インスタンス"
    }
  },
  {
    "__docId__": 602,
    "kind": "method",
    "name": "setRotateX",
    "memberof": "src/math/S3Angles.js~S3Angles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Angles.js~S3Angles#setRotateX",
    "access": "public",
    "description": "ピッチ角（X軸回転）のみを設定した新しいオイラー角を返します。",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Angles} 新しいオイラー角インスタンス"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "新しいピッチ角"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Angles"
      ],
      "spread": false,
      "description": "新しいオイラー角インスタンス"
    }
  },
  {
    "__docId__": 603,
    "kind": "method",
    "name": "setRotateY",
    "memberof": "src/math/S3Angles.js~S3Angles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Angles.js~S3Angles#setRotateY",
    "access": "public",
    "description": "ヨー角（Y軸回転）のみを設定した新しいオイラー角を返します。",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Angles} 新しいオイラー角インスタンス"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "新しいヨー角"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Angles"
      ],
      "spread": false,
      "description": "新しいオイラー角インスタンス"
    }
  },
  {
    "__docId__": 604,
    "kind": "method",
    "name": "setRotateZ",
    "memberof": "src/math/S3Angles.js~S3Angles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Angles.js~S3Angles#setRotateZ",
    "access": "public",
    "description": "ロール角（Z軸回転）のみを設定した新しいオイラー角を返します。",
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Angles} 新しいオイラー角インスタンス"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "新しいロール角"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Angles"
      ],
      "spread": false,
      "description": "新しいオイラー角インスタンス"
    }
  },
  {
    "__docId__": 605,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/S3Angles.js~S3Angles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Angles.js~S3Angles#toString",
    "access": "public",
    "description": "オイラー角を文字列で返します。",
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} \"angles[roll,pitch,yaw]\"形式の文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "\"angles[roll,pitch,yaw]\"形式の文字列"
    },
    "params": []
  },
  {
    "__docId__": 606,
    "kind": "file",
    "name": "src/math/S3Math.js",
    "content": "﻿﻿/**\n * 数学的な便利関数を提供するユーティリティ\n * 各種演算（クランプ、ステップ関数、補間、等価判定、三角関数変換等）をまとめた静的オブジェクト\n *\n * @class\n * @module S3\n */\nconst S3Math = {\n\tEPSILON: 2.2204460492503130808472633361816e-8,\n\n\t/**\n\t * 値を[min, max]の範囲に収めます。\n\t * @param {number} x 対象の値\n\t * @param {number} min 最小値\n\t * @param {number} max 最大値\n\t * @returns {number} 範囲内に収めた値\n\t */\n\tclamp: function (x, min, max) {\n\t\treturn x < min ? min : x > max ? max : x;\n\t},\n\n\t/**\n\t * ステップ関数。xがedge未満なら1、それ以外は0を返します。\n\t * @param {number} edge 閾値\n\t * @param {number} x 対象の値\n\t * @returns {number} ステップ関数の値（0 or 1）\n\t */\n\tstep: function (edge, x) {\n\t\treturn edge > x ? 1 : 0;\n\t},\n\n\t/**\n\t * 線形補間（mix）を行います。\n\t * @param {number} v0 始点\n\t * @param {number} v1 終点\n\t * @param {number} x 補間係数（0~1）\n\t * @returns {number} 補間結果\n\t */\n\tmix: function (v0, v1, x) {\n\t\treturn v0 + (v1 - v0) * x;\n\t},\n\n\t/**\n\t * スムーズステップ補間（滑らかな0-1補間）を行います。\n\t * @param {number} v0 始点\n\t * @param {number} v1 終点\n\t * @param {number} x 補間係数（0~1）\n\t * @returns {number} 補間結果\n\t */\n\tsmoothstep: function (v0, v1, x) {\n\t\tconst s = x * x * (3.0 - 2.0 * x);\n\t\treturn v0 + (v1 - v0) * s;\n\t},\n\n\t/**\n\t * 2つの値が十分近いかどうか判定します（EPSILON以下の差）。\n\t * @param {number} x1 値1\n\t * @param {number} x2 値2\n\t * @returns {boolean} 近ければtrue\n\t */\n\tequals: function (x1, x2) {\n\t\treturn Math.abs(x1 - x2) < S3Math.EPSILON;\n\t},\n\n\t/**\n\t * 剰余を返します（負数にも対応）。\n\t * @param {number} x\n\t * @param {number} y\n\t * @returns {number} 剰余\n\t */\n\tmod: function (x, y) {\n\t\treturn x - y * Math.floor(x / y);\n\t},\n\n\t/**\n\t * 符号を返します。\n\t * @param {number} x\n\t * @returns {number} 正なら1.0、負なら-1.0\n\t */\n\tsign: function (x) {\n\t\treturn x >= 0.0 ? 1.0 : -1.0;\n\t},\n\n\t/**\n\t * 小数部を返します。\n\t * @param {number} x\n\t * @returns {number} 小数部\n\t */\n\tfract: function (x) {\n\t\treturn x - Math.floor(x);\n\t},\n\n\t/**\n\t * 逆平方根（1/√x）を計算します。\n\t * @param {number} x\n\t * @returns {number} 逆平方根\n\t */\n\trsqrt: function (x) {\n\t\treturn Math.sqrt(1.0 / x);\n\t},\n\n\t/**\n\t * 角度（度）をラジアンに変換します。\n\t * @param {number} degree 度数\n\t * @returns {number} ラジアン値\n\t */\n\tradius: function (degree) {\n\t\treturn (degree / 360.0) * (2.0 * Math.PI);\n\t},\n\n\t/**\n\t * ラジアンを角度（度）に変換します。\n\t * @param {number} rad ラジアン値\n\t * @returns {number} 度数\n\t */\n\tdegrees: function (rad) {\n\t\treturn (rad / (2.0 * Math.PI)) * 360.0;\n\t}\n};\n\nexport default S3Math;\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/math/S3Math.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 607,
    "kind": "variable",
    "name": "S3Math",
    "memberof": "src/math/S3Math.js",
    "static": true,
    "longname": "src/math/S3Math.js~S3Math",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/math/S3Math.js",
    "importStyle": "S3Math",
    "description": "数学的な便利関数を提供するユーティリティ\n各種演算（クランプ、ステップ関数、補間、等価判定、三角関数変換等）をまとめた静的オブジェクト",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "type": {
      "types": [
        "{\"EPSILON\": number, \"clamp\": *, \"step\": *, \"mix\": *, \"smoothstep\": *, \"equals\": *, \"mod\": *, \"sign\": *, \"fract\": *, \"rsqrt\": *, \"radius\": *, \"degrees\": *}"
      ]
    }
  },
  {
    "__docId__": 608,
    "kind": "file",
    "name": "src/math/S3Matrix.js",
    "content": "﻿import S3Math from \"./S3Math.js\";\nimport S3Vector from \"./S3Vector.js\";\n\n/**\n * 3DCG用の4x4行列クラス\n * 主に変換行列や射影行列などに使用されます。\n *\n * @class\n * @module S3\n */\nexport default class S3Matrix {\n\t/**\n\t * 3DCG用 の4x4行列  (immutable)\n\t * 行列を作成します。MATLABと同様に行ごとに指定します。\n\t * 9引数で3x3行列、16引数で4x4行列、引数なしで0埋め行列\n\t * @param {Number} [m00]\n\t * @param {Number} [m01]\n\t * @param {Number} [m02]\n\t * @param {Number} [m03]\n\t * @param {Number} [m10]\n\t * @param {Number} [m11]\n\t * @param {Number} [m12]\n\t * @param {Number} [m13]\n\t * @param {Number} [m20]\n\t * @param {Number} [m21]\n\t * @param {Number} [m22]\n\t * @param {Number} [m23]\n\t * @param {Number} [m30]\n\t * @param {Number} [m31]\n\t * @param {Number} [m32]\n\t * @param {Number} [m33]\n\t */\n\tconstructor(\n\t\tm00,\n\t\tm01,\n\t\tm02,\n\t\tm03, // row 1\n\t\tm10,\n\t\tm11,\n\t\tm12,\n\t\tm13, // row 2\n\t\tm20,\n\t\tm21,\n\t\tm22,\n\t\tm23, // row 3\n\t\tm30,\n\t\tm31,\n\t\tm32,\n\t\tm33\n\t) {\n\t\t// row 4\n\t\tif (arguments.length === 0) {\n\t\t\t/** @type {number} */\n\t\t\tthis.m00 = 0.0;\n\t\t\t/** @type {number} */\n\t\t\tthis.m01 = 0.0;\n\t\t\t/** @type {number} */\n\t\t\tthis.m02 = 0.0;\n\t\t\t/** @type {number} */\n\t\t\tthis.m03 = 0.0;\n\t\t\t/** @type {number} */\n\t\t\tthis.m10 = 0.0;\n\t\t\t/** @type {number} */\n\t\t\tthis.m11 = 0.0;\n\t\t\t/** @type {number} */\n\t\t\tthis.m12 = 0.0;\n\t\t\t/** @type {number} */\n\t\t\tthis.m13 = 0.0;\n\t\t\t/** @type {number} */\n\t\t\tthis.m20 = 0.0;\n\t\t\t/** @type {number} */\n\t\t\tthis.m21 = 0.0;\n\t\t\t/** @type {number} */\n\t\t\tthis.m22 = 0.0;\n\t\t\t/** @type {number} */\n\t\t\tthis.m23 = 0.0;\n\t\t\t/** @type {number} */\n\t\t\tthis.m30 = 0.0;\n\t\t\t/** @type {number} */\n\t\t\tthis.m31 = 0.0;\n\t\t\t/** @type {number} */\n\t\t\tthis.m32 = 0.0;\n\t\t\t/** @type {number} */\n\t\t\tthis.m33 = 0.0;\n\t\t} else if (arguments.length === 9) {\n\t\t\t// 3x3行列\n\t\t\tthis.m00 = m00;\n\t\t\tthis.m01 = m01;\n\t\t\tthis.m02 = m02;\n\t\t\tthis.m03 = 0.0;\n\t\t\tthis.m10 = m03;\n\t\t\tthis.m11 = m10;\n\t\t\tthis.m12 = m11;\n\t\t\tthis.m13 = 0.0;\n\t\t\tthis.m20 = m12;\n\t\t\tthis.m21 = m13;\n\t\t\tthis.m22 = m20;\n\t\t\tthis.m23 = 0.0;\n\t\t\tthis.m30 = 0.0;\n\t\t\tthis.m31 = 0.0;\n\t\t\tthis.m32 = 0.0;\n\t\t\tthis.m33 = 1.0;\n\t\t} else if (arguments.length === 16) {\n\t\t\t// 4x4行列\n\t\t\tthis.m00 = m00;\n\t\t\tthis.m01 = m01;\n\t\t\tthis.m02 = m02;\n\t\t\tthis.m03 = m03;\n\t\t\tthis.m10 = m10;\n\t\t\tthis.m11 = m11;\n\t\t\tthis.m12 = m12;\n\t\t\tthis.m13 = m13;\n\t\t\tthis.m20 = m20;\n\t\t\tthis.m21 = m21;\n\t\t\tthis.m22 = m22;\n\t\t\tthis.m23 = m23;\n\t\t\tthis.m30 = m30;\n\t\t\tthis.m31 = m31;\n\t\t\tthis.m32 = m32;\n\t\t\tthis.m33 = m33;\n\t\t} else {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t}\n\n\t/**\n\t * 2つの行列が等しいか判定します。\n\t * @param {S3Matrix} tgt\n\t * @returns {boolean}\n\t */\n\tequals(tgt) {\n\t\treturn (\n\t\t\tS3Math.equals(this.m00, tgt.m00) &&\n\t\t\tS3Math.equals(this.m01, tgt.m01) &&\n\t\t\tS3Math.equals(this.m02, tgt.m02) &&\n\t\t\tS3Math.equals(this.m03, tgt.m03) &&\n\t\t\tS3Math.equals(this.m10, tgt.m10) &&\n\t\t\tS3Math.equals(this.m11, tgt.m11) &&\n\t\t\tS3Math.equals(this.m12, tgt.m12) &&\n\t\t\tS3Math.equals(this.m13, tgt.m13) &&\n\t\t\tS3Math.equals(this.m20, tgt.m20) &&\n\t\t\tS3Math.equals(this.m21, tgt.m21) &&\n\t\t\tS3Math.equals(this.m22, tgt.m22) &&\n\t\t\tS3Math.equals(this.m23, tgt.m23) &&\n\t\t\tS3Math.equals(this.m30, tgt.m30) &&\n\t\t\tS3Math.equals(this.m31, tgt.m31) &&\n\t\t\tS3Math.equals(this.m32, tgt.m32) &&\n\t\t\tS3Math.equals(this.m33, tgt.m33)\n\t\t);\n\t}\n\n\t/**\n\t * 自身のクローンを作成します。\n\t * @returns {S3Matrix}\n\t */\n\tclone() {\n\t\treturn new S3Matrix(\n\t\t\tthis.m00,\n\t\t\tthis.m01,\n\t\t\tthis.m02,\n\t\t\tthis.m03,\n\t\t\tthis.m10,\n\t\t\tthis.m11,\n\t\t\tthis.m12,\n\t\t\tthis.m13,\n\t\t\tthis.m20,\n\t\t\tthis.m21,\n\t\t\tthis.m22,\n\t\t\tthis.m23,\n\t\t\tthis.m30,\n\t\t\tthis.m31,\n\t\t\tthis.m32,\n\t\t\tthis.m33\n\t\t);\n\t}\n\n\t/**\n\t * 転置行列を返します。\n\t * @returns {S3Matrix}\n\t */\n\ttransposed() {\n\t\treturn new S3Matrix(\n\t\t\tthis.m00,\n\t\t\tthis.m10,\n\t\t\tthis.m20,\n\t\t\tthis.m30,\n\t\t\tthis.m01,\n\t\t\tthis.m11,\n\t\t\tthis.m21,\n\t\t\tthis.m31,\n\t\t\tthis.m02,\n\t\t\tthis.m12,\n\t\t\tthis.m22,\n\t\t\tthis.m32,\n\t\t\tthis.m03,\n\t\t\tthis.m13,\n\t\t\tthis.m23,\n\t\t\tthis.m33\n\t\t);\n\t}\n\n\t/**\n\t * 非数成分を含むか判定します。\n\t * @returns {boolean}\n\t */\n\tisNaN() {\n\t\treturn (\n\t\t\tisNaN(this.m00) ||\n\t\t\tisNaN(this.m01) ||\n\t\t\tisNaN(this.m02) ||\n\t\t\tisNaN(this.m03) ||\n\t\t\tisNaN(this.m10) ||\n\t\t\tisNaN(this.m11) ||\n\t\t\tisNaN(this.m12) ||\n\t\t\tisNaN(this.m13) ||\n\t\t\tisNaN(this.m20) ||\n\t\t\tisNaN(this.m21) ||\n\t\t\tisNaN(this.m22) ||\n\t\t\tisNaN(this.m23) ||\n\t\t\tisNaN(this.m30) ||\n\t\t\tisNaN(this.m31) ||\n\t\t\tisNaN(this.m32) ||\n\t\t\tisNaN(this.m33)\n\t\t);\n\t}\n\n\t/**\n\t * 有限の成分のみか判定します。\n\t * @returns {boolean}\n\t */\n\tisFinite() {\n\t\treturn (\n\t\t\t(isFinite(this.m00) && isFinite(this.m01) && isFinite(this.m02) && isFinite(this.m03)) ||\n\t\t\t(isFinite(this.m10) && isFinite(this.m11) && isFinite(this.m12) && isFinite(this.m13)) ||\n\t\t\t(isFinite(this.m20) && isFinite(this.m21) && isFinite(this.m22) && isFinite(this.m23)) ||\n\t\t\t(isFinite(this.m30) && isFinite(this.m31) && isFinite(this.m32) && isFinite(this.m33))\n\t\t);\n\t}\n\n\t/**\n\t * 実数値成分のみか判定します。\n\t * @returns {boolean}\n\t */\n\tisRealNumber() {\n\t\treturn !this.isNaN() && this.isFinite();\n\t}\n\n\t/**\n\t * 行列またはベクトルとの掛け算を行います。\n\t * @param {S3Matrix} tgt 行列\n\t * @returns {S3Matrix}\n\t */\n\tmulMatrix(tgt) {\n\t\tconst A = this;\n\t\tconst B = tgt;\n\t\tconst C = new S3Matrix();\n\t\t// 行列クラスのコンストラクタを変更しても問題がないように\n\t\t// 後で代入を行っております。\n\t\tC.m00 = A.m00 * B.m00 + A.m01 * B.m10 + A.m02 * B.m20 + A.m03 * B.m30;\n\t\tC.m01 = A.m00 * B.m01 + A.m01 * B.m11 + A.m02 * B.m21 + A.m03 * B.m31;\n\t\tC.m02 = A.m00 * B.m02 + A.m01 * B.m12 + A.m02 * B.m22 + A.m03 * B.m32;\n\t\tC.m03 = A.m00 * B.m03 + A.m01 * B.m13 + A.m02 * B.m23 + A.m03 * B.m33;\n\t\tC.m10 = A.m10 * B.m00 + A.m11 * B.m10 + A.m12 * B.m20 + A.m13 * B.m30;\n\t\tC.m11 = A.m10 * B.m01 + A.m11 * B.m11 + A.m12 * B.m21 + A.m13 * B.m31;\n\t\tC.m12 = A.m10 * B.m02 + A.m11 * B.m12 + A.m12 * B.m22 + A.m13 * B.m32;\n\t\tC.m13 = A.m10 * B.m03 + A.m11 * B.m13 + A.m12 * B.m23 + A.m13 * B.m33;\n\t\tC.m20 = A.m20 * B.m00 + A.m21 * B.m10 + A.m22 * B.m20 + A.m23 * B.m30;\n\t\tC.m21 = A.m20 * B.m01 + A.m21 * B.m11 + A.m22 * B.m21 + A.m23 * B.m31;\n\t\tC.m22 = A.m20 * B.m02 + A.m21 * B.m12 + A.m22 * B.m22 + A.m23 * B.m32;\n\t\tC.m23 = A.m20 * B.m03 + A.m21 * B.m13 + A.m22 * B.m23 + A.m23 * B.m33;\n\t\tC.m30 = A.m30 * B.m00 + A.m31 * B.m10 + A.m32 * B.m20 + A.m33 * B.m30;\n\t\tC.m31 = A.m30 * B.m01 + A.m31 * B.m11 + A.m32 * B.m21 + A.m33 * B.m31;\n\t\tC.m32 = A.m30 * B.m02 + A.m31 * B.m12 + A.m32 * B.m22 + A.m33 * B.m32;\n\t\tC.m33 = A.m30 * B.m03 + A.m31 * B.m13 + A.m32 * B.m23 + A.m33 * B.m33;\n\t\treturn C;\n\t}\n\n\t/**\n\t * 縦ベクトルとの掛け算を行います。\n\t * @param {S3Vector} tgt 縦ベクトル\n\t * @returns {S3Vector}\n\t */\n\tmulVector(tgt) {\n\t\tconst A = this;\n\t\tconst v = tgt;\n\t\t// 行列×縦ベクトル＝縦ベクトル\n\t\t// Av = u なので、各項を行列の行ごとで掛け算する\n\t\treturn new S3Vector(\n\t\t\tA.m00 * v.x + A.m01 * v.y + A.m02 * v.z + A.m03 * v.w,\n\t\t\tA.m10 * v.x + A.m11 * v.y + A.m12 * v.z + A.m13 * v.w,\n\t\t\tA.m20 * v.x + A.m21 * v.y + A.m22 * v.z + A.m23 * v.w,\n\t\t\tA.m30 * v.x + A.m31 * v.y + A.m32 * v.z + A.m33 * v.w\n\t\t);\n\t}\n\n\t/**\n\t * 3x3部分行列の行列式を計算します。\n\t * @returns {number}\n\t */\n\tdet3() {\n\t\tconst A = this;\n\t\tlet out;\n\t\tout = A.m00 * A.m11 * A.m22;\n\t\tout += A.m10 * A.m21 * A.m02;\n\t\tout += A.m20 * A.m01 * A.m12;\n\t\tout -= A.m00 * A.m21 * A.m12;\n\t\tout -= A.m20 * A.m11 * A.m02;\n\t\tout -= A.m10 * A.m01 * A.m22;\n\t\treturn out;\n\t}\n\n\t/**\n\t * 3x3部分行列の逆行列を返します。\n\t * @returns {S3Matrix|null}\n\t */\n\tinverse3() {\n\t\tconst A = this;\n\t\tconst det = A.det3();\n\t\tif (det === 0.0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst id = 1.0 / det;\n\t\tconst B = A.clone();\n\t\tB.m00 = (A.m11 * A.m22 - A.m12 * A.m21) * id;\n\t\tB.m01 = (A.m02 * A.m21 - A.m01 * A.m22) * id;\n\t\tB.m02 = (A.m01 * A.m12 - A.m02 * A.m11) * id;\n\t\tB.m10 = (A.m12 * A.m20 - A.m10 * A.m22) * id;\n\t\tB.m11 = (A.m00 * A.m22 - A.m02 * A.m20) * id;\n\t\tB.m12 = (A.m02 * A.m10 - A.m00 * A.m12) * id;\n\t\tB.m20 = (A.m10 * A.m21 - A.m11 * A.m20) * id;\n\t\tB.m21 = (A.m01 * A.m20 - A.m00 * A.m21) * id;\n\t\tB.m22 = (A.m00 * A.m11 - A.m01 * A.m10) * id;\n\t\treturn B;\n\t}\n\n\t/**\n\t * 4x4行列の行列式を計算します。\n\t * @returns {number}\n\t */\n\tdet4() {\n\t\tconst A = this;\n\t\tlet out;\n\t\tout = A.m00 * A.m11 * A.m22 * A.m33;\n\t\tout += A.m00 * A.m12 * A.m23 * A.m31;\n\t\tout += A.m00 * A.m13 * A.m21 * A.m32;\n\t\tout += A.m01 * A.m10 * A.m23 * A.m32;\n\t\tout += A.m01 * A.m12 * A.m20 * A.m33;\n\t\tout += A.m01 * A.m13 * A.m22 * A.m30;\n\t\tout += A.m02 * A.m10 * A.m21 * A.m33;\n\t\tout += A.m02 * A.m11 * A.m23 * A.m30;\n\t\tout += A.m02 * A.m13 * A.m20 * A.m31;\n\t\tout += A.m03 * A.m10 * A.m22 * A.m31;\n\t\tout += A.m03 * A.m11 * A.m20 * A.m32;\n\t\tout += A.m03 * A.m12 * A.m21 * A.m30;\n\t\tout -= A.m00 * A.m11 * A.m23 * A.m32;\n\t\tout -= A.m00 * A.m12 * A.m21 * A.m33;\n\t\tout -= A.m00 * A.m13 * A.m22 * A.m31;\n\t\tout -= A.m01 * A.m10 * A.m22 * A.m33;\n\t\tout -= A.m01 * A.m12 * A.m23 * A.m30;\n\t\tout -= A.m01 * A.m13 * A.m20 * A.m32;\n\t\tout -= A.m02 * A.m10 * A.m23 * A.m31;\n\t\tout -= A.m02 * A.m11 * A.m20 * A.m33;\n\t\tout -= A.m02 * A.m13 * A.m21 * A.m30;\n\t\tout -= A.m03 * A.m10 * A.m21 * A.m32;\n\t\tout -= A.m03 * A.m11 * A.m22 * A.m30;\n\t\tout -= A.m03 * A.m12 * A.m20 * A.m31;\n\t\treturn out;\n\t}\n\n\t/**\n\t * 4x4行列の逆行列を返します。\n\t * @returns {S3Matrix|null}\n\t */\n\tinverse4() {\n\t\tconst A = this;\n\t\tconst det = A.det4();\n\t\tif (det === 0.0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst id = 1.0 / det;\n\t\tconst B = new S3Matrix();\n\t\tB.m00 =\n\t\t\t(A.m11 * A.m22 * A.m33 +\n\t\t\t\tA.m12 * A.m23 * A.m31 +\n\t\t\t\tA.m13 * A.m21 * A.m32 -\n\t\t\t\tA.m11 * A.m23 * A.m32 -\n\t\t\t\tA.m12 * A.m21 * A.m33 -\n\t\t\t\tA.m13 * A.m22 * A.m31) *\n\t\t\tid;\n\t\tB.m01 =\n\t\t\t(A.m01 * A.m23 * A.m32 +\n\t\t\t\tA.m02 * A.m21 * A.m33 +\n\t\t\t\tA.m03 * A.m22 * A.m31 -\n\t\t\t\tA.m01 * A.m22 * A.m33 -\n\t\t\t\tA.m02 * A.m23 * A.m31 -\n\t\t\t\tA.m03 * A.m21 * A.m32) *\n\t\t\tid;\n\t\tB.m02 =\n\t\t\t(A.m01 * A.m12 * A.m33 +\n\t\t\t\tA.m02 * A.m13 * A.m31 +\n\t\t\t\tA.m03 * A.m11 * A.m32 -\n\t\t\t\tA.m01 * A.m13 * A.m32 -\n\t\t\t\tA.m02 * A.m11 * A.m33 -\n\t\t\t\tA.m03 * A.m12 * A.m31) *\n\t\t\tid;\n\t\tB.m03 =\n\t\t\t(A.m01 * A.m13 * A.m22 +\n\t\t\t\tA.m02 * A.m11 * A.m23 +\n\t\t\t\tA.m03 * A.m12 * A.m21 -\n\t\t\t\tA.m01 * A.m12 * A.m23 -\n\t\t\t\tA.m02 * A.m13 * A.m21 -\n\t\t\t\tA.m03 * A.m11 * A.m22) *\n\t\t\tid;\n\t\tB.m10 =\n\t\t\t(A.m10 * A.m23 * A.m32 +\n\t\t\t\tA.m12 * A.m20 * A.m33 +\n\t\t\t\tA.m13 * A.m22 * A.m30 -\n\t\t\t\tA.m10 * A.m22 * A.m33 -\n\t\t\t\tA.m12 * A.m23 * A.m30 -\n\t\t\t\tA.m13 * A.m20 * A.m32) *\n\t\t\tid;\n\t\tB.m11 =\n\t\t\t(A.m00 * A.m22 * A.m33 +\n\t\t\t\tA.m02 * A.m23 * A.m30 +\n\t\t\t\tA.m03 * A.m20 * A.m32 -\n\t\t\t\tA.m00 * A.m23 * A.m32 -\n\t\t\t\tA.m02 * A.m20 * A.m33 -\n\t\t\t\tA.m03 * A.m22 * A.m30) *\n\t\t\tid;\n\t\tB.m12 =\n\t\t\t(A.m00 * A.m13 * A.m32 +\n\t\t\t\tA.m02 * A.m10 * A.m33 +\n\t\t\t\tA.m03 * A.m12 * A.m30 -\n\t\t\t\tA.m00 * A.m12 * A.m33 -\n\t\t\t\tA.m02 * A.m13 * A.m30 -\n\t\t\t\tA.m03 * A.m10 * A.m32) *\n\t\t\tid;\n\t\tB.m13 =\n\t\t\t(A.m00 * A.m12 * A.m23 +\n\t\t\t\tA.m02 * A.m13 * A.m20 +\n\t\t\t\tA.m03 * A.m10 * A.m22 -\n\t\t\t\tA.m00 * A.m13 * A.m22 -\n\t\t\t\tA.m02 * A.m10 * A.m23 -\n\t\t\t\tA.m03 * A.m12 * A.m20) *\n\t\t\tid;\n\t\tB.m20 =\n\t\t\t(A.m10 * A.m21 * A.m33 +\n\t\t\t\tA.m11 * A.m23 * A.m30 +\n\t\t\t\tA.m13 * A.m20 * A.m31 -\n\t\t\t\tA.m10 * A.m23 * A.m31 -\n\t\t\t\tA.m11 * A.m20 * A.m33 -\n\t\t\t\tA.m13 * A.m21 * A.m30) *\n\t\t\tid;\n\t\tB.m21 =\n\t\t\t(A.m00 * A.m23 * A.m31 +\n\t\t\t\tA.m01 * A.m20 * A.m33 +\n\t\t\t\tA.m03 * A.m21 * A.m30 -\n\t\t\t\tA.m00 * A.m21 * A.m33 -\n\t\t\t\tA.m01 * A.m23 * A.m30 -\n\t\t\t\tA.m03 * A.m20 * A.m31) *\n\t\t\tid;\n\t\tB.m22 =\n\t\t\t(A.m00 * A.m11 * A.m33 +\n\t\t\t\tA.m01 * A.m13 * A.m30 +\n\t\t\t\tA.m03 * A.m10 * A.m31 -\n\t\t\t\tA.m00 * A.m13 * A.m31 -\n\t\t\t\tA.m01 * A.m10 * A.m33 -\n\t\t\t\tA.m03 * A.m11 * A.m30) *\n\t\t\tid;\n\t\tB.m23 =\n\t\t\t(A.m00 * A.m13 * A.m21 +\n\t\t\t\tA.m01 * A.m10 * A.m23 +\n\t\t\t\tA.m03 * A.m11 * A.m20 -\n\t\t\t\tA.m00 * A.m11 * A.m23 -\n\t\t\t\tA.m01 * A.m13 * A.m20 -\n\t\t\t\tA.m03 * A.m10 * A.m21) *\n\t\t\tid;\n\t\tB.m30 =\n\t\t\t(A.m10 * A.m22 * A.m31 +\n\t\t\t\tA.m11 * A.m20 * A.m32 +\n\t\t\t\tA.m12 * A.m21 * A.m30 -\n\t\t\t\tA.m10 * A.m21 * A.m32 -\n\t\t\t\tA.m11 * A.m22 * A.m30 -\n\t\t\t\tA.m12 * A.m20 * A.m31) *\n\t\t\tid;\n\t\tB.m31 =\n\t\t\t(A.m00 * A.m21 * A.m32 +\n\t\t\t\tA.m01 * A.m22 * A.m30 +\n\t\t\t\tA.m02 * A.m20 * A.m31 -\n\t\t\t\tA.m00 * A.m22 * A.m31 -\n\t\t\t\tA.m01 * A.m20 * A.m32 -\n\t\t\t\tA.m02 * A.m21 * A.m30) *\n\t\t\tid;\n\t\tB.m32 =\n\t\t\t(A.m00 * A.m12 * A.m31 +\n\t\t\t\tA.m01 * A.m10 * A.m32 +\n\t\t\t\tA.m02 * A.m11 * A.m30 -\n\t\t\t\tA.m00 * A.m11 * A.m32 -\n\t\t\t\tA.m01 * A.m12 * A.m30 -\n\t\t\t\tA.m02 * A.m10 * A.m31) *\n\t\t\tid;\n\t\tB.m33 =\n\t\t\t(A.m00 * A.m11 * A.m22 +\n\t\t\t\tA.m01 * A.m12 * A.m20 +\n\t\t\t\tA.m02 * A.m10 * A.m21 -\n\t\t\t\tA.m00 * A.m12 * A.m21 -\n\t\t\t\tA.m01 * A.m10 * A.m22 -\n\t\t\t\tA.m02 * A.m11 * A.m20) *\n\t\t\tid;\n\t\treturn B;\n\t}\n\n\t/**\n\t * 行列を文字列に変換します。\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\treturn (\n\t\t\t\"[\" +\n\t\t\t\"[\" +\n\t\t\tthis.m00 +\n\t\t\t\" \" +\n\t\t\tthis.m01 +\n\t\t\t\" \" +\n\t\t\tthis.m02 +\n\t\t\t\" \" +\n\t\t\tthis.m03 +\n\t\t\t\"]\\n\" +\n\t\t\t\" [\" +\n\t\t\tthis.m10 +\n\t\t\t\" \" +\n\t\t\tthis.m11 +\n\t\t\t\" \" +\n\t\t\tthis.m12 +\n\t\t\t\" \" +\n\t\t\tthis.m13 +\n\t\t\t\"]\\n\" +\n\t\t\t\" [\" +\n\t\t\tthis.m20 +\n\t\t\t\" \" +\n\t\t\tthis.m21 +\n\t\t\t\" \" +\n\t\t\tthis.m22 +\n\t\t\t\" \" +\n\t\t\tthis.m23 +\n\t\t\t\"]\\n\" +\n\t\t\t\" [\" +\n\t\t\tthis.m30 +\n\t\t\t\" \" +\n\t\t\tthis.m31 +\n\t\t\t\" \" +\n\t\t\tthis.m32 +\n\t\t\t\" \" +\n\t\t\tthis.m33 +\n\t\t\t\"]]\"\n\t\t);\n\t}\n\n\t/**\n\t * 他の型のインスタンスに変換します（配列化）。\n\t * @param {{new(array: number[]): any}} Instance 配列型のコンストラクタ\n\t * @param {number} dimension 配列長\n\t * @returns {*} 変換結果\n\t */\n\ttoInstanceArray(Instance, dimension) {\n\t\tif (dimension === 1) {\n\t\t\treturn new Instance([this.m00]);\n\t\t} else if (dimension === 4) {\n\t\t\treturn new Instance([this.m00, this.m10, this.m01, this.m11]);\n\t\t} else if (dimension === 9) {\n\t\t\treturn new Instance([\n\t\t\t\tthis.m00,\n\t\t\t\tthis.m10,\n\t\t\t\tthis.m20,\n\t\t\t\tthis.m01,\n\t\t\t\tthis.m11,\n\t\t\t\tthis.m21,\n\t\t\t\tthis.m02,\n\t\t\t\tthis.m12,\n\t\t\t\tthis.m22\n\t\t\t]);\n\t\t} else {\n\t\t\treturn new Instance([\n\t\t\t\tthis.m00,\n\t\t\t\tthis.m10,\n\t\t\t\tthis.m20,\n\t\t\t\tthis.m30,\n\t\t\t\tthis.m01,\n\t\t\t\tthis.m11,\n\t\t\t\tthis.m21,\n\t\t\t\tthis.m31,\n\t\t\t\tthis.m02,\n\t\t\t\tthis.m12,\n\t\t\t\tthis.m22,\n\t\t\t\tthis.m32,\n\t\t\t\tthis.m03,\n\t\t\t\tthis.m13,\n\t\t\t\tthis.m23,\n\t\t\t\tthis.m33\n\t\t\t]);\n\t\t}\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/math/S3Matrix.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 609,
    "kind": "class",
    "name": "S3Matrix",
    "memberof": "src/math/S3Matrix.js",
    "static": true,
    "longname": "src/math/S3Matrix.js~S3Matrix",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/math/S3Matrix.js",
    "importStyle": "S3Matrix",
    "description": "3DCG用の4x4行列クラス\n主に変換行列や射影行列などに使用されます。",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 610,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#constructor",
    "access": "public",
    "description": "3DCG用 の4x4行列  (immutable)\n行列を作成します。MATLABと同様に行ごとに指定します。\n9引数で3x3行列、16引数で4x4行列、引数なしで0埋め行列",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "m00",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "m01",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "m02",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "m03",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "m10",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "m11",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "m12",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "m13",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "m20",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "m21",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "m22",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "m23",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "m30",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "m31",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "m32",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "m33",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 611,
    "kind": "member",
    "name": "m00",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#m00",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 612,
    "kind": "member",
    "name": "m01",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#m01",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 613,
    "kind": "member",
    "name": "m02",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#m02",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 614,
    "kind": "member",
    "name": "m03",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#m03",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 615,
    "kind": "member",
    "name": "m10",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#m10",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 616,
    "kind": "member",
    "name": "m11",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#m11",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 617,
    "kind": "member",
    "name": "m12",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#m12",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 618,
    "kind": "member",
    "name": "m13",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#m13",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 619,
    "kind": "member",
    "name": "m20",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#m20",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 620,
    "kind": "member",
    "name": "m21",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#m21",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 621,
    "kind": "member",
    "name": "m22",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#m22",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 622,
    "kind": "member",
    "name": "m23",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#m23",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 623,
    "kind": "member",
    "name": "m30",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#m30",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 624,
    "kind": "member",
    "name": "m31",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#m31",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 625,
    "kind": "member",
    "name": "m32",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#m32",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 626,
    "kind": "member",
    "name": "m33",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#m33",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 659,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#equals",
    "access": "public",
    "description": "2つの行列が等しいか判定します。",
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "tgt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 660,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#clone",
    "access": "public",
    "description": "自身のクローンを作成します。",
    "lineNumber": 156,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 661,
    "kind": "method",
    "name": "transposed",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#transposed",
    "access": "public",
    "description": "転置行列を返します。",
    "lineNumber": 181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 662,
    "kind": "method",
    "name": "isNaN",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#isNaN",
    "access": "public",
    "description": "非数成分を含むか判定します。",
    "lineNumber": 206,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 663,
    "kind": "method",
    "name": "isFinite",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#isFinite",
    "access": "public",
    "description": "有限の成分のみか判定します。",
    "lineNumber": 231,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 664,
    "kind": "method",
    "name": "isRealNumber",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#isRealNumber",
    "access": "public",
    "description": "実数値成分のみか判定します。",
    "lineNumber": 244,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 665,
    "kind": "method",
    "name": "mulMatrix",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#mulMatrix",
    "access": "public",
    "description": "行列またはベクトルとの掛け算を行います。",
    "lineNumber": 253,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "tgt",
        "description": "行列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 666,
    "kind": "method",
    "name": "mulVector",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#mulVector",
    "access": "public",
    "description": "縦ベクトルとの掛け算を行います。",
    "lineNumber": 283,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "tgt",
        "description": "縦ベクトル"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 667,
    "kind": "method",
    "name": "det3",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#det3",
    "access": "public",
    "description": "3x3部分行列の行列式を計算します。",
    "lineNumber": 300,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 668,
    "kind": "method",
    "name": "inverse3",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#inverse3",
    "access": "public",
    "description": "3x3部分行列の逆行列を返します。",
    "lineNumber": 316,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix|null}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 669,
    "kind": "method",
    "name": "det4",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#det4",
    "access": "public",
    "description": "4x4行列の行列式を計算します。",
    "lineNumber": 340,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 670,
    "kind": "method",
    "name": "inverse4",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#inverse4",
    "access": "public",
    "description": "4x4行列の逆行列を返します。",
    "lineNumber": 374,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Matrix|null}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Matrix",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 671,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#toString",
    "access": "public",
    "description": "行列を文字列に変換します。",
    "lineNumber": 517,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 672,
    "kind": "method",
    "name": "toInstanceArray",
    "memberof": "src/math/S3Matrix.js~S3Matrix",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Matrix.js~S3Matrix#toInstanceArray",
    "access": "public",
    "description": "他の型のインスタンスに変換します（配列化）。",
    "lineNumber": 565,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} 変換結果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{new(array: number[]): any}"
        ],
        "spread": false,
        "optional": false,
        "name": "Instance",
        "description": "配列型のコンストラクタ"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "配列長"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "変換結果"
    }
  },
  {
    "__docId__": 673,
    "kind": "file",
    "name": "src/math/S3Plane.js",
    "content": "﻿﻿import S3Vector from \"./S3Vector.js\";\n\n/**\n * 3DCG用の平面クラス\n * 法線ベクトルと距離または平面上の1点から平面を定義します。\n *\n * @class\n * @module S3\n */\nexport default class S3Plane {\n\t/**\n\t * 平面を作成します。\n\t * @param {S3Vector} n 平面の法線ベクトル\n\t * @param {number|S3Vector} d 原点からの距離、または平面上の任意の点\n\t */\n\tconstructor(n, d) {\n\t\tif (d instanceof S3Vector) {\n\t\t\t/**\n\t\t\t * 平面の法線ベクトル\n\t\t\t * @type {S3Vector}\n\t\t\t */\n\t\t\tthis.n = n;\n\n\t\t\t/**\n\t\t\t * 原点からの距離\n\t\t\t * @type {number}\n\t\t\t */\n\t\t\tthis.d = this.n.dot(d);\n\t\t} else {\n\t\t\tthis.n = n;\n\t\t\tthis.d = d;\n\t\t}\n\t}\n\n\t/**\n\t * 任意の点から平面への距離を求めます。\n\t * @param {S3Vector} position 点の座標\n\t * @returns {number} 平面までの距離\n\t */\n\tgetDistance(position) {\n\t\treturn position.dot(this.n) - this.d;\n\t}\n\n\t/**\n\t * 任意の点から最も近い平面上の点を求めます。\n\t * @param {S3Vector} position 点の座標\n\t * @returns {S3Vector} 平面上の最も近い点\n\t */\n\tgetNearestPoint(position) {\n\t\treturn this.n.mul(-this.getDistance(position)).add(position);\n\t}\n\n\t/**\n\t * 点が平面の内側（法線方向の裏側）にあるか判定します。\n\t * @param {S3Vector} position 点の座標\n\t * @returns {boolean} 内側ならtrue\n\t */\n\tisHitPosition(position) {\n\t\treturn this.getDistance(position) < 0;\n\t}\n\n\t/**\n\t * 平面を文字列に変換します。\n\t * @returns {string} 平面の情報を表す文字列\n\t */\n\ttoString() {\n\t\treturn \"Plane(\" + this.n.toString() + \", [\" + this.d + \"])\";\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/math/S3Plane.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 674,
    "kind": "class",
    "name": "S3Plane",
    "memberof": "src/math/S3Plane.js",
    "static": true,
    "longname": "src/math/S3Plane.js~S3Plane",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/math/S3Plane.js",
    "importStyle": "S3Plane",
    "description": "3DCG用の平面クラス\n法線ベクトルと距離または平面上の1点から平面を定義します。",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 675,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/S3Plane.js~S3Plane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Plane.js~S3Plane#constructor",
    "access": "public",
    "description": "平面を作成します。",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "平面の法線ベクトル"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": "原点からの距離、または平面上の任意の点"
      }
    ]
  },
  {
    "__docId__": 676,
    "kind": "member",
    "name": "n",
    "memberof": "src/math/S3Plane.js~S3Plane",
    "static": false,
    "longname": "src/math/S3Plane.js~S3Plane#n",
    "access": "public",
    "description": "平面の法線ベクトル",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 677,
    "kind": "member",
    "name": "d",
    "memberof": "src/math/S3Plane.js~S3Plane",
    "static": false,
    "longname": "src/math/S3Plane.js~S3Plane#d",
    "access": "public",
    "description": "原点からの距離",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 680,
    "kind": "method",
    "name": "getDistance",
    "memberof": "src/math/S3Plane.js~S3Plane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Plane.js~S3Plane#getDistance",
    "access": "public",
    "description": "任意の点から平面への距離を求めます。",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 平面までの距離"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "点の座標"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "平面までの距離"
    }
  },
  {
    "__docId__": 681,
    "kind": "method",
    "name": "getNearestPoint",
    "memberof": "src/math/S3Plane.js~S3Plane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Plane.js~S3Plane#getNearestPoint",
    "access": "public",
    "description": "任意の点から最も近い平面上の点を求めます。",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector} 平面上の最も近い点"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "点の座標"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": "平面上の最も近い点"
    }
  },
  {
    "__docId__": 682,
    "kind": "method",
    "name": "isHitPosition",
    "memberof": "src/math/S3Plane.js~S3Plane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Plane.js~S3Plane#isHitPosition",
    "access": "public",
    "description": "点が平面の内側（法線方向の裏側）にあるか判定します。",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 内側ならtrue"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "点の座標"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "内側ならtrue"
    }
  },
  {
    "__docId__": 683,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/S3Plane.js~S3Plane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Plane.js~S3Plane#toString",
    "access": "public",
    "description": "平面を文字列に変換します。",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 平面の情報を表す文字列"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "平面の情報を表す文字列"
    },
    "params": []
  },
  {
    "__docId__": 684,
    "kind": "file",
    "name": "src/math/S3Vector.js",
    "content": "﻿﻿import S3Math from \"./S3Math.js\";\nimport S3Matrix from \"./S3Matrix.js\";\n\n/**\n * 3DCG用のベクトルクラス（immutable）\n *\n * @class\n * @module S3\n */\nexport default class S3Vector {\n\t/**\n\t * ベクトルを作成します。\n\t * @param {number} x x成分\n\t * @param {number} y y成分\n\t * @param {number} [z=0.0] z成分\n\t * @param {number} [w=1.0] w成分（遠近除算用）\n\t */\n\tconstructor(x, y, z, w) {\n\t\t/**\n\t\t * x成分\n\t\t * @type {number}\n\t\t */\n\t\tthis.x = x;\n\n\t\t/**\n\t\t * y成分\n\t\t * @type {number}\n\t\t */\n\t\tthis.y = y;\n\t\tif (z === undefined) {\n\t\t\t/**\n\t\t\t * z成分\n\t\t\t * @type {number}\n\t\t\t * @default 0.0\n\t\t\t */\n\t\t\tthis.z = 0.0;\n\t\t} else {\n\t\t\tthis.z = z;\n\t\t}\n\t\tif (w === undefined) {\n\t\t\t/**\n\t\t\t * w成分（遠近除算用）\n\t\t\t * @type {number}\n\t\t\t * @default 1.0\n\t\t\t */\n\t\t\tthis.w = 1.0;\n\t\t} else {\n\t\t\tthis.w = w;\n\t\t}\n\t}\n\n\t/**\n\t * 自身のクローンを作成します。\n\t * @returns {S3Vector} 複製されたベクトル\n\t */\n\tclone() {\n\t\treturn new S3Vector(this.x, this.y, this.z, this.w);\n\t}\n\n\t/**\n\t * 各成分を反転したベクトルを返します。\n\t * @returns {S3Vector}\n\t */\n\tnegate() {\n\t\treturn new S3Vector(-this.x, -this.y, -this.z, this.w);\n\t}\n\n\t/**\n\t * 2つのベクトルの外積を計算します。\n\t * @param {S3Vector} tgt\n\t * @returns {S3Vector} 外積ベクトル\n\t */\n\tcross(tgt) {\n\t\treturn new S3Vector(\n\t\t\tthis.y * tgt.z - this.z * tgt.y,\n\t\t\tthis.z * tgt.x - this.x * tgt.z,\n\t\t\tthis.x * tgt.y - this.y * tgt.x,\n\t\t\t1.0\n\t\t);\n\t}\n\n\t/**\n\t * 2つのベクトルの内積を計算します。\n\t * @param {S3Vector} tgt\n\t * @returns {number} 内積値\n\t */\n\tdot(tgt) {\n\t\treturn this.x * tgt.x + this.y * tgt.y + this.z * tgt.z;\n\t}\n\n\t/**\n\t * ベクトル同士の加算を行います。\n\t * @param {S3Vector} tgt\n\t * @returns {S3Vector} 加算結果\n\t */\n\tadd(tgt) {\n\t\treturn new S3Vector(this.x + tgt.x, this.y + tgt.y, this.z + tgt.z, 1.0);\n\t}\n\n\t/**\n\t * ベクトル同士の減算を行います。\n\t * @param {S3Vector} tgt\n\t * @returns {S3Vector} 減算結果\n\t */\n\tsub(tgt) {\n\t\treturn new S3Vector(this.x - tgt.x, this.y - tgt.y, this.z - tgt.z, 1.0);\n\t}\n\n\t/**\n\t * ベクトルの各成分にスカラー、ベクトル、または行列を掛けます。\n\t * @param {number|S3Vector|S3Matrix} tgt\n\t * @returns {S3Vector}\n\t */\n\tmul(tgt) {\n\t\tif (tgt instanceof S3Vector) {\n\t\t\treturn new S3Vector(this.x * tgt.x, this.y * tgt.y, this.z * tgt.z, 1.0);\n\t\t} else if (tgt instanceof S3Matrix) {\n\t\t\t// 横ベクトル×行列＝横ベクトル\n\t\t\tconst v = this;\n\t\t\tconst A = tgt;\n\t\t\t// vA = u なので、各項を行列の列ごとで掛け算する\n\t\t\treturn new S3Vector(\n\t\t\t\tv.x * A.m00 + v.y * A.m10 + v.z * A.m20 + v.w * A.m30,\n\t\t\t\tv.x * A.m01 + v.y * A.m11 + v.z * A.m21 + v.w * A.m31,\n\t\t\t\tv.x * A.m02 + v.y * A.m12 + v.z * A.m22 + v.w * A.m32,\n\t\t\t\tv.x * A.m03 + v.y * A.m13 + v.z * A.m23 + v.w * A.m33\n\t\t\t);\n\t\t} else if (typeof tgt === \"number\") {\n\t\t\treturn new S3Vector(this.x * tgt, this.y * tgt, this.z * tgt, 1.0);\n\t\t} else {\n\t\t\tthrow \"IllegalArgumentException\";\n\t\t}\n\t}\n\n\t/**\n\t * x成分のみ変更した新しいベクトルを返します。\n\t * @param {number} x\n\t * @returns {S3Vector}\n\t */\n\tsetX(x) {\n\t\treturn new S3Vector(x, this.y, this.z, this.w);\n\t}\n\n\t/**\n\t * y成分のみ変更した新しいベクトルを返します。\n\t * @param {number} y\n\t * @returns {S3Vector}\n\t */\n\tsetY(y) {\n\t\treturn new S3Vector(this.x, y, this.z, this.w);\n\t}\n\n\t/**\n\t * z成分のみ変更した新しいベクトルを返します。\n\t * @param {number} z\n\t * @returns {S3Vector}\n\t */\n\tsetZ(z) {\n\t\treturn new S3Vector(this.x, this.y, z, this.w);\n\t}\n\n\t/**\n\t * w成分のみ変更した新しいベクトルを返します。\n\t * @param {number} w\n\t * @returns {S3Vector}\n\t */\n\tsetW(w) {\n\t\treturn new S3Vector(this.x, this.y, this.z, w);\n\t}\n\n\t/**\n\t * 各成分の最大値を持つ新しいベクトルを返します。\n\t * @param {S3Vector} tgt\n\t * @returns {S3Vector}\n\t */\n\tmax(tgt) {\n\t\treturn new S3Vector(\n\t\t\tMath.max(this.x, tgt.x),\n\t\t\tMath.max(this.y, tgt.y),\n\t\t\tMath.max(this.z, tgt.z),\n\t\t\tMath.max(this.w, tgt.w)\n\t\t);\n\t}\n\n\t/**\n\t * 各成分の最小値を持つ新しいベクトルを返します。\n\t * @param {S3Vector} tgt\n\t * @returns {S3Vector}\n\t */\n\tmin(tgt) {\n\t\treturn new S3Vector(\n\t\t\tMath.min(this.x, tgt.x),\n\t\t\tMath.min(this.y, tgt.y),\n\t\t\tMath.min(this.z, tgt.z),\n\t\t\tMath.min(this.w, tgt.w)\n\t\t);\n\t}\n\t/**\n\t * 各成分が等しいか判定します。\n\t * @param {S3Vector} tgt\n\t * @returns {boolean} 全ての成分が等しい場合true\n\t */\n\tequals(tgt) {\n\t\treturn (\n\t\t\tS3Math.equals(this.x, tgt.x) &&\n\t\t\tS3Math.equals(this.y, tgt.y) &&\n\t\t\tS3Math.equals(this.z, tgt.z) &&\n\t\t\tS3Math.equals(this.w, tgt.w)\n\t\t);\n\t}\n\n\t/**\n\t * 2つのベクトル間を線形補間します。\n\t * @param {S3Vector} tgt\n\t * @param {number} alpha 補間係数（0~1）\n\t * @returns {S3Vector}\n\t */\n\tmix(tgt, alpha) {\n\t\treturn new S3Vector(\n\t\t\tS3Math.mix(this.x, tgt.x, alpha),\n\t\t\tS3Math.mix(this.y, tgt.y, alpha),\n\t\t\tS3Math.mix(this.z, tgt.z, alpha),\n\t\t\tS3Math.mix(this.w, tgt.w, alpha)\n\t\t);\n\t}\n\n\t/**\n\t * ノルム（二乗和の平方根、長さ）を計算します。\n\t * @returns {number} ベクトルの長さ\n\t */\n\tnorm() {\n\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\t}\n\n\t/**\n\t * ノルムの2乗値（高速、平方根なし）を返します。\n\t * @returns {number} 長さの二乗\n\t */\n\tnormFast() {\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t}\n\n\t/**\n\t * 正規化した新しいベクトルを返します。\n\t * @returns {S3Vector}\n\t */\n\tnormalize() {\n\t\tlet b = this.normFast();\n\t\tif (b === 0.0) {\n\t\t\tthrow \"divide error\";\n\t\t}\n\t\tb = Math.sqrt(1.0 / b);\n\t\treturn new S3Vector(this.x * b, this.y * b, this.z * b, 1.0);\n\t}\n\n\t/**\n\t * ベクトルを文字列化します。\n\t * @param {number} [num] 成分数指定（省略時は4成分）\n\t * @returns {string}\n\t */\n\ttoString(num) {\n\t\tif (num === 1) {\n\t\t\treturn \"[\" + this.x + \"]T\";\n\t\t} else if (num === 2) {\n\t\t\treturn \"[\" + this.x + \",\" + this.y + \"]T\";\n\t\t} else if (num === 3) {\n\t\t\treturn \"[\" + this.x + \",\" + this.y + \",\" + this.z + \"]T\";\n\t\t} else {\n\t\t\treturn \"[\" + this.x + \",\" + this.y + \",\" + this.z + \",\" + this.w + \"]T\";\n\t\t}\n\t}\n\n\t/**\n\t * ベクトルのハッシュ値を返します。\n\t * @param {number} [num] 成分数指定（省略時は1成分）\n\t * @returns {number}\n\t */\n\ttoHash(num) {\n\t\tconst s = 4;\n\t\tconst t = 10000;\n\t\tlet x = (parseFloat(this.x.toExponential(3).substring(0, 5)) * 321) & 0xffffffff;\n\t\tif (num >= 2) {\n\t\t\tx = (x * 12345 + parseFloat(this.y.toExponential(s).substring(0, s + 2)) * t) & 0xffffffff;\n\t\t}\n\t\tif (num >= 3) {\n\t\t\tx = (x * 12345 + parseFloat(this.z.toExponential(s).substring(0, s + 2)) * t) & 0xffffffff;\n\t\t}\n\t\tif (num >= 4) {\n\t\t\tx = (x * 12345 + parseFloat(this.w.toExponential(s).substring(0, s + 2)) * t) & 0xffffffff;\n\t\t}\n\t\treturn x;\n\t}\n\n\t/**\n\t * 他の型のインスタンスに変換します（配列化）。\n\t * @param {{new(array: number[]): any}} Instance 配列型のコンストラクタ\n\t * @param {number} dimension 配列長\n\t * @returns {*} 変換結果\n\t */\n\ttoInstanceArray(Instance, dimension) {\n\t\tif (dimension === 1) {\n\t\t\treturn new Instance([this.x]);\n\t\t} else if (dimension === 2) {\n\t\t\treturn new Instance([this.x, this.y]);\n\t\t} else if (dimension === 3) {\n\t\t\treturn new Instance([this.x, this.y, this.z]);\n\t\t} else {\n\t\t\treturn new Instance([this.x, this.y, this.z, this.w]);\n\t\t}\n\t}\n\n\t/**\n\t * 配列に成分をプッシュします。\n\t * @param {Array<number>} array\n\t * @param {number} num 成分数\n\t */\n\tpushed(array, num) {\n\t\tif (num === 1) {\n\t\t\tarray.push(this.x);\n\t\t} else if (num === 2) {\n\t\t\tarray.push(this.x);\n\t\t\tarray.push(this.y);\n\t\t} else if (num === 3) {\n\t\t\tarray.push(this.x);\n\t\t\tarray.push(this.y);\n\t\t\tarray.push(this.z);\n\t\t} else {\n\t\t\tarray.push(this.x);\n\t\t\tarray.push(this.y);\n\t\t\tarray.push(this.z);\n\t\t\tarray.push(this.w);\n\t\t}\n\t}\n\n\t/**\n\t * tgtへの方向ベクトルを取得します。\n\t * @param {S3Vector} tgt\n\t * @returns {S3Vector} tgt-自身のベクトル\n\t */\n\tgetDirection(tgt) {\n\t\treturn tgt.sub(this);\n\t}\n\n\t/**\n\t * tgtへの正規化された方向ベクトルを取得します。\n\t * @param {S3Vector} tgt\n\t * @returns {S3Vector}\n\t */\n\tgetDirectionNormalized(tgt) {\n\t\treturn tgt.sub(this).normalize();\n\t}\n\n\t/**\n\t * tgtとの距離を返します。\n\t * @param {S3Vector} tgt\n\t * @returns {number}\n\t */\n\tgetDistance(tgt) {\n\t\treturn this.getDirection(tgt).norm();\n\t}\n\n\t/**\n\t * 非数かどうか判定します。\n\t * @returns {boolean}\n\t */\n\tisNaN() {\n\t\treturn isNaN(this.x) || isNaN(this.y) || isNaN(this.z) || isNaN(this.w);\n\t}\n\n\t/**\n\t * 有限かどうか判定します。\n\t * @returns {boolean}\n\t */\n\tisFinite() {\n\t\treturn isFinite(this.x) && isFinite(this.y) && isFinite(this.z) && isFinite(this.w);\n\t}\n\n\t/**\n\t * 実数かどうか判定します。\n\t * @returns {boolean}\n\t */\n\tisRealNumber() {\n\t\treturn !this.isNaN() && this.isFinite();\n\t}\n\n\t/**\n\t * @typedef {Object} S3NormalVector\n\t * @property {S3Vector} normal 平面の法線\n\t * @property {S3Vector} tangent UV座標による接線\n\t * @property {S3Vector} binormal UV座標による従法線\n\t */\n\n\t/**\n\t * 3点を通る平面の法線、接線、従法線を計算します。\n\t * A, B, C の3点を通る平面の法線と、UV座標による接線、従法線を求めます。\n\t * A, B, C の3点の時計回りが表だとした場合、表方向へ延びる法線となります。\n\t * @param {S3Vector} posA 点A\n\t * @param {S3Vector} posB 点B\n\t * @param {S3Vector} posC 点C\n\t * @param {S3Vector} [uvA] UV座標A\n\t * @param {S3Vector} [uvB] UV座標B\n\t * @param {S3Vector} [uvC] UV座標C\n\t * @returns {S3NormalVector}\n\t */\n\tstatic getNormalVector(posA, posB, posC, uvA, uvB, uvC) {\n\t\tlet N;\n\n\t\twhile (1) {\n\t\t\tconst P0 = posA.getDirection(posB);\n\t\t\tconst P1 = posA.getDirection(posC);\n\t\t\ttry {\n\t\t\t\tN = P0.cross(P1).normalize();\n\t\t\t} catch (e) {\n\t\t\t\t// 頂点の位置が直行しているなどのエラー処理\n\t\t\t\tN = new S3Vector(0.3333, 0.3333, 0.3333);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (uvA === undefined && uvB === undefined && uvC === undefined) {\n\t\t\t\t// UV値がない場合はノーマルのみ返す\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// 接線と従法線を計算するにあたり、以下のサイトを参考にしました。\n\t\t\t// http://sunandblackcat.com/tipFullView.php?l=eng&topicid=8\n\t\t\t// https://stackoverflow.com/questions/5255806/how-to-calculate-tangent-and-binormal\n\t\t\t// http://www.terathon.com/code/tangent.html\n\t\t\tconst st0 = uvA.getDirection(uvB);\n\t\t\tconst st1 = uvA.getDirection(uvC);\n\t\t\tlet q;\n\t\t\ttry {\n\t\t\t\t// 接線と従法線を求める\n\t\t\t\tq = 1.0 / st0.cross(st1).z;\n\t\t\t\tconst Tx = q * (st1.y * P0.x - st0.y * P1.x);\n\t\t\t\tconst Ty = q * (st1.y * P0.y - st0.y * P1.y);\n\t\t\t\tconst Tz = q * (st1.y * P0.z - st0.y * P1.z);\n\t\t\t\tconst Bx = q * (-st1.x * P0.x + st0.x * P1.x);\n\t\t\t\tconst By = q * (-st1.x * P0.y + st0.x * P1.y);\n\t\t\t\tconst Bz = q * (-st1.x * P0.z + st0.x * P1.z);\n\t\t\t\tconst T = new S3Vector(Tx, Ty, Tz); // Tangent\t接線\n\t\t\t\tconst B = new S3Vector(Bx, By, Bz); // Binormal\t従法線\n\t\t\t\treturn {\n\t\t\t\t\tnormal: N,\n\t\t\t\t\ttangent: T.normalize(),\n\t\t\t\t\tbinormal: B.normalize()\n\t\t\t\t};\n\t\t\t\t/*\n\t\t\t\t// 接線と従法線は直行していない\n\t\t\t\t// 直行している方が行列として安定している。\n\t\t\t\t// 以下、Gram-Schmidtアルゴリズムで直行したベクトルを作成する場合\n\t\t\t\tconst nT = T.sub(N.mul(N.dot(T))).normalize();\n\t\t\t\tconst w  = N.cross(T).dot(B) < 0.0 ? -1.0 : 1.0;\n\t\t\t\tconst nB = N.cross(nT).mul(w);\n\t\t\t\treturn {\n\t\t\t\t\tnormal\t\t: N,\n\t\t\t\t\ttangent\t\t: nT,\n\t\t\t\t\tbinormal\t: nB\n\t\t\t\t}\n\t\t\t\t*/\n\t\t\t} catch (e) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tnormal: N,\n\t\t\ttangent: null,\n\t\t\tbinormal: null\n\t\t};\n\t}\n\n\t/**\n\t * 3点が時計回りか判定します。\n\t * @param {S3Vector} A\n\t * @param {S3Vector} B\n\t * @param {S3Vector} C\n\t * @returns {boolean|null} 時計回り:true、反時計回り:false、判定不可:null\n\t */\n\tstatic isClockwise(A, B, C) {\n\t\tconst v1 = A.getDirection(B).setZ(0);\n\t\tconst v2 = A.getDirection(C).setZ(0);\n\t\tconst type = v1.cross(v2).z;\n\t\tif (type === 0) {\n\t\t\treturn null;\n\t\t} else if (type > 0) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n/**\n * 0\n * @type S3Vector\n */\nS3Vector.ZERO = new S3Vector(0.0, 0.0, 0.0);\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/math/S3Vector.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 685,
    "kind": "class",
    "name": "S3Vector",
    "memberof": "src/math/S3Vector.js",
    "static": true,
    "longname": "src/math/S3Vector.js~S3Vector",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/math/S3Vector.js",
    "importStyle": "S3Vector",
    "description": "3DCG用のベクトルクラス（immutable）",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "S3"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 686,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#constructor",
    "access": "public",
    "description": "ベクトルを作成します。",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "x成分"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "y成分"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "z",
        "description": "z成分"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "w",
        "description": "w成分（遠近除算用）"
      }
    ]
  },
  {
    "__docId__": 687,
    "kind": "member",
    "name": "x",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#x",
    "access": "public",
    "description": "x成分",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 688,
    "kind": "member",
    "name": "y",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#y",
    "access": "public",
    "description": "y成分",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 689,
    "kind": "member",
    "name": "z",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#z",
    "access": "public",
    "description": "z成分",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0.0"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 691,
    "kind": "member",
    "name": "w",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#w",
    "access": "public",
    "description": "w成分（遠近除算用）",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 693,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#clone",
    "access": "public",
    "description": "自身のクローンを作成します。",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector} 複製されたベクトル"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": "複製されたベクトル"
    },
    "params": []
  },
  {
    "__docId__": 694,
    "kind": "method",
    "name": "negate",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#negate",
    "access": "public",
    "description": "各成分を反転したベクトルを返します。",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 695,
    "kind": "method",
    "name": "cross",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#cross",
    "access": "public",
    "description": "2つのベクトルの外積を計算します。",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector} 外積ベクトル"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "tgt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": "外積ベクトル"
    }
  },
  {
    "__docId__": 696,
    "kind": "method",
    "name": "dot",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#dot",
    "access": "public",
    "description": "2つのベクトルの内積を計算します。",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 内積値"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "tgt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "内積値"
    }
  },
  {
    "__docId__": 697,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#add",
    "access": "public",
    "description": "ベクトル同士の加算を行います。",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector} 加算結果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "tgt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": "加算結果"
    }
  },
  {
    "__docId__": 698,
    "kind": "method",
    "name": "sub",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#sub",
    "access": "public",
    "description": "ベクトル同士の減算を行います。",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector} 減算結果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "tgt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": "減算結果"
    }
  },
  {
    "__docId__": 699,
    "kind": "method",
    "name": "mul",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#mul",
    "access": "public",
    "description": "ベクトルの各成分にスカラー、ベクトル、または行列を掛けます。",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "S3Vector",
          "S3Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "tgt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 700,
    "kind": "method",
    "name": "setX",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#setX",
    "access": "public",
    "description": "x成分のみ変更した新しいベクトルを返します。",
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 701,
    "kind": "method",
    "name": "setY",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#setY",
    "access": "public",
    "description": "y成分のみ変更した新しいベクトルを返します。",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 702,
    "kind": "method",
    "name": "setZ",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#setZ",
    "access": "public",
    "description": "z成分のみ変更した新しいベクトルを返します。",
    "lineNumber": 158,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 703,
    "kind": "method",
    "name": "setW",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#setW",
    "access": "public",
    "description": "w成分のみ変更した新しいベクトルを返します。",
    "lineNumber": 167,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 704,
    "kind": "method",
    "name": "max",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#max",
    "access": "public",
    "description": "各成分の最大値を持つ新しいベクトルを返します。",
    "lineNumber": 176,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "tgt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 705,
    "kind": "method",
    "name": "min",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#min",
    "access": "public",
    "description": "各成分の最小値を持つ新しいベクトルを返します。",
    "lineNumber": 190,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "tgt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 706,
    "kind": "method",
    "name": "equals",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#equals",
    "access": "public",
    "description": "各成分が等しいか判定します。",
    "lineNumber": 203,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 全ての成分が等しい場合true"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "tgt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "全ての成分が等しい場合true"
    }
  },
  {
    "__docId__": 707,
    "kind": "method",
    "name": "mix",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#mix",
    "access": "public",
    "description": "2つのベクトル間を線形補間します。",
    "lineNumber": 218,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "tgt",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": "補間係数（0~1）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 708,
    "kind": "method",
    "name": "norm",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#norm",
    "access": "public",
    "description": "ノルム（二乗和の平方根、長さ）を計算します。",
    "lineNumber": 231,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} ベクトルの長さ"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "ベクトルの長さ"
    },
    "params": []
  },
  {
    "__docId__": 709,
    "kind": "method",
    "name": "normFast",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#normFast",
    "access": "public",
    "description": "ノルムの2乗値（高速、平方根なし）を返します。",
    "lineNumber": 239,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 長さの二乗"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "長さの二乗"
    },
    "params": []
  },
  {
    "__docId__": 710,
    "kind": "method",
    "name": "normalize",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#normalize",
    "access": "public",
    "description": "正規化した新しいベクトルを返します。",
    "lineNumber": 247,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "toString",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#toString",
    "access": "public",
    "description": "ベクトルを文字列化します。",
    "lineNumber": 261,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "num",
        "description": "成分数指定（省略時は4成分）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 712,
    "kind": "method",
    "name": "toHash",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#toHash",
    "access": "public",
    "description": "ベクトルのハッシュ値を返します。",
    "lineNumber": 278,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "num",
        "description": "成分数指定（省略時は1成分）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 713,
    "kind": "method",
    "name": "toInstanceArray",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#toInstanceArray",
    "access": "public",
    "description": "他の型のインスタンスに変換します（配列化）。",
    "lineNumber": 300,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} 変換結果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{new(array: number[]): any}"
        ],
        "spread": false,
        "optional": false,
        "name": "Instance",
        "description": "配列型のコンストラクタ"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "配列長"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "変換結果"
    }
  },
  {
    "__docId__": 714,
    "kind": "method",
    "name": "pushed",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#pushed",
    "access": "public",
    "description": "配列に成分をプッシュします。",
    "lineNumber": 317,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num",
        "description": "成分数"
      }
    ],
    "return": null
  },
  {
    "__docId__": 715,
    "kind": "method",
    "name": "getDirection",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#getDirection",
    "access": "public",
    "description": "tgtへの方向ベクトルを取得します。",
    "lineNumber": 340,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector} tgt-自身のベクトル"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "tgt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": "tgt-自身のベクトル"
    }
  },
  {
    "__docId__": 716,
    "kind": "method",
    "name": "getDirectionNormalized",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#getDirectionNormalized",
    "access": "public",
    "description": "tgtへの正規化された方向ベクトルを取得します。",
    "lineNumber": 349,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Vector}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "tgt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Vector"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 717,
    "kind": "method",
    "name": "getDistance",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#getDistance",
    "access": "public",
    "description": "tgtとの距離を返します。",
    "lineNumber": 358,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "tgt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 718,
    "kind": "method",
    "name": "isNaN",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#isNaN",
    "access": "public",
    "description": "非数かどうか判定します。",
    "lineNumber": 366,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 719,
    "kind": "method",
    "name": "isFinite",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#isFinite",
    "access": "public",
    "description": "有限かどうか判定します。",
    "lineNumber": 374,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 720,
    "kind": "method",
    "name": "isRealNumber",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/S3Vector.js~S3Vector#isRealNumber",
    "access": "public",
    "description": "実数かどうか判定します。",
    "lineNumber": 382,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 721,
    "kind": "typedef",
    "name": "S3NormalVector",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "static": true,
    "longname": "src/math/S3Vector.js~S3Vector.S3NormalVector",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "normal",
        "description": "平面の法線"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "tangent",
        "description": "UV座標による接線"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "binormal",
        "description": "UV座標による従法線"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "S3NormalVector"
    }
  },
  {
    "__docId__": 722,
    "kind": "method",
    "name": "getNormalVector",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/S3Vector.js~S3Vector.getNormalVector",
    "access": "public",
    "description": "3点を通る平面の法線、接線、従法線を計算します。\nA, B, C の3点を通る平面の法線と、UV座標による接線、従法線を求めます。\nA, B, C の3点の時計回りが表だとした場合、表方向へ延びる法線となります。",
    "lineNumber": 405,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3NormalVector}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "posA",
        "description": "点A"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "posB",
        "description": "点B"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "posC",
        "description": "点C"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": true,
        "name": "uvA",
        "description": "UV座標A"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": true,
        "name": "uvB",
        "description": "UV座標B"
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": true,
        "name": "uvC",
        "description": "UV座標C"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3NormalVector"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 723,
    "kind": "method",
    "name": "isClockwise",
    "memberof": "src/math/S3Vector.js~S3Vector",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/S3Vector.js~S3Vector.isClockwise",
    "access": "public",
    "description": "3点が時計回りか判定します。",
    "lineNumber": 476,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean|null} 時計回り:true、反時計回り:false、判定不可:null"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "B",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "C",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "null"
      ],
      "spread": false,
      "description": "時計回り:true、反時計回り:false、判定不可:null"
    }
  },
  {
    "__docId__": 724,
    "kind": "file",
    "name": "src/S3.js",
    "content": "﻿import S3System from \"./basic/S3System.js\";\nimport S3Light from \"./basic/S3Light.js\";\nimport S3GLSystem from \"./gl/S3GLSystem.js\";\nimport S3MeshLoader from \"./loader/S3MeshLoader.js\";\nimport S3Math from \"./math/S3Math.js\";\nimport S3Angles from \"./math/S3Angles.js\";\nimport S3Vector from \"./math/S3Vector.js\";\nimport S3Matrix from \"./math/S3Matrix.js\";\nimport S3Plane from \"./math/S3Plane.js\";\nimport CameraController from \"./tools/CameraController.js\";\n\n/**\n * S3 3DCGエンジンのメイン名前空間オブジェクト\n *\n * 主要クラスやユーティリティ（System, Math, Vector, Matrix, Plane, Loader, Controllerなど）を\n * ひとつの名前空間に集約してエクスポートします。\n * 各種定数・列挙体やローダ・ツールへのショートカットも含まれます。\n *\n * @namespace S3\n * @property {typeof S3System} System 3DCGシステム管理クラス\n * @property {typeof S3GLSystem} GLSystem WebGL用拡張システム\n * @property {typeof S3Math} Math 数学ユーティリティ\n * @property {typeof S3Angles} Angles オイラー角クラス\n * @property {typeof S3Vector} Vector ベクトルクラス\n * @property {typeof S3Matrix} Matrix 行列クラス\n * @property {typeof S3Plane} Plane 平面クラス\n * @property {Object} SYSTEM_MODE 描画モード定数\n * @property {Object} DEPTH_MODE 深度バッファモード定数\n * @property {Object} DIMENSION_MODE 座標系モード定数\n * @property {Object} VECTOR_MODE ベクトルモード定数\n * @property {Object} FRONT_FACE 面の前面判定モード定数\n * @property {Object} CULL_MODE カリングモード定数\n * @property {Object} LIGHT_MODE ライトモード定数\n * @property {typeof S3MeshLoader} MeshLoader メッシュデータローダ\n * @property {typeof CameraController} CameraController カメラコントローラー\n *\n * @example\n * import S3 from \"S3.js\";\n * const sys = new S3.System();\n * const mesh = sys.createMesh();\n * // もしくは\n * const glsys = new S3.GLSystem();\n */\nconst S3 = {\n\tSystem: S3System,\n\tGLSystem: S3GLSystem,\n\tMath: S3Math,\n\tAngles: S3Angles,\n\tVector: S3Vector,\n\tMatrix: S3Matrix,\n\tPlane: S3Plane,\n\n\tSYSTEM_MODE: S3System.SYSTEM_MODE,\n\tDEPTH_MODE: S3System.DEPTH_MODE,\n\tDIMENSION_MODE: S3System.DIMENSION_MODE,\n\tVECTOR_MODE: S3System.VECTOR_MODE,\n\tFRONT_FACE: S3System.FRONT_FACE,\n\tCULL_MODE: S3System.CULL_MODE,\n\tLIGHT_MODE: S3Light.MODE,\n\n\tMeshLoader: S3MeshLoader,\n\tCameraController: CameraController\n};\n\nexport default S3;\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/S3.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 725,
    "kind": "variable",
    "name": "S3",
    "memberof": "src/S3.js",
    "static": true,
    "longname": "src/S3.js~S3",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/S3.js",
    "importStyle": "S3",
    "description": "S3 3DCGエンジンのメイン名前空間オブジェクト\n\n主要クラスやユーティリティ（System, Math, Vector, Matrix, Plane, Loader, Controllerなど）を\nひとつの名前空間に集約してエクスポートします。\n各種定数・列挙体やローダ・ツールへのショートカットも含まれます。",
    "examples": [
      "import S3 from \"S3.js\";\nconst sys = new S3.System();\nconst mesh = sys.createMesh();\n// もしくは\nconst glsys = new S3.GLSystem();"
    ],
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@namespace",
        "tagValue": "S3"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "typeof S3System"
        ],
        "spread": false,
        "optional": false,
        "name": "System",
        "description": "3DCGシステム管理クラス"
      },
      {
        "nullable": null,
        "types": [
          "typeof S3GLSystem"
        ],
        "spread": false,
        "optional": false,
        "name": "GLSystem",
        "description": "WebGL用拡張システム"
      },
      {
        "nullable": null,
        "types": [
          "typeof S3Math"
        ],
        "spread": false,
        "optional": false,
        "name": "Math",
        "description": "数学ユーティリティ"
      },
      {
        "nullable": null,
        "types": [
          "typeof S3Angles"
        ],
        "spread": false,
        "optional": false,
        "name": "Angles",
        "description": "オイラー角クラス"
      },
      {
        "nullable": null,
        "types": [
          "typeof S3Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "Vector",
        "description": "ベクトルクラス"
      },
      {
        "nullable": null,
        "types": [
          "typeof S3Matrix"
        ],
        "spread": false,
        "optional": false,
        "name": "Matrix",
        "description": "行列クラス"
      },
      {
        "nullable": null,
        "types": [
          "typeof S3Plane"
        ],
        "spread": false,
        "optional": false,
        "name": "Plane",
        "description": "平面クラス"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "SYSTEM_MODE",
        "description": "描画モード定数"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "DEPTH_MODE",
        "description": "深度バッファモード定数"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "DIMENSION_MODE",
        "description": "座標系モード定数"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "VECTOR_MODE",
        "description": "ベクトルモード定数"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "FRONT_FACE",
        "description": "面の前面判定モード定数"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "CULL_MODE",
        "description": "カリングモード定数"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "LIGHT_MODE",
        "description": "ライトモード定数"
      },
      {
        "nullable": null,
        "types": [
          "typeof S3MeshLoader"
        ],
        "spread": false,
        "optional": false,
        "name": "MeshLoader",
        "description": "メッシュデータローダ"
      },
      {
        "nullable": null,
        "types": [
          "typeof CameraController"
        ],
        "spread": false,
        "optional": false,
        "name": "CameraController",
        "description": "カメラコントローラー"
      }
    ],
    "type": {
      "types": [
        "{\"System\": *, \"GLSystem\": *, \"Math\": *, \"Angles\": *, \"Vector\": *, \"Matrix\": *, \"Plane\": *, \"SYSTEM_MODE\": *, \"DEPTH_MODE\": *, \"DIMENSION_MODE\": *, \"VECTOR_MODE\": *, \"FRONT_FACE\": *, \"CULL_MODE\": *, \"LIGHT_MODE\": *, \"MeshLoader\": *, \"CameraController\": *}"
      ]
    }
  },
  {
    "__docId__": 726,
    "kind": "file",
    "name": "src/tools/CameraController.js",
    "content": "﻿import InputDetect from \"inputdetect\";\nimport S3Vector from \"../math/S3Vector.js\";\nimport S3Camera from \"../basic/S3Camera.js\";\n\n/**\n * カメラ操作用コントローラー\n * タッチ操作やマウス操作を用いて3DCGシーンのカメラの移動・回転・ズームイン/アウトなどを制御するクラスです。\n * InputDetect の入力情報をもとに、カメラの移動・回転・距離変更（ズーム）を自動で計算します。\n */\nexport default class CameraController {\n\t/**\n\t * CameraControllerのインスタンスを生成します。\n\t * マウス／タッチ用の入力管理や、各種移動パラメータも初期化します。\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * タッチ・マウス入力管理オブジェクト\n\t\t * @type {InputDetect}\n\t\t */\n\t\tthis.mouse = InputDetect.create();\n\n\t\t/**\n\t\t * ズーム時の移動量の係数\n\t\t * @type {number}\n\t\t */\n\t\tthis.moveDistance = 4.0;\n\n\t\t/**\n\t\t * カメラ回転時の角度変更係数（度／ピクセル）\n\t\t * @type {number}\n\t\t */\n\t\tthis.moveRotate = 0.5;\n\n\t\t/**\n\t\t * カメラ移動時の移動量の係数（ピクセル単位から変換）\n\t\t * @type {number}\n\t\t */\n\t\tthis.moveTranslateRelative = 0.1;\n\n\t\t/**\n\t\t * コントローラが管理・操作するカメラインスタンス\n\t\t * @type {S3Camera}\n\t\t */\n\t\tthis.camera = null;\n\t}\n\n\t/**\n\t * カメラコントローラで操作するcanvas要素を登録し、入力イベントを設定します。\n\t * @param {HTMLElement} element 対象となるcanvas要素など\n\t */\n\tsetCanvas(element) {\n\t\tthis.mouse.setListenerOnElement(element);\n\t}\n\n\t/**\n\t * 操作対象となるカメラをセットします（cloneで複製して保持）。\n\t * @param {S3Camera} camera 操作対象のカメラ\n\t */\n\tsetCamera(camera) {\n\t\tthis.camera = camera.clone();\n\t}\n\n\t/**\n\t * 現在のカメラを取得し、入力に基づく移動・回転・ズームなどを反映して返します。\n\t *\n\t * 毎フレーム呼び出すことで、ユーザー操作を自動で反映したカメラインスタンスが得られます。\n\t * @returns {S3Camera} 現在のカメラ状態\n\t */\n\tgetCamera() {\n\t\tconst data = this.mouse.pickInput();\n\n\t\t// 左ドラッグ：平行移動\n\t\tthis.camera.translateRelative(\n\t\t\tnew S3Vector(\n\t\t\t\t-data.left.dragged.x * this.moveTranslateRelative,\n\t\t\t\tdata.left.dragged.y * this.moveTranslateRelative,\n\t\t\t\t0\n\t\t\t)\n\t\t);\n\n\t\t// 右ドラッグ：カメラ回転（Y軸・X軸）\n\t\tthis.camera.addRotateY(data.right.dragged.x * this.moveRotate);\n\t\tthis.camera.addRotateX(-data.right.dragged.y * this.moveRotate);\n\n\t\t// ホイール操作：カメラズームイン・ズームアウト\n\t\tlet distance = this.camera.getDistance();\n\t\tconst l = data.wheelrotation;\n\t\tdistance -= l * this.moveDistance * Math.log(distance);\n\t\tthis.camera.setDistance(distance);\n\n\t\treturn this.camera;\n\t}\n}\n",
    "static": true,
    "longname": "E:/JavaScript/js-s3js/src/tools/CameraController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 727,
    "kind": "class",
    "name": "CameraController",
    "memberof": "src/tools/CameraController.js",
    "static": true,
    "longname": "src/tools/CameraController.js~CameraController",
    "access": "public",
    "export": true,
    "importPath": "s3js/src/tools/CameraController.js",
    "importStyle": "CameraController",
    "description": "カメラ操作用コントローラー\nタッチ操作やマウス操作を用いて3DCGシーンのカメラの移動・回転・ズームイン/アウトなどを制御するクラスです。\nInputDetect の入力情報をもとに、カメラの移動・回転・距離変更（ズーム）を自動で計算します。",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 728,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/tools/CameraController.js~CameraController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/tools/CameraController.js~CameraController#constructor",
    "access": "public",
    "description": "CameraControllerのインスタンスを生成します。\nマウス／タッチ用の入力管理や、各種移動パラメータも初期化します。",
    "lineNumber": 15
  },
  {
    "__docId__": 729,
    "kind": "member",
    "name": "mouse",
    "memberof": "src/tools/CameraController.js~CameraController",
    "static": false,
    "longname": "src/tools/CameraController.js~CameraController#mouse",
    "access": "public",
    "description": "タッチ・マウス入力管理オブジェクト",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "InputDetect"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 730,
    "kind": "member",
    "name": "moveDistance",
    "memberof": "src/tools/CameraController.js~CameraController",
    "static": false,
    "longname": "src/tools/CameraController.js~CameraController#moveDistance",
    "access": "public",
    "description": "ズーム時の移動量の係数",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 731,
    "kind": "member",
    "name": "moveRotate",
    "memberof": "src/tools/CameraController.js~CameraController",
    "static": false,
    "longname": "src/tools/CameraController.js~CameraController#moveRotate",
    "access": "public",
    "description": "カメラ回転時の角度変更係数（度／ピクセル）",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 732,
    "kind": "member",
    "name": "moveTranslateRelative",
    "memberof": "src/tools/CameraController.js~CameraController",
    "static": false,
    "longname": "src/tools/CameraController.js~CameraController#moveTranslateRelative",
    "access": "public",
    "description": "カメラ移動時の移動量の係数（ピクセル単位から変換）",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 733,
    "kind": "member",
    "name": "camera",
    "memberof": "src/tools/CameraController.js~CameraController",
    "static": false,
    "longname": "src/tools/CameraController.js~CameraController#camera",
    "access": "public",
    "description": "コントローラが管理・操作するカメラインスタンス",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "S3Camera"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 734,
    "kind": "method",
    "name": "setCanvas",
    "memberof": "src/tools/CameraController.js~CameraController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/tools/CameraController.js~CameraController#setCanvas",
    "access": "public",
    "description": "カメラコントローラで操作するcanvas要素を登録し、入力イベントを設定します。",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "対象となるcanvas要素など"
      }
    ],
    "return": null
  },
  {
    "__docId__": 735,
    "kind": "method",
    "name": "setCamera",
    "memberof": "src/tools/CameraController.js~CameraController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/tools/CameraController.js~CameraController#setCamera",
    "access": "public",
    "description": "操作対象となるカメラをセットします（cloneで複製して保持）。",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "S3Camera"
        ],
        "spread": false,
        "optional": false,
        "name": "camera",
        "description": "操作対象のカメラ"
      }
    ],
    "return": null
  },
  {
    "__docId__": 737,
    "kind": "method",
    "name": "getCamera",
    "memberof": "src/tools/CameraController.js~CameraController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/tools/CameraController.js~CameraController#getCamera",
    "access": "public",
    "description": "現在のカメラを取得し、入力に基づく移動・回転・ズームなどを反映して返します。\n\n毎フレーム呼び出すことで、ユーザー操作を自動で反映したカメラインスタンスが得られます。",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{S3Camera} 現在のカメラ状態"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "S3Camera"
      ],
      "spread": false,
      "description": "現在のカメラ状態"
    },
    "params": []
  },
  {
    "kind": "index",
    "content": "# s3js\n\n[![npm version](https://badge.fury.io/js/s3js.svg)](https://badge.fury.io/js/s3js)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![ESDoc coverage badge](https://natade-jp.github.io/js-s3js/badge.svg)](https://natade-jp.github.io/js-s3js/)\n\nJavaScriptで手軽に3Dグラフィックスを扱うためのライブラリです。  \nシーン・モデル・メッシュ・マテリアル・ライト・カメラの管理をシンプルなAPIで実現し、OBJ・MQO・JSON形式によるモデルのインポートが可能です。\n\n* [Github Pages](https://natade-jp.github.io/js-s3js/)\n* [ARCHITECTURE.md](https://natade-jp.github.io/js-s3js/manual/)\n* [demo1](https://natade-jp.github.io/js-s3js/manual/DEMO1.html)\n* [demo2](https://natade-jp.github.io/js-s3js/manual/DEMO2.html)\n\n## 特徴\n\n- 純粋JavaScriptで動作\n- 依存ライブラリ不要・軽量設計\n- Canvas 2D描画に対応（WebGL拡張も可能）\n- モデル・メッシュ・マテリアル・カメラ・ライト等の3Dシーン構成を簡単管理\n- OBJ / MQO / JSON形式のメッシュ入力サポート\n- right-hand/left-hand座標系、OpenGL/DirectX描画モード切替対応\n- ベクトル・行列演算など3D数学ユーティリティ搭載\n\n## サンプルコード\n\n```js\nimport S3 from \"./S3.js\";\n\n// 1. システム初期化\nconst s3system = new S3.System();\n\n// 2. シーン生成\nconst scene = s3system.createScene();\n\n// 3. カメラ設定\nconst camera = s3system.createCamera();\nscene.setCamera(camera);\n\n// 4. モデル生成\nconst mesh = S3.MeshLoader.inputData(s3system, \"model.obj\");\nconst model = s3system.createModel();\nmodel.setMesh(mesh);\nscene.addModel(model);\n\n// 5. ライト追加\nconst light = s3system.createLight();\nscene.addLight(light);\n\n// 6. Canvasへ描画\nconst canvas = document.getElementById(\"canvas3d\");\ns3system.setCanvas(canvas);\ns3system.drawScene(scene);\n````\n\n## ディレクトリ構成\n\n* `basic/` ... 主要な3D要素（Mesh/Model/Material/Light/Camera/Scene など）\n* `math/` ... ベクトル・行列・角度など数値演算クラス\n* `loader/` ... OBJ/MQO/JSON対応のメッシュローダ\n* `gl/` ... WebGL拡張用クラス\n* `tools/` ... 補助ツール（カメラコントローラ等）\n\n## 主なクラス構成\n\n* `S3System` … シーン管理・主要ファクトリ・描画処理\n* `S3Model` … 3Dモデル（配置/スケール/回転）\n* `S3Mesh` … メッシュ形状（頂点/面/マテリアル）\n* `S3Material` … マテリアル（色/拡散/鏡面/テクスチャ等）\n* `S3Light` … ライト（環境/点光源/平行光源）\n* `S3Camera` … カメラ（視点/注視点/視野角等）\n* `S3Scene` … シーン（モデル/ライト/カメラ一括管理）\n* `S3Vector, S3Matrix` … 数学ユーティリティ\n* `S3MeshLoader` … OBJ/MQO/JSON等の入出力\n\n## ライセンス\n\nMIT License\n",
    "longname": "E:\\JavaScript\\js-s3js\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n\t\"name\": \"s3js\",\n\t\"version\": \"0.0.4\",\n\t\"description\": \"Simple JavaScript 3D engine for rendering and manipulating scenes..\",\n\t\"keywords\": [\n\t\t\"3d\", \"graphics\", \"engine\", \"javascript\", \"webgl\"\n\t],\n\t\"author\": \"natade-jp <natade3@gmail.com> (https://github.com/natade-jp)\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git+https://github.com/natade-jp/js-s3js.git\"\n\t},\n\t\"license\": \"MIT\",\n\t\"source\": \"./src/S3.js\",\n\t\"main\": \"./build/esm/S3.js\",\n\t\"types\": \"./build/type/S3.d.ts\",\n\t\"exports\": {\n\t\t\".\": {\n\t\t\t\"browser\": \"./build/umd/S3.js\",\n\t\t\t\"umd\": \"./build/umd/S3.js\",\n\t\t\t\"import\": \"./build/esm/S3.js\",\n\t\t\t\"require\": \"./build/cjs/S3.js\"\n\t\t}\n\t},\n\t\"type\": \"module\",\n\t\"scripts\": {\n\t\t\"build\": \"node ./scripts/package.build.js\",\n\t\t\"test\": \"jest\",\n\t\t\"test_target\": \"node ./scripts/package.test.js\",\n\t\t\"doc\": \"node ./scripts/package.doc.js\",\n\t\t\"type\": \"node ./scripts/package.type.js\"\n\t},\n\t\"directories\": {\n\t\t\"src\": \"./src\",\n\t\t\"build\": \"./build\"\n\t},\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/natade-jp/js-s3js/issues\"\n\t},\n\t\"homepage\": \"https://github.com/natade-jp/js-s3js\",\n\t\"devDependencies\": {\n\t\t\"@rollup/plugin-commonjs\": \"^28.0.3\",\n\t\t\"@rollup/plugin-node-resolve\": \"^16.0.1\",\n\t\t\"@rollup/plugin-terser\": \"^0.4.4\",\n\t\t\"docdash\": \"^2.0.2\",\n\t\t\"esdoc\": \"^1.1.0\",\n\t\t\"esdoc-standard-plugin\": \"^1.0.0\",\n\t\t\"eslint\": \"^9.27.0\",\n\t\t\"eslint-config-prettier\": \"^10.1.5\",\n\t\t\"ntfile\": \"^1.0.0\",\n\t\t\"prettier\": \"^3.5.3\",\n\t\t\"rollup\": \"^4.40.2\",\n\t\t\"typescript\": \"^5.8.3\"\n\t},\n\t\"dependencies\": {\n\t\t\"inputdetect\": \"^0.1.0\"\n\t}\n}\n",
    "longname": "E:\\JavaScript\\js-s3js\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": false,
    "content": null,
    "longname": "",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\JavaScript\\js-s3js\\docs\\manual_md\\ARCHITECTURE.md",
    "name": "./docs/manual_md/ARCHITECTURE.md",
    "content": "# 一般\n\n## 概要\n\nこのプロジェクトは、純粋なJavaScriptで3DCG描画やモデルデータの管理、各種ファイルフォーマット対応（OBJ, MQO, JSON等）を可能にするシンプルな3DCGライブラリです。\n主な構成要素は、ジオメトリ（メッシュ・頂点・面）、マテリアル、ライト、カメラ、シーン管理、システムユーティリティ、各種データローダー/エクスポーターなどです。\n\n## アーキテクチャ全体図（概要）\n\n```\n[S3System] ──┬─> [S3Scene] ─┬─> [S3Model] ──> [S3Mesh]\n             │               │                ├─> [S3Vertex]\n             │               │                ├─> [S3TriangleIndex]\n             │               │                └─> [S3Material]\n             │               ├─> [S3Light]\n             │               └─> [S3Camera]\n             ├─> [S3MeshLoader] <─ [OBJ/MQO/JSON File]\n             └─> [Utility: Math, Vector, Matrix, Angles]\n```\n\n## コアモジュールの責務\n\n### S3System\n\n* **システムの中核クラス。**\n\n  * 各種ファクトリ（シーン/モデル/メッシュ/頂点/マテリアル/ライト/カメラ等の生成）。\n  * 座標変換（平行移動、回転、スケール、射影、ビューポート等）、MVP計算、カリングなど。\n  * 2D Canvas描画のサポート（ラインレンダ、軸描画など）。\n  * 描画モードや座標系（OpenGL/DirectX系）切り替え等のシステム設定。\n\n### S3Scene\n\n* **シーン（描画単位）の管理クラス。**\n\n  * 複数モデル・ライト・カメラの登録、シーン全体の保持。\n  * シーンの空化やモデル/ライト追加、カメラ切替が可能。\n\n### S3Model\n\n* **ワールド座標変換を含む3Dオブジェクト単位。**\n\n  * 位置・回転（オイラー角）・スケール・メッシュ情報を保持。\n\n### S3Mesh\n\n* **ジオメトリ（立体形状）のまとまり。**\n\n  * 頂点（S3Vertex）、面（S3TriangleIndex）、マテリアル（S3Material）をまとめる。\n  * 面の反転や複数素材対応、確定化フラグなど。\n\n### S3Vertex / S3TriangleIndex\n\n* **頂点座標、面情報の基本クラス。**\n\n  * 頂点（S3Vertex）：位置（S3Vector）だけを持つシンプルなimmutableオブジェクト。\n  * 三角形面（S3TriangleIndex）：3頂点インデックス、UV座標、マテリアルインデックスを保持。\n\n### S3Material\n\n* **マテリアル（材質・テクスチャ等）のプロパティを管理。**\n\n  * 拡散色、環境光、鏡面、発光、反射率、テクスチャ画像等。\n\n### S3Texture\n\n* **画像やテクスチャデータの管理。**\n\n  * 各種Image型やURLの対応、2の累乗への自動変換等。\n\n### S3Light\n\n* **シーン内の光源情報管理。**\n\n  * 種類（環境光/平行光源/点光源）、強度、方向、色などを保持。\n\n### S3Camera\n\n* **視点情報・射影/ビュー/ビューポート行列管理。**\n\n  * 視点、注視点、視野角、ニア・ファークリップ、各種行列取得APIあり。\n\n## 数学系ユーティリティ\n\n* **S3Vector / S3Matrix / S3Angles など**\n\n  * ベクトル・行列計算、オイラー角変換、線形補間など汎用的な3DCG数値処理を提供。\n\n## メッシュローダー（データ入出力）\n\n### S3MeshLoader（Facadeパターン的役割）\n\n* 各種3Dフォーマット（OBJ/MQO/JSON）を一元的にS3Meshインスタンスへ変換（インポート）、逆に各形式へのエクスポート（出力）を提供。\n\n#### S3MeshLoaderOBJ\n\n* Wavefront OBJ形式の読み書き。テキスト→メッシュへの変換、各要素の解析。\n\n#### S3MeshLoaderMQO\n\n* Metasequoia MQO形式の読み書き。テキスト→メッシュ、素材パラメータやUVも一部対応。\n\n#### S3MeshLoaderJSON\n\n* シンプルなJSONメッシュデータ対応。自前データ構造用。\n\n## 拡張性について\n\n* **追加フォーマット：** `S3MeshLoader`に新しいローダーを追加すれば良い設計。\n* **レンダラ置換：** デフォルトは2D Canvas描画だが、`S3GLSystem`などでWebGL拡張も容易。\n* **独自モデル・マテリアル：** S3Model/S3Material/S3Meshを継承し独自拡張可能。\n* **シーン構成/ユーティリティ：** 数学系やカメラ制御等もモジュール分離で独自実装しやすい。\n\n## モジュール依存関係と流れ\n\n1. **S3System**がすべてのファクトリ・管理・計算の中核となり、インスタンス生成も担当。\n2. **S3Scene**が、各モデル・ライト・カメラを保持し、`S3System`からの描画要求で内容を渡す。\n3. **S3MeshLoader**を通じて、外部3Dデータを読み込み、`S3Mesh`へ展開。\n4. 各モデルは自身の`S3Mesh`を持ち、ワールド変換行列は`S3System`で算出。\n5. 描画時は、S3Systemがモデル・カメラ・シーン情報からMVP行列等を組み立て、Canvasにライン/シェーディング等を描く。\n\n## シンプルな利用例\n\n```js\nimport S3 from \"./S3.js\";\nconst sys = new S3.System();\nconst scene = sys.createScene();\nconst camera = sys.createCamera();\nscene.setCamera(camera);\n\nconst mesh = sys.createMesh();\n// ... meshに頂点・面・マテリアル追加 ...\n\nconst model = sys.createModel();\nmodel.setMesh(mesh);\nscene.addModel(model);\n\nsys.setCanvas(document.getElementById(\"canvas\"));\nsys.drawScene(scene);\n```\n\n## まとめ\n\n* **責務分離・シンプル設計。**\n* **数値系/ジオメトリ/シーン管理/各種ローダーは独立性高く拡張容易。**\n* **WebGL化や独自レンダラ、拡張フォーマット対応も視野に入れた柔軟アーキテクチャ。**\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\JavaScript\\js-s3js\\docs\\manual_md\\WEBGL.md",
    "name": "./docs/manual_md/WEBGL.md",
    "content": "# WebGL 拡張\n\n## 概要\n\nWebGL 実装系 (`S3GL*` クラス群) について説明します。\n\n* **純粋な JS のクラス構成**（ES Modules 構成）\n* **抽象レイヤー**（基本形状・メッシュ・カメラ・ライト・マテリアル etc...）\n* **WebGL レイヤー**（GL バッファ／シェーダ／テクスチャ／描画パイプライン管理）\n\n## アーキテクチャ全体図\n\n```\n+-----------------------------------------------------------+\n|                        S3GLSystem                        |\n| (WebGL全体の管理／描画パイプライン・GLContext管理)        |\n+---------------------+---------+--------------------------+\n                      |         |\n           +----------+         +--------------+\n           |                                    |\n    +------v-------+                      +-----v------+\n    |  S3GLScene   |                      |  S3GLMesh  |\n    |(Scene全体管理|                      |(メッシュ/VBO|\n    +------+-------+                      +-----+------+\n           |                                    |\n    +------v-----------+                +-------v---------+\n    |  S3GLModel       |                | S3GLTriangle... |\n    |(モデル/形状/変換) |                |(三角形インデックス)|\n    +------------------+                +-----------------+\n           |                                    |\n    +------v----------+                +--------v-------+\n    |  S3GLMaterial   |                |  S3GLVertex    |\n    |  (材質・uniform) |                |  (頂点情報)    |\n    +-----------------+                +----------------+\n```\n\n## レイヤ・主な責務\n\n### 1. 抽象・システムレイヤ（`S3System`など）\n\n* **シーン管理**（S3Scene）・**モデル/カメラ/ライト生成**\n* **行列演算・座標変換**（モデル/ビュー/プロジェクション）\n* **頂点・メッシュ・マテリアルのファクトリ機能**\n\n### 2. WebGLレイヤ（`S3GL*` クラス群）\n\n* **GLContext の初期化・管理**（`S3GLSystem`）\n* **GLバッファ生成／VBO/IBO 化**（`S3GLMesh`）\n* **GLシェーダ・プログラム管理**（`S3GLShader`, `S3GLProgram`）\n* **シーン/モデル/マテリアル/ライトの uniform 変換**（`getUniforms` 系）\n* **GLリソース（テクスチャ/バッファ）管理・破棄**\n\n## ファイル構成\n\n* `S3GLSystem.js`: WebGL描画システム本体\n* `S3GLMesh.js`: GL用メッシュ（VBO/IBO管理、属性生成）\n* `S3GLModel.js`: GL用モデル（uniforms生成）\n* `S3GLMaterial.js`: GL用マテリアル（uniforms生成・テクスチャ管理）\n* `S3GLScene.js`: GL用シーン管理\n* `S3GLProgram.js`: シェーダ・GLプログラム管理\n* `S3GLVertex.js`, `S3GLTriangleIndex.js`, `S3GLTriangleIndexData.js`: 頂点・面・属性生成\n* `S3GLArray.js`: GL用データ変換・型管理\n* `S3GLTexture.js`: GL用テクスチャ\n* `S3GLLight.js`: GL用ライト\n\n## 主要クラスの役割\n\n### S3GLSystem\n\n* **WebGL 描画全体の管理者**\n\n  * GLContext の初期化／プログラム切り替え\n  * 描画モード・カリング・深度・背景色管理\n  * プログラムへのバインド・描画ループ処理\n  * 各種ファクトリ（メッシュ/モデル/カメラ etc...）\n\n### S3GLScene\n\n* **シーン単位のデータ統括**\n\n  * モデル・カメラ・ライトの管理\n  * 全 uniform 生成（`getUniforms`：カメラ方向やライト配列を uniform 形式で返す）\n\n### S3GLModel\n\n* **オブジェクト（形状）の位置・スケール・回転・メッシュ参照**\n\n  * 複数のマテリアルを集約し、uniform を生成\n  * ワールド座標変換行列もここで算出\n\n### S3GLMesh\n\n* **WebGLに適したメッシュ（頂点配列・インデックス配列）**\n\n  * VBO/IBO 生成・バッファ管理\n  * 各三角形ごとに法線/接線/従法線なども計算\n  * 頂点ハッシュにより、異なる属性毎に頂点をユニーク化\n\n### S3GLTriangleIndex / S3GLTriangleIndexData\n\n* **三角形インデックス情報**（各面ごとのUV, マテリアル等を含む）\n\n  * 面単位/頂点単位で法線・接線等も格納\n\n### S3GLVertex\n\n* **各頂点の 3D 位置ベクトルを GL フォーマットで管理**\n\n  * attribute へのバインド用データ（Float32Array化など）\n\n### S3GLMaterial\n\n* **色/拡散/反射/発光/環境光/テクスチャ等の uniform 化**\n\n  * テクスチャ有無を含むデータをまとめて返す\n  * GLSL シェーダ側の uniform 変数名と一致\n\n### S3GLTexture\n\n* **画像から WebGL テクスチャ生成／管理**\n\n### S3GLLight\n\n* **平行光源/点光源/環境光などの uniform 生成**\n\n### S3GLProgram\n\n* **頂点・フラグメントシェーダの管理／GLSL uniform・attribute バインド管理**\n\n  * GLSL 変数名ごとに型・ロケーション・バインド関数を自動管理\n  * VBO/IBO の bind, uniform の bind をすべて管理\n\n## データフロー／描画パイプライン例\n\n1. **S3GLSystem**: `setCanvas`, `setProgram`, `setBackgroundColor` などシステム初期化\n2. **メッシュ・モデル生成**: `createMesh`, `createModel`、ファイル/データからメッシュ生成（例: MQOローダ）\n3. **マテリアル・テクスチャ・ライトのセット**\n4. **シーン生成／モデル・ライト登録**\n5. **drawScene(scene)** でシーン全体描画\n\n   * (a) **Uniforms**: シーン/カメラ/ライト/マテリアルの uniform をプログラムにバインド\n   * (b) **VBO/IBO バインド**: メッシュごとに属性・インデックスバッファをGLへ\n   * (c) **Draw Call**: `drawElements` 実行で WebGL へ描画指示\n\n```js\nconst s3 = new S3GLSystem();\nconst program = s3.createProgram();\nprogram.setVertexShader(\"...\");\nprogram.setFragmentShader(\"...\");\ns3.setProgram(program);\n\nconst mesh = s3.createMesh(); // 頂点・インデックス・マテリアル追加\nconst model = s3.createModel();\nmodel.setMesh(mesh);\n\nconst scene = s3.createScene();\nscene.setCamera(s3.createCamera());\nscene.addModel(model);\n\ns3.drawScene(scene); // ⇒ 描画パイプラインがすべて自動処理\n```\n\n## モジュール依存関係\n\n* math/ : S3Vector, S3Matrix, S3Math など数学系\n* basic/ : S3Vertex, S3Material, S3TriangleIndex, S3Mesh, S3Model, S3Scene, S3Camera など\n* GL用: S3GLSystem, S3GLMesh, S3GLModel, S3GLScene, S3GLMaterial, S3GLTexture, S3GLTriangleIndex, S3GLVertex, S3GLLight, S3GLProgram, S3GLShader, S3GLArray, S3GLTriangleIndexData\n\n## 設計の特徴・意図\n\n* **抽象（basic）とWebGL層（GL）を明確に分離**\n\n  * 抽象的な3D形状操作（座標/変換/論理）と、WebGL用最適化データ（バッファ/テクスチャ/シェーダ/GL管理）を分けて設計\n\n* **可搬性／汎用性**\n\n  * 例えば「CPU計算のみで画像を出す」用途や、「将来の他API対応」も見据えている\n* **データの immutable 準拠（頂点/三角形/マテリアル）と、mutableな Scene/Model/Camera**\n* **GLSLシェーダ変数との自動バインド管理（S3GLProgramで自動解析）**\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\JavaScript\\js-s3js\\docs\\manual_md\\DEMO1.md",
    "name": "./docs/manual_md/DEMO1.md",
    "content": "# 通常の3D描写のデモ\n\n以下で実際を確認できます。\n\n- [demo1](../demo/sample1.html)\n\n## sample1.mjs\n\n``` js\n// --- ライブラリの読み込み ---\n// UI操作用ライブラリ\nimport GuiBlocks from \"./libs/GuiBlocks.min.js\";\n// 入力デバイス（マウスやタッチ）操作用ライブラリ\nimport InputDetect from \"./libs/InputDetect.min.js\";\n// 3DCGエンジン本体（あなたが作ったS3ライブラリ）\nimport S3 from \"./libs/S3.min.js\";\n\n/**\n * S3ライブラリ内の数値計算クラスのデモ関数\n * 行列の作成・計算・逆行列など、基本的な数値処理のサンプルを表示します。\n */\nconst testMath = function() {\n\tconsole.log(\"Math のサンプル\");\n\n\t// 4x4行列の生成\n\tconst m4 = new S3.Matrix(\n\t\t3, -2, -6, 4,\n\t\t-7, -6, 8, 21,\n\t\t-4, -7, 9, 11,\n\t\t2, -3, -5, 8\n\t);\n\n\tconsole.log(\"行列を作成\");\n\tconsole.log(m4.toString());\n\n\t// 4x4行列の行列式を計算（det4）\n\tconsole.log(\"4x4行列の行列式\");\n\tconsole.log(m4.det4().toString());\n\n\t// 4x4行列の逆行列を計算（inverse4）\n\tconsole.log(\"4x4行列の逆行列\");\n\tconsole.log(m4.inverse4().toString());\n\n\t// 行列同士の掛け算\n\tconsole.log(\"行列の掛け算\");\n\tconsole.log(m4.mulMatrix(m4).toString());\n\n\t// 3x3行列の生成\n\tconst m3 = new S3.Matrix(\n\t\t1, 2, 1,\n\t\t2, 1, 0,\n\t\t1, 1, 2\n\t);\n\n\t// 3x3行列の行列式\n\tconsole.log(\"3x3行列の行列式\");\n\tconsole.log(m3.det3().toString());\n\n\t// 3x3行列の逆行列\n\tconsole.log(\"3x3行列の逆行列\");\n\tconsole.log(m3.inverse3().toString());\n};\n\n/**\n * メイン処理（ウィンドウ表示・3D描画）\n */\nconst main = function() {\n\ttestMath(); // まず数値計算デモを実行\n\n\tconsole.log(\"S3 クラスのサンプル\");\n\n\t// スクロールを抑止（マウスやタッチ操作が3D操作用イベントとして優先されるようにする）\n\tInputDetect.noScroll();\n\n\t// --- GUIパネル（描画用キャンバス）を作成 ---\n\t// 640x480ピクセルの描画パネル（HTML canvas）を作成\n\tconst panel = new GuiBlocks.Canvas();\n\t// id=\"scomponent\" の要素内にこのパネルを追加\n\tpanel.putMe(\"scomponent\", GuiBlocks.PUT_TYPE.IN);\n\t// サイズ単位をピクセルで設定\n\tpanel.setUnit(GuiBlocks.UNIT_TYPE.PX);\n\tpanel.setPixelSize(640, 480);  // 実際のピクセルサイズ\n\tpanel.setSize(640, 480);       // 論理サイズ\n\n\t{\n\t\t// HTMLCanvasElementを取得\n\t\tconst canvas = panel.getCanvas();\n\n\t\t// S3システム本体（描画エンジン管理クラス）を作成\n\t\tconst sys = new S3.System();\n\t\t// カメラ操作用コントローラを作成\n\t\tconst controller = new S3.CameraController();\n\t\t// カメラ（視点）を生成\n\t\tconst camera = sys.createCamera();\n\n\t\t// S3システムにcanvasを登録（描画の出力先を指定）\n\t\tsys.setCanvas(canvas);\n\t\t// カメラ操作コントローラにもcanvasを登録（マウス操作取得）\n\t\tcontroller.setCanvas(canvas);\n\n\t\t// システムの座標系モードをOpenGL互換に設定（右手系、逆順カリングなど）\n\t\tsys.setSystemMode(S3.SYSTEM_MODE.OPEN_GL);\n\t\t// DirectX互換の場合はこちら\n\t\t// sys.setSystemMode(S3.SYSTEM_MODE.DIRECT_X);\n\n\t\t// --- 3Dモデルデータの作成と読み込みデモ ---\n\t\tconsole.log(\"json形式での読み書きのテスト\");\n\t\t// サンプル用の簡単なポリゴン（四面体っぽい）データ\n\t\tconst meshdata = {\n\t\t\tIndexes:{\n\t\t\t\tbody:[\n\t\t\t\t\t[ 0, 1, 2],\n\t\t\t\t\t[ 3, 1, 0],\n\t\t\t\t\t[ 3, 0, 2],\n\t\t\t\t\t[ 3, 2, 1]\n\t\t\t\t]\n\t\t\t},\n\t\t\tVertices:[\n\t\t\t\t[  0,  0,  -5],\n\t\t\t\t[  0, 20,  -5],\n\t\t\t\t[ 10,  0,  -5],\n\t\t\t\t[  0,  0, -20]\n\t\t\t]\n\t\t};\n\n\t\tlet mesh;\n\t\t// JSONデータからS3Meshにインポート\n\t\tconsole.log(\".json\");\n\t\tmesh = S3.MeshLoader.inputData(sys, meshdata, \"json\");\n\t\t// S3MeshをJSON形式でエクスポート（逆変換）\n\t\tconsole.log(S3.MeshLoader.outputData(mesh, \"json\"));\n\n\t\t// MQO形式（Metasequoia 3Dモデラー用）のエクスポートテスト\n\t\tconsole.log(\"MQOでの出力テスト\");\n\t\tconsole.log(\".mqo\");\n\t\tconsole.log(S3.MeshLoader.outputData(mesh, \"mqo\"));\n\n\t\t// MQOファイルのインポートテスト（ファイルは ./resource/teapot.mqo を想定）\n\t\tconsole.log(\"MQOでの入力テスト\");\n\t\tmesh = S3.MeshLoader.inputData(sys, \"./resource/teapot.mqo\");\n\n\t\t// --- モデル（位置・回転・スケールを持つ3Dオブジェクト）を作成 ---\n\t\tconst model = sys.createModel();\n\t\tmodel.setMesh(mesh);    // 形状データをセット\n\t\tmodel.setScale(5);      // 全体スケールを5倍に設定\n\n\t\t// --- カメラ（視点）の初期設定 ---\n\t\tcamera.setEye(new S3.Vector( 20,  30,  50));   // 視点（カメラ位置）を設定\n\t\tcamera.setCenter(new S3.Vector( 0,  0,  0));   // 注視点（カメラが向く中心）を設定\n\t\tcontroller.setCamera(camera);                  // カメラコントローラにカメラを登録\n\n\t\t// --- シーン（3D空間）を作成してモデルとカメラを配置 ---\n\t\tconst scene = sys.createScene();\n\t\tscene.setCamera(camera);        // シーンにカメラをセット\n\t\tscene.addModel(model);          // モデルをシーンに追加\n\n\t\t/**\n\t\t * 画面を定期的に再描画する関数（アニメーションループ）\n\t\t * モデルを回転させたり、カメラコントローラで動的に視点操作できる\n\t\t */\n\t\tconst redraw = function() {\n\t\t\t// コントローラの入力に合わせてカメラを更新\n\t\t\tscene.setCamera(controller.getCamera());\n\t\t\tsys.clear();           // 描画バッファをクリア\n\t\t\tmodel.addRotateY(3);   // モデルをY軸回転させる（毎フレーム3度）\n\t\t\tsys.drawAxis(scene);   // XYZ軸を描画（デバッグ・可視化用）\n\t\t\tsys.drawScene(scene);  // シーン全体を描画（全モデルを表示）\n\t\t};\n\n\t\tconsole.log(model);\n\n\t\t// 50ミリ秒ごとにredraw()を実行（1秒あたり約20回の描画更新＝アニメーション）\n\t\tsetInterval(redraw, 50);\n\t}\n};\n\n// メイン関数実行（最初に呼ばれる）\nmain();\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\JavaScript\\js-s3js\\docs\\manual_md\\DEMO2.md",
    "name": "./docs/manual_md/DEMO2.md",
    "content": "# WebGLの3D描写のデモ\n\n以下で実際を確認できます。\n\n- [demo2](../demo/sample2.html)\n\n## sample2.mjs\n\n``` js\n// 外部UIライブラリやS3エンジンの読み込み\nimport GuiBlocks from \"./libs/GuiBlocks.min.js\";\nimport InputDetect from \"./libs/InputDetect.min.js\";\nimport S3 from \"./libs/S3.min.js\";\n\n/**\n * WebGLによる3D描画テスト用クラス\n * S3エンジンとGUI部品を組み合わせて動作するデモアプリです。\n */\nclass S3DGLTest {\n\n\tconstructor() {\n\t\t// S3のWebGLシステム（レンダリング管理）を初期化\n\t\tthis.s3 = new S3.GLSystem();\n\n\t\t// カメラ操作用コントローラーを初期化\n\t\tthis.controller = new S3.CameraController();\n\n\t\t// カメラ、メッシュ、モデルの参照を初期化\n\t\tthis.camera = null;\n\t\tthis.mesh = null;\n\t\tthis.model = null;\n\t}\n\n\t/**\n\t * WebGL描画用Canvasの初期化処理\n\t * @param {HTMLCanvasElement} canvas - 描画対象のCanvas要素\n\t */\n\tinitCanvas(canvas) {\n\t\tconst s3 = this.s3;\n\t\t// 背景色を黒に設定\n\t\ts3.setBackgroundColor(new S3.Vector(0, 0, 0));\n\t\t// WebGLコンテキストをCanvasにセット\n\t\ts3.setCanvas(canvas);\n\t\t// カメラ操作用のCanvasも登録\n\t\tthis.controller.setCanvas(canvas);\n\n\t\t// 3Dカメラを生成\n\t\tthis.camera = s3.createCamera();\n\n\t\t// シェーダープログラム（GLSL）を作成・セット\n\t\tconst program = s3.createProgram();\n\t\tprogram.setFragmentShader(\"./libs/S3GL.frag\"); // フラグメントシェーダ\n\t\tprogram.setVertexShader(\"./libs/S3GL.vert\");   // バーテックスシェーダ\n\t\ts3.setProgram(program);\n\n\t\t// 描画方式などの初期パラメータ\n\t\ts3.setSystemMode(S3.SYSTEM_MODE.OPEN_GL);       // OpenGL方式\n\t\ts3.setFrontMode(S3.FRONT_FACE.CLOCKWISE);       // 面の表裏判定を時計回りに\n\n\t\t// カメラの視点と注視点を設定\n\t\tthis.camera.setEye(new S3.Vector(20, 30, 50));  // カメラの位置\n\t\tthis.camera.setCenter(new S3.Vector(0, 0, 0));  // 注視点（原点）\n\n\t\t// コントローラーにカメラをセット（ユーザー操作反映用）\n\t\tthis.controller.setCamera(this.camera);\n\t}\n\n\t/**\n\t * 現在のモデル・メッシュをクリア（削除）する\n\t * 破棄・参照切り離しでリソースリークを防ぐ\n\t */\n\tclearModel() {\n\t\tif (this.model) {\n\t\t\tthis.model = null;\n\t\t}\n\t\tif (this.mesh) {\n\t\t\tthis.mesh.dispose(); // GLリソース解放\n\t\t\tthis.mesh = null;\n\t\t}\n\t}\n\n\t/**\n\t * モデル（3D形状データ）を読み込んでセットする\n\t * @param {string} url - MQOファイルなどのリソースパス\n\t */\n\tsetModel(url) {\n\t\tconst s3 = this.s3;\n\t\t// 新しい3Dモデルオブジェクト生成\n\t\tconst newmodel = s3.createModel();\n\t\t// メッシュローダーでファイルからメッシュデータ生成\n\t\tconst newmesh = S3.MeshLoader.inputData(s3, url);\n\t\t// モデルにメッシュを登録\n\t\tnewmodel.setMesh(newmesh);\n\n\t\t// 既存のモデルをクリア\n\t\tthis.clearModel();\n\n\t\t// 読み込んだモデル・メッシュを保持\n\t\tthis.model = newmodel;\n\t\tthis.mesh = newmesh;\n\t}\n\n\t/**\n\t * シーンの描画処理\n\t * カメラ、ライト、モデルをまとめてS3エンジンでレンダリング\n\t */\n\tdraw() {\n\t\tconst s3 = this.s3;\n\t\t// シーン（Scene）を作成\n\t\tconst scene = s3.createScene();\n\n\t\t// コントローラーからカメラ取得し、シーンに登録\n\t\tscene.setCamera(this.controller.getCamera());\n\n\t\t// モデルがセットされていればシーンに追加し、動きをつける\n\t\tif (this.model !== null) {\n\t\t\tscene.addModel(this.model);\n\t\t\tthis.model.setScale(5);      // モデルを拡大\n\t\t\tthis.model.addRotateY(3);    // モデルをY軸周りに回転\n\t\t}\n\n\t\t// 環境に3つのライト（光源）を追加\n\t\t// 1. 上方向からの平行光源\n\t\tconst light_down = s3.createLight();\n\t\tlight_down.setMode(S3.LIGHT_MODE.DIRECTIONAL_LIGHT);\n\t\tlight_down.setColor(new S3.Vector(0.6, 0.6, 1.0));\n\t\tlight_down.setDirection(new S3.Vector(0, -1, 0));\n\t\tscene.addLight(light_down);\n\n\t\t// 2. 環境光\n\t\tconst light_ambient = s3.createLight();\n\t\tlight_ambient.setMode(S3.LIGHT_MODE.AMBIENT_LIGHT);\n\t\tlight_ambient.setColor(new S3.Vector(0.0, 0.1, 0.05));\n\t\tscene.addLight(light_ambient);\n\n\t\t// 3. ポイントライト（位置指定の点光源）\n\t\tconst light_point = s3.createLight();\n\t\tlight_point.setMode(S3.LIGHT_MODE.POINT_LIGHT);\n\t\tlight_point.setColor(new S3.Vector(0.9, 0.9, 1.0));\n\t\tlight_point.setPosition(new S3.Vector(100, 0, 0));\n\t\tlight_point.setRange(200); // 有効範囲\n\t\tscene.addLight(light_point);\n\n\t\t// バッファ等の初期化\n\t\ts3.clear();\n\n\t\t// シーンを描画\n\t\ts3.drawScene(scene);\n\t}\n\n}\n\n// このクラスのインスタンスを生成しグローバル参照\nconst gl = new S3DGLTest();\n\n/**\n * WebGL描画パネル（Canvasと連携したUI部品）の生成\n * - 画面上に1280x720のWebGLキャンバスを配置\n * - テスト用の3Dモデル（teapot.mqo）を初期表示\n * - 50msごとに描画を更新\n */\nconst createWebGLPanel2 = function() {\n\tconst panel = new GuiBlocks.Canvas();\n\tpanel.putMe(\"webglpanel\", GuiBlocks.PUT_TYPE.IN);\n\tpanel.setUnit(GuiBlocks.UNIT_TYPE.PX);\n\tpanel.setPixelSize(1280, 720);\n\n\tconst canvas = panel.getCanvas();\n\n\tgl.initCanvas(canvas); // WebGLセットアップ\n\tgl.setModel(\"./resource/teapot.mqo\"); // ティーポット3Dモデル読み込み\n\n\tconst redraw = function() {\n\t\tgl.draw(); // 画面更新\n\t};\n\n\t// 描画ループ（50ms間隔）\n\tsetInterval(redraw, 50);\n\t// ※setTimeoutによる単発描画も可能\n};\n\n/**\n * 操作用パネルの生成\n * - ファイル選択用のコンボボックス（mqoモデルのリスト）\n * - 「load」ボタンでモデルの切り替えが可能\n */\nconst createOperationPanel = function() {\n\tconst filepanel = new GuiBlocks.Panel(\"ファイル\");\n\tfilepanel.putMe(\"operationpanel\", GuiBlocks.PUT_TYPE.IN);\n\n\tconst filebox = new GuiBlocks.ComboBox([\n\t\t\"./resource/teapot.mqo\",\n\t\t\"./resource/bumptest.mqo\"\n\t]);\n\tfilebox.putMe(filepanel, GuiBlocks.PUT_TYPE.IN);\n\n\tconst loadbutton = new GuiBlocks.Button(\"load\");\n\tloadbutton.putMe(filebox, GuiBlocks.PUT_TYPE.NEWLINE);\n\tloadbutton.addListener(function () {\n\t\tconst filename = filebox.getSelectedItem();\n\t\tconsole.log(filename);\n\t\tgl.setModel(filename); // 新しいモデルに切り替え\n\t});\n};\n\n/**\n * メイン処理\n * - コンソール出力\n * - スクロール抑止\n * - WebGLパネルと操作パネルのセットアップ\n */\nconst main = function() {\n\tconsole.log(\"S3DGL クラスのサンプル\");\n\n\t// スマホ等でのスクロールを抑制\n\tInputDetect.noScroll();\n\n\t// WebGL描画パネル生成\n\tcreateWebGLPanel2();\n\t// 操作パネル生成\n\tcreateOperationPanel();\n};\n\n// アプリ起動\nmain();\n```\n\n## S3GL.vert\n\n~~~ c\n// ========================================================================\n// バーテックス（頂点）シェーダ\n// このシェーダは、3Dオブジェクトの各頂点ごとに呼び出され、\n// 頂点位置の座標変換や、法線・テクスチャ座標などの各種属性を\n// フラグメントシェーダ（ピクセルシェーダ）に渡します。\n// ========================================================================\n\n// ---------- 頂点属性（JavaScriptからバインドされる） -------------------\n\n// 頂点法線ベクトル（照明計算や法線マップで使う）\nattribute vec3 vertexNormal;\n\n// 接線・従法線（タンジェント/バイノーマル）\n// 法線マッピング（ノーマルマップ）で必要\nattribute vec3 vertexBinormal;\nattribute vec3 vertexTangent;\n\n// 頂点の3D空間位置（ワールド空間での頂点座標）\nattribute vec3 vertexPosition;\n\n// テクスチャのUV座標（2次元、0.0～1.0など）\nattribute vec2 vertexTextureCoord;\n\n// マテリアル（材質）のインデックス番号（float型で持つ）\n// 面ごとに異なるマテリアル情報を持つ場合に利用\nattribute float vertexMaterialFloat;\n\n// ---------- 行列（uniform: 全頂点で共通の定数値） ----------------------\n\n// モデル座標→カメラ→射影空間への変換行列（最終的にgl_Positionに使う）\nuniform mat4 matrixLocalToPerspective4;\n\n// モデル座標→ワールド空間への変換行列\nuniform mat4 matrixLocalToWorld4;\n\n// ---------- シェーダ間の受け渡し（varying: 頂点→フラグメント） --------\n\n// マテリアル番号\nvarying float interpolationMaterialFloat;\n\n// 法線・接線・従法線（各頂点のものをフラグメントに渡す）\nvarying vec3 interpolationNormal;\nvarying vec3 interpolationBinormal;\nvarying vec3 interpolationTangent;\n\n// ワールド空間での頂点位置（ピクセルシェーダのライティングなどに使う）\nvarying vec3 interpolationPosition;\n\n// テクスチャ座標（フラグメントシェーダでピクセルごとのUV計算に使う）\nvarying vec2 interpolationTextureCoord;\n\n// ---------- メイン関数 ----------------------------------------------\n\nvoid main(void) {\n\t// マテリアル番号をそのまま渡す（int化はfsで行う）\n\tinterpolationMaterialFloat = vertexMaterialFloat;\n\n\t// 各種ベクトルもフラグメントシェーダへ伝達\n\tinterpolationNormal   = vertexNormal;\n\tinterpolationBinormal = vertexBinormal;\n\tinterpolationTangent  = vertexTangent;\n\n\t// ワールド空間の頂点位置を計算して渡す（照明/反射などで使う）\n\tinterpolationPosition = (matrixLocalToWorld4 * vec4(vertexPosition, 1.0)).xyz;\n\n\t// UV座標\n\tinterpolationTextureCoord = vertexTextureCoord;\n\n\t// 頂点を最終的にどこに描画するか計算（射影空間座標）\n\tgl_Position = matrixLocalToPerspective4 * vec4(vertexPosition, 1.0);\n\n\t// ※このgl_Positionの値が、画面上の頂点の位置になる\n}\n~~~\n\n## S3GL.frag\n\n~~~ c\n// ========================================================================\n// フラグメント（ピクセル）シェーダ\n// このシェーダは、各ピクセル（画面上の1点）ごとに実行されます。\n// ライティング、テクスチャ、マテリアル、ノーマルマップなどの情報を使って\n// 最終的な色（gl_FragColor）を決定します。\n// ========================================================================\n\n// ---------- 精度の指定（必須：ESのGLSL） ------------------------------\nprecision mediump float;\n\n// ---------- 材質（マテリアル）関連のuniform変数 -------------------------\n// JavaScript側から各マテリアルごとにセットされる（最大4つまで）\n\n#define MATERIALS_MAX 4\n\nuniform vec4 materialsColorAndDiffuse[MATERIALS_MAX];\n//  [R, G, B, 拡散率]（カラー＋ディフューズ）\n\nuniform vec4 materialsSpecularAndPower[MATERIALS_MAX];\n//  [R, G, B, 光沢度]（スペキュラ＋パワー）\n\nuniform vec3 materialsEmission[MATERIALS_MAX];\n//  発光色（エミッシブ）\n\nuniform vec4 materialsAmbientAndReflect[MATERIALS_MAX];\n//  [R, G, B, 反射率]（アンビエント＋リフレクト）\n\nuniform vec2 materialsTextureExist[MATERIALS_MAX];\n//  [カラーテクスチャの有無, ノーマルテクスチャの有無]（1:あり, 0:なし）\n\nuniform sampler2D materialsTextureColor[MATERIALS_MAX];\n//  カラーテクスチャ（画像）\n\nuniform sampler2D materialsTextureNormal[MATERIALS_MAX];\n//  ノーマルマップ（法線マップ用画像）\n\n// ---------- 変換行列のuniform（主に法線変換で使う） ----------------------\nuniform mat4 matrixWorldToLocal4; // ワールド→ローカル変換（逆行列など）\nuniform mat3 matrixLocalToWorld3; // ローカル→ワールド変換（回転のみ3x3行列）\n\n// ---------- ライト（光源）情報のuniform ---------------------------------\n\n#define LIGHTS_MAX 4\n#define LIGHT_MODE_NONE\t\t0\n#define LIGHT_MODE_AMBIENT\t 1\n#define LIGHT_MODE_DIRECTIONAL 2\n#define LIGHT_MODE_POINT\t   3\n\nuniform int lightsLength;\t\t\t\t // 実際に使う光源の数\nuniform vec4 lightsData1[LIGHTS_MAX];\t // 光源の種類・レンジ・方向/位置(XY)\nuniform vec4 lightsData2[LIGHTS_MAX];\t // 方向/位置(Z), 光源色(RGB)\n\n// ---------- カメラ情報（視線ベクトル） ---------------------------------\nuniform vec3 eyeWorldDirection;\n\n// ---------- 頂点シェーダから渡された補間値 ------------------------------\nvarying float interpolationMaterialFloat;\t// マテリアル番号（float型）\nvarying vec3 interpolationNormal;\t\t   // 法線ベクトル\nvarying vec3 interpolationBinormal;\t\t // バイノーマル\nvarying vec3 interpolationTangent;\t\t  // タンジェント\nvarying vec3 interpolationPosition;\t\t // ワールド空間での頂点位置\nvarying vec2 interpolationTextureCoord;\t // テクスチャUV座標\n\n// ========================================================================\n// メイン処理開始\n// ========================================================================\nvoid main(void) {\n\n\t// ----- 定数定義（色やノーマルの基準値） ----------------------------\n\tconst vec4 ZERO\t  = vec4(0.0, 0.0, 0.0, 0.0);\n\tconst vec4 ONE\t   = vec4(1.0, 1.0, 1.0, 1.0);\n\tconst vec4 WHITE\t = ONE;\n\tconst vec3 NORMALTOP = vec3(0.5, 0.5, 1.0); // 法線マップのデフォルト\n\n\t// ----- 1. 頂点シェーダから受け取った値の初期処理 ------------------\n\n\tint   vertexMaterial = int(interpolationMaterialFloat); // マテリアル番号をintに変換\n\tvec3  vertexNormal   = normalize(interpolationNormal);\n\tvec3  vertexBinormal = normalize(interpolationBinormal);\n\tvec3  vertexTangent  = normalize(interpolationTangent);\n\n\t// ----- 2. 面ごとのマテリアル情報（配列から抽出） ------------------\n\n\t// 各種マテリアル属性値（色、反射率、テクスチャ有無など）を取得\n\tvec3  materialColor;\n\tfloat materialDiffuse;\n\tvec3  materialSpecular;\n\tfloat materialPower;\n\tvec3  materialEmission;\n\tvec3  materialAmbient;\n\tfloat materialReflect;\n\tfloat materialRoughness;\n\tvec4  materialTextureColor;\n\tvec3  materialTextureNormal;\n\tbool  materialIsSetNormal;\n\n\t{\n\t\t// 材質配列（最大4つ）から該当インデックスを選択\n\t\tif (vertexMaterial < 4) {\n\t\t\t// 材質番号ごとに各種パラメータを取り出す\n\t\t\t// 下記のような分岐は、配列に対してインデックスでアクセスしやすくするため\n\t\t\tif(vertexMaterial < 2) {\n\t\t\t\tif(vertexMaterial == 0) {\n\t\t\t\t\tmaterialColor\t\t = materialsColorAndDiffuse[0].xyz;\n\t\t\t\t\tmaterialDiffuse\t   = materialsColorAndDiffuse[0].z;\n\t\t\t\t\tmaterialSpecular\t  = materialsSpecularAndPower[0].xyz;\n\t\t\t\t\tmaterialPower\t\t = materialsSpecularAndPower[0].w;\n\t\t\t\t\tmaterialEmission\t  = materialsEmission[0];\n\t\t\t\t\tmaterialAmbient\t   = materialsAmbientAndReflect[0].xyz;\n\t\t\t\t\tmaterialReflect\t   = materialsAmbientAndReflect[0].w;\n\t\t\t\t\tmaterialTextureColor  = materialsTextureExist[0].x > 0.5 ?\n\t\t\t\t\t\ttexture2D(materialsTextureColor[0], interpolationTextureCoord) : WHITE;\n\t\t\t\t\tmaterialIsSetNormal   = materialsTextureExist[0].y > 0.5;\n\t\t\t\t\tmaterialTextureNormal = materialIsSetNormal ?\n\t\t\t\t\t\ttexture2D(materialsTextureNormal[0], interpolationTextureCoord).xyz : NORMALTOP;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// 1番のマテリアル\n\t\t\t\t\tmaterialColor\t\t = materialsColorAndDiffuse[1].xyz;\n\t\t\t\t\tmaterialDiffuse\t   = materialsColorAndDiffuse[1].z;\n\t\t\t\t\tmaterialSpecular\t  = materialsSpecularAndPower[1].xyz;\n\t\t\t\t\tmaterialPower\t\t = materialsSpecularAndPower[1].w;\n\t\t\t\t\tmaterialEmission\t  = materialsEmission[1];\n\t\t\t\t\tmaterialAmbient\t   = materialsAmbientAndReflect[1].xyz;\n\t\t\t\t\tmaterialReflect\t   = materialsAmbientAndReflect[1].w;\n\t\t\t\t\tmaterialTextureColor  = materialsTextureExist[1].x > 0.5 ?\n\t\t\t\t\t\ttexture2D(materialsTextureColor[1], interpolationTextureCoord) : WHITE;\n\t\t\t\t\tmaterialIsSetNormal   = materialsTextureExist[1].y > 0.5;\n\t\t\t\t\tmaterialTextureNormal = materialIsSetNormal ?\n\t\t\t\t\t\ttexture2D(materialsTextureNormal[1], interpolationTextureCoord).xyz : NORMALTOP;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(vertexMaterial == 2) {\n\t\t\t\t\t// 2番のマテリアル\n\t\t\t\t\tmaterialColor\t\t = materialsColorAndDiffuse[2].xyz;\n\t\t\t\t\tmaterialDiffuse\t   = materialsColorAndDiffuse[2].z;\n\t\t\t\t\tmaterialSpecular\t  = materialsSpecularAndPower[2].xyz;\n\t\t\t\t\tmaterialPower\t\t = materialsSpecularAndPower[2].w;\n\t\t\t\t\tmaterialEmission\t  = materialsEmission[2];\n\t\t\t\t\tmaterialAmbient\t   = materialsAmbientAndReflect[2].xyz;\n\t\t\t\t\tmaterialReflect\t   = materialsAmbientAndReflect[2].w;\n\t\t\t\t\tmaterialTextureColor  = materialsTextureExist[2].x > 0.5 ?\n\t\t\t\t\t\ttexture2D(materialsTextureColor[2], interpolationTextureCoord) : WHITE;\n\t\t\t\t\tmaterialIsSetNormal   = materialsTextureExist[2].y > 0.5;\n\t\t\t\t\tmaterialTextureNormal = materialIsSetNormal ?\n\t\t\t\t\t\ttexture2D(materialsTextureNormal[2], interpolationTextureCoord).xyz : NORMALTOP;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// 3番のマテリアル\n\t\t\t\t\tmaterialColor\t\t = materialsColorAndDiffuse[3].xyz;\n\t\t\t\t\tmaterialDiffuse\t   = materialsColorAndDiffuse[3].z;\n\t\t\t\t\tmaterialSpecular\t  = materialsSpecularAndPower[3].xyz;\n\t\t\t\t\tmaterialPower\t\t = materialsSpecularAndPower[3].w;\n\t\t\t\t\tmaterialEmission\t  = materialsEmission[3];\n\t\t\t\t\tmaterialAmbient\t   = materialsAmbientAndReflect[3].xyz;\n\t\t\t\t\tmaterialReflect\t   = materialsAmbientAndReflect[3].w;\n\t\t\t\t\tmaterialTextureColor  = materialsTextureExist[3].x > 0.5 ?\n\t\t\t\t\t\ttexture2D(materialsTextureColor[3], interpolationTextureCoord) : WHITE;\n\t\t\t\t\tmaterialIsSetNormal   = materialsTextureExist[3].y > 0.5;\n\t\t\t\t\tmaterialTextureNormal = materialIsSetNormal ?\n\t\t\t\t\t\ttexture2D(materialsTextureNormal[3], interpolationTextureCoord).xyz : NORMALTOP;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// ラフネス（ざらざら感）は光沢度から計算\n\t\t// ラフネス値(0...1)を暫定計算(大きいほどざらざらしている)\n\t\tmaterialRoughness = (100.0 - materialPower) * 0.01;\n\t}\n\n\t// ----- 3. テクスチャ反映・ノーマルマッピング ------------------------\n\t{\n\t\t// カラーテクスチャで色を掛ける\n\t\tmaterialColor *= materialTextureColor.xyz;\n\n\t\t// ノーマルマップ（法線テクスチャ）を使う場合\n\t\tif(materialIsSetNormal) {\n\t\t\t// [0,1] -> [-1,1]の範囲へ変換\n\t\t\tmaterialTextureNormal = (materialTextureNormal * 2.0 - 1.0);\n\t\t\t// 接線空間からワールド空間に変換\n\t\t\tvertexNormal = normalize(\n\t\t\t\t-materialTextureNormal.x * vertexTangent +\n\t\t\t\tmaterialTextureNormal.y * vertexBinormal +\n\t\t\t\tmaterialTextureNormal.z * vertexNormal);\n\t\t}\n\t}\n\n\t// ----- 4. 反射ベクトルや視線方向の計算 ------------------------------\n\t\n\t// 反射ベクトル\n\tvec3 vertexReflectVector = reflect(eyeWorldDirection, normalize(matrixLocalToWorld3 * vertexNormal));\n\n\t// カメラが向いている方向を取得\n\tvec3 eyeDirection = normalize(matrixWorldToLocal4 * vec4(eyeWorldDirection, 0.0)).xyz;\n\n\t// ----- 5. 出力色の初期化 --------------------------------------------\n\tvec3 destDiffuse  = materialColor * materialEmission;\n\tvec3 destSpecular = ZERO.xyz;\n\tvec3 destAmbient  = materialAmbient * 0.2;\n\n\t// 光源全体の平均色（反射表現などに使う）\n\tvec3 averageLightsColor = ZERO.xyz;\n\n\t// ----- 6. ライティング計算 ------------------------------------------\n\t{\n\t\t// 全ライトについて計算\n\t\tfor(int i = 0; i < LIGHTS_MAX; i++) {\n\t\t\tint   lightMode   = int(lightsData1[i].x);\n\t\t\tfloat lightRange  = lightsData1[i].y;\n\t\t\tvec3  lightVector = vec3(lightsData1[i].zw, lightsData2[i].x);\n\t\t\tvec3  lightColor  = lightsData2[i].yzw;\n\n\t\t\t// 平行光源・点光源\n\t\t\tif((lightMode == LIGHT_MODE_DIRECTIONAL) || (lightMode == LIGHT_MODE_POINT)) {\n\t\t\t\tbool is_direction = lightMode == LIGHT_MODE_DIRECTIONAL;\n\t\t\t\t// 光源の向きや位置を求める\n\t\t\t\t// 光源の種類によって、ピクセルと光への方向ベクトルの計算を変える\n\t\t\t\t// lightsVector は、点光源なら位置を、平行光源なら方向を指す値\n\t\t\t\tvec3 lightDirection = is_direction ?\n\t\t\t\t\tnormalize(matrixWorldToLocal4 * vec4(lightVector, 0.0)).xyz :\n\t\t\t\t\tnormalize(matrixWorldToLocal4 * vec4(interpolationPosition - lightVector, 1.0)).xyz;\n\t\t\t\tfloat d = is_direction ? -1.0 : length(lightVector - interpolationPosition);\n\n\t\t\t\tif(d < lightRange) {\n\t\t\t\t\t// 距離減衰\n\t\t\t\t\tfloat rate = is_direction ? 1.0 : pow(1.0 - (d / lightRange), 0.5);\n\t\t\t\t\t// 拡散反射（ランバート反射）\n\t\t\t\t\tfloat diffuse = clamp(((dot(vertexNormal, lightDirection) * 0.9) + 0.1) * materialDiffuse, 0.0, 1.0);\n\t\t\t\t\tdestDiffuse  += lightColor * materialColor.xyz * diffuse * rate;\n\t\t\t\t\t// 鏡面反射（ブリン・フォン）\n\t\t\t\t\tvec3  halfLightEye = normalize(lightDirection + eyeDirection);\n\t\t\t\t\tfloat specular\t = pow(clamp(dot(vertexNormal, halfLightEye), 0.0, 1.0), materialPower);\n\t\t\t\t\tdestSpecular\t  += lightColor * materialSpecular.xyz * specular * rate;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// アンビエントライト（環境光）\n\t\t\telse if(lightMode == LIGHT_MODE_AMBIENT) {\n\t\t\t\tdestDiffuse += lightColor * materialColor.xyz;\n\t\t\t\tdestAmbient += lightColor * materialAmbient.xyz;\n\t\t\t}\n\n\t\t\t// 光の平均色（反射・環境エフェクト用）\n\t\t\taverageLightsColor += lightColor;\n\n\t\t\t// 実際に使う光源数分だけループ\n\t\t\tif(i == lightsLength) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// 平均色を正規化\n\t\tif(0 < lightsLength) {\n\t\t\taverageLightsColor /= vec3(lightsLength, lightsLength, lightsLength);\n\t\t}\n\t}\n\n\t// ----- 7. 反射表現（リフレクションの模様作成）-----------------------\n\tvec3 destColor = ZERO.xyz;\n\n\t{\n\t\t// アンビエント光\n\t\tdestColor += destAmbient;\n\n\t\t// 拡散反射（反射率が高いほど弱くする）\n\t\tdestColor += clamp(destDiffuse * (1.0 - materialReflect * 0.8), 0.0, 1.0);\n\n\t\t// 鏡面反射\n\t\tdestColor += destSpecular;\n\n\t\t// 反射のエフェクト（物体に周囲の色が写り込む）\n\t\tif(materialReflect > 0.0001) {\n\t\t\t// リフレクト用の簡易ノイズ模様を計算（ラフネスで模様のボケ方を制御）\n\t\t\tfloat x = vertexReflectVector.y;\n\t\t\tfloat x1 = mix(-0.1, -0.5, materialRoughness);\n\t\t\tfloat x2 = mix(0.01,  0.5, materialRoughness);\n\t\t\tfloat c1 = mix(-0.3,  0.5, materialRoughness);\n\t\t\tfloat c2 = mix( 0.9,  0.6, materialRoughness);\n\t\t\tfloat c3 = mix( 0.3,  0.4, materialRoughness);\n\t\t\tfloat c4 = mix( 1.2,  0.8, materialRoughness);\n\t\t\tfloat c5 = mix( 0.3,  0.5, materialRoughness);\n\n\t\t\tx = x < x1 ? mix( c1, c2, (x + 1.0) * (1.0 / (1.0 + x1))) :\n\t\t\t\tx < 0.0 ? mix( c2, c3, (x - x1) * (1.0 / -x1)) :\n\t\t\t\tx < x2  ? mix( c3, c4, x * (1.0 / x2)) :\n\t\t\t\t\t\t  mix( c4, c5, (x - x2) * (1.0 / (1.0 - x2))) ;\n\n\t\t\t// 光沢・ラフネスの影響も反映した色模様\n\t\t\t//  リフレクトが大きいほどはっきり強くうつりこむ\n\t\t\t//  映り込む模様は、周りの光の色に影響する\n\t\t\tvec3 reflectColor = vec3(x, x, x) * materialReflect * averageLightsColor;\n\n\t\t\t// 映り込む模様の色\n\t\t\t//  ラフネスが大きいほど、物体の色で映り込む\n\t\t\t//  ラフネスが小さいほど、スペキュラの色で映り込む\n\t\t\treflectColor *= materialRoughness * materialColor + (1.0 - materialRoughness) * materialSpecular;\n\n\t\t\tdestColor += reflectColor;\n\t\t}\n\t}\n\n\t// ----- 8. 出力（ピクセル色の最終決定）-------------------------------\n\tgl_FragColor = vec4(destColor, 1.0);\n}\n~~~",
    "static": true,
    "access": "public"
  }
]